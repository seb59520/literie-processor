#!/usr/bin/env python3
"""
Cr√©ateur d'installateur portable pour MATELAS
Installation autonome sans droits administrateur
"""

import os
import sys
import json
import shutil
import zipfile
from pathlib import Path
from datetime import datetime

def create_portable_installer():
    """Cr√©e un installateur portable complet"""
    
    print("üì¶ CR√âATION D'INSTALLATEUR PORTABLE MATELAS")
    print("=" * 60)
    print("üéØ Installation autonome sans droits administrateur")
    print()
    
    version = "3.10.3"
    app_name = "MATELAS_Processor"
    
    # Cr√©er le dossier d'installation portable
    installer_dir = Path("MATELAS_Portable_Installer")
    if installer_dir.exists():
        shutil.rmtree(installer_dir)
    installer_dir.mkdir()
    
    print(f"üìÅ Cr√©ation installateur: {installer_dir}")
    
    # Cr√©er la structure portable
    app_files_dir = installer_dir / "app_files"
    app_files_dir.mkdir()
    
    print("üèóÔ∏è Structure d'installation portable:")
    
    # 1. Copier tous les fichiers de l'application
    source_dir = Path.cwd()
    files_copied = 0
    
    # Fichiers √† exclure de l'installateur
    exclude_patterns = {
        '__pycache__', '.pyc', '.git', '.DS_Store', 'node_modules',
        'admin_update_storage', 'backup_*', 'temp_*', '*.backup',
        'MATELAS_Portable_Installer', 'dist', 'build', '*.spec'
    }
    
    print("   üìÇ Copie des fichiers application...")
    
    for root, dirs, files in os.walk(source_dir):
        # Exclure certains r√©pertoires
        dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)]
        
        for file in files:
            # Exclure certains fichiers
            if any(pattern in file for pattern in exclude_patterns):
                continue
            
            source_file = Path(root) / file
            rel_path = source_file.relative_to(source_dir)
            target_file = app_files_dir / rel_path
            
            # Cr√©er r√©pertoire parent
            target_file.parent.mkdir(parents=True, exist_ok=True)
            
            try:
                shutil.copy2(source_file, target_file)
                files_copied += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è Ignor√© {rel_path}: {e}")
    
    print(f"   ‚úÖ {files_copied} fichiers copi√©s")
    
    # 2. Cr√©er script d'installation portable
    install_script = create_install_script(version, app_name)
    (installer_dir / "INSTALL.py").write_text(install_script, encoding='utf-8')
    
    # 3. Cr√©er script de d√©sinstallation
    uninstall_script = create_uninstall_script(app_name)
    (installer_dir / "UNINSTALL.py").write_text(uninstall_script, encoding='utf-8')
    
    # 4. Cr√©er fichier de configuration d'installation
    install_config = {
        "app_name": app_name,
        "version": version,
        "description": "MATELAS Processor - Traitement automatis√© des devis PDF",
        "created": datetime.now().isoformat(),
        "install_type": "portable",
        "requires_admin": False,
        "default_install_dir": f"~/Applications/{app_name}",
        "features": [
            "Interface PyQt6 moderne",
            "Traitement LLM automatique",
            "Export Excel int√©gr√©", 
            "Syst√®me de mise √† jour automatique",
            "Gestion s√©curis√©e des cl√©s API",
            "Compatible Windows/Mac/Linux"
        ]
    }
    
    (installer_dir / "install_config.json").write_text(
        json.dumps(install_config, indent=2, ensure_ascii=False), 
        encoding='utf-8'
    )
    
    # 5. Cr√©er README d'installation
    readme_content = create_readme_content(version, app_name)
    (installer_dir / "README.md").write_text(readme_content, encoding='utf-8')
    
    # 6. Cr√©er fichiers batch/shell pour faciliter l'installation
    create_launcher_scripts(installer_dir, app_name)
    
    # 7. Cr√©er ZIP complet
    create_installer_zip(installer_dir, version)
    
    print(f"\nüìä INSTALLATEUR PORTABLE CR√â√â:")
    print(f"   üìÅ Dossier: {installer_dir}")
    print(f"   üì¶ Archive: MATELAS_Portable_v{version}.zip")
    print(f"   üíæ Taille: {get_folder_size(installer_dir):.1f} MB")
    
    show_installation_instructions(version)
    
    return True

def create_install_script(version, app_name):
    """Cr√©e le script d'installation Python"""
    return '''#!/usr/bin/env python3
"""
Installateur portable MATELAS v{version}
Installation autonome sans droits administrateur
"""

import os
import sys
import json
import shutil
from pathlib import Path

def install_matelas():
    """Installation portable de MATELAS"""
    print("üöÄ INSTALLATION PORTABLE MATELAS v{version}")
    print("=" * 50)
    
    # D√©tecter l'OS
    import platform
    os_name = platform.system()
    
    # D√©finir le r√©pertoire d'installation selon l'OS
    if os_name == "Windows":
        default_dir = Path.home() / "AppData" / "Local" / "{app_name}"
    elif os_name == "Darwin":  # macOS
        default_dir = Path.home() / "Applications" / "{app_name}"
    else:  # Linux
        default_dir = Path.home() / ".local" / "share" / "{app_name}"
    
    print(f"üíª OS d√©tect√©: {{os_name}}")
    print(f"üìÅ R√©pertoire par d√©faut: {{default_dir}}")
    
    # Demander confirmation du r√©pertoire
    response = input(f"\\nüìç Installer dans {{default_dir}}? [O/n]: ").strip().lower()
    
    if response in ['n', 'no', 'non']:
        custom_path = input("üìç Entrez le chemin d'installation: ").strip()
        install_dir = Path(custom_path) / "{app_name}"
    else:
        install_dir = default_dir
    
    print(f"\\nüì¶ Installation dans: {{install_dir}}")
    
    # Cr√©er le r√©pertoire d'installation
    if install_dir.exists():
        response = input("‚ö†Ô∏è Le r√©pertoire existe d√©j√†. √âcraser? [o/N]: ").strip().lower()
        if response not in ['o', 'oui', 'y', 'yes']:
            print("‚ùå Installation annul√©e")
            return False
        shutil.rmtree(install_dir)
    
    install_dir.mkdir(parents=True, exist_ok=True)
    
    # Copier les fichiers
    source_dir = Path(__file__).parent / "app_files"
    files_copied = 0
    
    print("\\nüìÇ Copie des fichiers...")
    
    for item in source_dir.rglob('*'):
        if item.is_file():
            rel_path = item.relative_to(source_dir)
            target_path = install_dir / rel_path
            
            # Cr√©er r√©pertoire parent
            target_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Copier fichier
            shutil.copy2(item, target_path)
            files_copied += 1
            
            if files_copied % 50 == 0:
                print(f"   üìÅ {{files_copied}} fichiers copi√©s...")
    
    print(f"‚úÖ {{files_copied}} fichiers install√©s")
    
    # Cr√©er raccourcis/lanceurs
    create_launchers(install_dir, os_name)
    
    # Cr√©er script de mise √† jour du PATH (optionnel)
    create_path_update_script(install_dir, os_name)
    
    # Cr√©er fichier d'information d'installation
    install_info = {{
        "app_name": "{app_name}",
        "version": "{version}",
        "install_date": "{{datetime.now().isoformat()}}",
        "install_dir": str(install_dir),
        "os": os_name,
        "portable": True
    }}
    
    with open(install_dir / "install_info.json", 'w') as f:
        json.dump(install_info, f, indent=2)
    
    print(f"\\nüéâ INSTALLATION TERMIN√âE!")
    print(f"üìç Application install√©e dans: {{install_dir}}")
    print(f"üöÄ Lanceur cr√©√© sur le bureau (si possible)")
    print(f"\\n‚ñ∂Ô∏è Pour d√©marrer MATELAS:")
    
    if os_name == "Windows":
        print(f"   Double-cliquez sur: {{install_dir / 'MATELAS.bat'}}")
    else:
        print(f"   Ex√©cutez: {{install_dir / 'start_matelas.sh'}}")
    
    return True

def create_launchers(install_dir, os_name):
    """Cr√©e les lanceurs selon l'OS"""
    from datetime import datetime
    
    if os_name == "Windows":
        # Cr√©er fichier .bat
        bat_content = f'''@echo off
cd /d "{{install_dir}}"
python app_gui.py
pause
'''
        (install_dir / "MATELAS.bat").write_text(bat_content)
        
        # Cr√©er raccourci bureau (tentative)
        try:
            desktop = Path.home() / "Desktop"
            if desktop.exists():
                shortcut_content = f'''[InternetShortcut]
URL=file://{{install_dir / "MATELAS.bat"}}
IconFile={{install_dir / "matelas_icon.ico"}}
'''
                (desktop / "MATELAS.url").write_text(shortcut_content)
        except:
            pass
    
    else:
        # Cr√©er script shell
        shell_content = f'''#!/bin/bash
cd "{{install_dir}}"
python3 app_gui.py
'''
        shell_script = install_dir / "start_matelas.sh"
        shell_script.write_text(shell_content)
        shell_script.chmod(0o755)  # Rendre ex√©cutable
        
        # Cr√©er .desktop (Linux)
        if os_name == "Linux":
            try:
                desktop_file = Path.home() / ".local" / "share" / "applications" / "matelas.desktop"
                desktop_file.parent.mkdir(parents=True, exist_ok=True)
                
                desktop_content = f'''[Desktop Entry]
Name=MATELAS Processor
Comment=Traitement automatis√© des devis PDF
Exec=bash "{{install_dir / "start_matelas.sh"}}"
Icon={{install_dir / "matelas_icon.ico"}}
Terminal=false
Type=Application
Categories=Office;
'''
                desktop_file.write_text(desktop_content)
            except:
                pass

def create_path_update_script(install_dir, os_name):
    """Cr√©e un script optionnel pour ajouter au PATH"""
    if os_name == "Windows":
        path_script = f'''@echo off
echo Ajout de MATELAS au PATH utilisateur...
setx PATH "%PATH%;{{install_dir}}"
echo MATELAS ajout√© au PATH. Red√©marrez votre terminal.
pause
'''
        (install_dir / "add_to_path.bat").write_text(path_script)
    
    else:
        path_script = f'''#!/bin/bash
echo "Ajout de MATELAS au PATH..."
echo 'export PATH="$PATH:{{install_dir}}"' >> ~/.bashrc
echo "MATELAS ajout√© au PATH. Red√©marrez votre terminal ou ex√©cutez: source ~/.bashrc"
'''
        path_file = install_dir / "add_to_path.sh"
        path_file.write_text(path_script)
        path_file.chmod(0o755)

if __name__ == "__main__":
    import datetime
    success = install_matelas()
    
    if success:
        input("\\n‚úÖ Appuyez sur Entr√©e pour fermer...")
    else:
        input("\\n‚ùå Appuyez sur Entr√©e pour fermer...")
'''

def create_uninstall_script(app_name):
    """Cr√©e le script de d√©sinstallation"""
    return f'''#!/usr/bin/env python3
"""
D√©sinstallateur portable MATELAS
Suppression compl√®te et propre
"""

import os
import sys
import json
import shutil
from pathlib import Path

def uninstall_matelas():
    """D√©sinstallation de MATELAS"""
    print("üóëÔ∏è D√âSINSTALLATION MATELAS")
    print("=" * 30)
    
    # Chercher l'installation
    possible_dirs = [
        Path.home() / "AppData" / "Local" / "{app_name}",
        Path.home() / "Applications" / "{app_name}",
        Path.home() / ".local" / "share" / "{app_name}"
    ]
    
    install_dir = None
    for dir_path in possible_dirs:
        if dir_path.exists() and (dir_path / "install_info.json").exists():
            install_dir = dir_path
            break
    
    if not install_dir:
        print("‚ùå Installation MATELAS non trouv√©e")
        custom_path = input("üìç Entrez le chemin d'installation √† supprimer: ").strip()
        if custom_path:
            install_dir = Path(custom_path)
        else:
            return False
    
    print(f"üìÅ Installation trouv√©e: {{install_dir}}")
    
    # Lire les infos d'installation
    try:
        with open(install_dir / "install_info.json", 'r') as f:
            install_info = json.load(f)
        print(f"üìã Version: {{install_info.get('version', 'inconnue')}}")
        print(f"üìÖ Install√© le: {{install_info.get('install_date', 'inconnu')[:10]}}")
    except:
        pass
    
    # Confirmation
    response = input(f"\\n‚ö†Ô∏è Supprimer MATELAS de {{install_dir}}? [o/N]: ").strip().lower()
    if response not in ['o', 'oui', 'y', 'yes']:
        print("‚ùå D√©sinstallation annul√©e")
        return False
    
    # Suppression
    print("üóëÔ∏è Suppression en cours...")
    
    try:
        # Supprimer raccourcis
        desktop = Path.home() / "Desktop"
        for shortcut in ["MATELAS.url", "MATELAS.lnk"]:
            shortcut_path = desktop / shortcut
            if shortcut_path.exists():
                shortcut_path.unlink()
                print(f"‚úÖ Raccourci supprim√©: {{shortcut}}")
        
        # Supprimer .desktop (Linux)
        desktop_file = Path.home() / ".local" / "share" / "applications" / "matelas.desktop"
        if desktop_file.exists():
            desktop_file.unlink()
            print("‚úÖ Fichier .desktop supprim√©")
        
        # Supprimer l'installation
        shutil.rmtree(install_dir)
        print(f"‚úÖ Installation supprim√©e: {{install_dir}}")
        
        print("\\nüéâ D√âSINSTALLATION TERMIN√âE!")
        print("MATELAS a √©t√© compl√®tement supprim√© de votre syst√®me.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {{e}}")
        return False

if __name__ == "__main__":
    success = uninstall_matelas()
    
    if success:
        input("\\n‚úÖ Appuyez sur Entr√©e pour fermer...")
    else:
        input("\\n‚ùå Appuyez sur Entr√©e pour fermer...")
'''

def create_readme_content(version, app_name):
    """Cr√©e le contenu du README"""
    return f'''# üì¶ MATELAS Portable Installer v{version}

## üéØ Installation Autonome Sans Droits Administrateur

Cet installateur portable permet d'installer MATELAS sur n'importe quel poste Windows, macOS ou Linux **sans n√©cessiter de droits administrateur**.

## üöÄ Installation Rapide

### 1Ô∏è‚É£ M√©thode Simple (Recommand√©e)
- **Windows**: Double-cliquez sur `INSTALL.bat`
- **Mac/Linux**: Ex√©cutez `install.sh`

### 2Ô∏è‚É£ M√©thode Python
```bash
python INSTALL.py
```

## üìÅ R√©pertoires d'Installation par D√©faut

- **Windows**: `%LOCALAPPDATA%\\{app_name}`
- **macOS**: `~/Applications/{app_name}`
- **Linux**: `~/.local/share/{app_name}`

## ‚ú® Fonctionnalit√©s

- ‚úÖ **Installation portable** - Aucun droit admin requis
- ‚úÖ **Auto-suffisant** - Tous les fichiers inclus
- ‚úÖ **Syst√®me de mise √† jour** - Mises √† jour automatiques
- ‚úÖ **Interface moderne** - PyQt6 avec th√®me adaptatif
- ‚úÖ **Multi-OS** - Compatible Windows/Mac/Linux
- ‚úÖ **Traitement LLM** - Support OpenAI, Anthropic, OpenRouter
- ‚úÖ **Export Excel** - G√©n√©ration automatique de fichiers

## üõ†Ô∏è Utilisation

Apr√®s installation, lancez MATELAS via :
- **Windows**: Raccourci bureau ou `MATELAS.bat`
- **Mac/Linux**: Script `start_matelas.sh`

## üîÑ Mise √† Jour

L'application inclut un syst√®me de mise √† jour automatique :
1. Menu R√©glages ‚Üí V√©rifier les mises √† jour
2. Installation automatique des patches
3. Red√©marrage automatique

## üóëÔ∏è D√©sinstallation

Pour d√©sinstaller compl√®tement :
```bash
python UNINSTALL.py
```

## üìã Contenu du Package

- `app_files/` - Fichiers de l'application
- `INSTALL.py` - Script d'installation principal
- `UNINSTALL.py` - Script de d√©sinstallation
- `install_config.json` - Configuration d'installation
- `README.md` - Ce fichier

## üÜî Informations Version

- **Version**: {version}
- **Type**: Installation portable
- **Droits requis**: Aucun (utilisateur standard)
- **Taille**: ~1.2 GB
- **Python requis**: 3.8+ (inclus si n√©cessaire)

## üîß Support

En cas de probl√®me :
1. V√©rifiez que Python 3.8+ est install√©
2. V√©rifiez les permissions du r√©pertoire d'installation
3. Consultez les logs d'installation

## üéØ Avantages Installation Portable

- **Pas de pollution du syst√®me** - Installation isol√©e
- **Transportable** - Fonctionne depuis une cl√© USB
- **Suppression propre** - D√©sinstallation compl√®te
- **Multi-utilisateur** - Chaque utilisateur a sa propre installation
'''

def create_launcher_scripts(installer_dir, app_name):
    """Cr√©e les scripts de lancement pour chaque OS"""
    
    # Windows .bat
    windows_installer = f'''@echo off
echo üì¶ MATELAS Portable Installer
echo.
python INSTALL.py
pause
'''
    (installer_dir / "INSTALL.bat").write_text(windows_installer)
    
    # Shell script pour Mac/Linux
    unix_installer = f'''#!/bin/bash
echo "üì¶ MATELAS Portable Installer"
echo ""
python3 INSTALL.py
read -p "Appuyez sur Entr√©e pour fermer..."
'''
    install_sh = installer_dir / "install.sh"
    install_sh.write_text(unix_installer)
    # Rendre ex√©cutable si on est sur Unix
    try:
        install_sh.chmod(0o755)
    except:
        pass

def create_installer_zip(installer_dir, version):
    """Cr√©e l'archive ZIP finale"""
    zip_path = f"MATELAS_Portable_v{version}.zip"
    
    print(f"üì¶ Cr√©ation archive finale: {zip_path}")
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file_path in installer_dir.rglob('*'):
            if file_path.is_file():
                arcname = file_path.relative_to(installer_dir.parent)
                zipf.write(file_path, arcname)
    
    zip_size = Path(zip_path).stat().st_size / (1024*1024)
    print(f"‚úÖ Archive cr√©√©e: {zip_size:.1f} MB")

def get_folder_size(folder_path):
    """Calcule la taille d'un dossier en MB"""
    total_size = 0
    for file_path in folder_path.rglob('*'):
        if file_path.is_file():
            total_size += file_path.stat().st_size
    return total_size / (1024*1024)

def show_installation_instructions(version):
    """Affiche les instructions finales"""
    print(f"\nüéØ INSTRUCTIONS D'UTILISATION:")
    print("=" * 50)
    print(f"üì¶ Archive cr√©√©e: MATELAS_Portable_v{version}.zip")
    print()
    print("üìã D√âPLOIEMENT SUR UN POSTE:")
    print("   1. Copiez MATELAS_Portable_v{version}.zip sur le poste cible")
    print("   2. D√©compressez l'archive")
    print("   3. Ex√©cutez:")
    print("      - Windows: INSTALL.bat")
    print("      - Mac/Linux: ./install.sh")
    print("   4. Suivez les instructions √† l'√©cran")
    print()
    print("‚úÖ AVANTAGES:")
    print("   ‚Ä¢ Aucun droit administrateur requis")
    print("   ‚Ä¢ Installation dans le profil utilisateur")
    print("   ‚Ä¢ Compl√®tement portable et autonome")
    print("   ‚Ä¢ Syst√®me de mise √† jour int√©gr√©")
    print("   ‚Ä¢ D√©sinstallation propre disponible")
    print()
    print("üöÄ L'utilisateur pourra installer et utiliser MATELAS")
    print("   sans intervention IT et sans droits sp√©ciaux!")

if __name__ == "__main__":
    success = create_portable_installer()
    
    if success:
        print(f"\nüéâ INSTALLATEUR PORTABLE CR√â√â AVEC SUCC√àS!")
    else:
        print(f"\n‚ùå Erreur lors de la cr√©ation de l'installateur")
        sys.exit(1)