#!/usr/bin/env python3
"""
Interface graphique pour la g√©n√©ration automatique de packages correctifs
"""

import sys
import os
from datetime import datetime, timedelta
from typing import List, Dict

from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, 
                             QPushButton, QTextEdit, QListWidget, 
                             QListWidgetItem, QCheckBox, QGroupBox, QScrollArea,
                             QMessageBox, QProgressBar, QFrame, QGridLayout,
                             QComboBox, QSpinBox, QTabWidget, QWidget,
                             QSplitter, QTableWidget, QTableWidgetItem,
                             QHeaderView, QAbstractItemView, QButtonGroup,
                             QRadioButton)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer, QSize
from PyQt6.QtGui import QFont, QPalette, QColor, QIcon
import json

from auto_package_generator import AutoPackageGenerator, ChangeGroup, ChangeType
from package_builder import PackageBuilder


class AutoPackageThread(QThread):
    """Thread pour analyser et cr√©er les packages automatiquement"""
    progress_updated = pyqtSignal(int)
    message_updated = pyqtSignal(str)
    analysis_completed = pyqtSignal(list)  # List[ChangeGroup]
    package_created = pyqtSignal(dict, int)  # result, group_index
    finished_all = pyqtSignal()
    
    def __init__(self, hours: int, groups_to_create: List[int] = None):
        super().__init__()
        self.hours = hours
        self.groups_to_create = groups_to_create or []
        self.generator = AutoPackageGenerator()
    
    def run(self):
        try:
            # Phase 1: Analyse
            self.progress_updated.emit(10)
            self.message_updated.emit("üîç Analyse des modifications...")
            
            suggested_groups = self.generator.suggest_packages(since_hours=self.hours)
            
            self.progress_updated.emit(30)
            self.analysis_completed.emit(suggested_groups)
            
            # Phase 2: Cr√©ation des packages s√©lectionn√©s
            if self.groups_to_create and suggested_groups:
                total_packages = len(self.groups_to_create)
                
                for i, group_index in enumerate(self.groups_to_create):
                    if 0 <= group_index < len(suggested_groups):
                        group = suggested_groups[group_index]
                        
                        progress = 30 + int((i / total_packages) * 60)
                        self.progress_updated.emit(progress)
                        self.message_updated.emit(f"üì¶ Cr√©ation package {i+1}/{total_packages}...")
                        
                        result = self.generator.create_package_for_group(group)
                        self.package_created.emit(result, group_index)
                
                # Mettre √† jour l'√©tat
                self.message_updated.emit("üíæ Mise √† jour de l'√©tat...")
                self.generator.update_state_after_scan()
            
            self.progress_updated.emit(100)
            self.message_updated.emit("‚úÖ Termin√©!")
            self.finished_all.emit()
            
        except Exception as e:
            self.message_updated.emit(f"‚ùå Erreur: {str(e)}")
            self.finished_all.emit()


class AutoPackageSuggestionsDialog(QDialog):
    """Interface pour les suggestions automatiques de packages"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("ü§ñ Suggestions Automatiques de Packages Correctifs")
        self.setMinimumSize(1000, 700)
        
        self.generator = AutoPackageGenerator()
        self.suggested_groups: List[ChangeGroup] = []
        self.selected_groups: List[int] = []
        
        self.setup_ui()
        
        # Style moderne
        self.setStyleSheet("""
            QDialog {
                background-color: #f8f9fa;
            }
            QGroupBox {
                font-weight: bold;
                color: #333;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px 0 10px;
                background-color: #f8f9fa;
            }
            QPushButton {
                padding: 10px 20px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 6px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
            QPushButton:disabled {
                background-color: #6c757d;
            }
            QTableWidget {
                border: 1px solid #dee2e6;
                border-radius: 6px;
                background-color: white;
                gridline-color: #e9ecef;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e9ecef;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 10px;
                border: none;
                font-weight: bold;
                color: #495057;
            }
            QLabel {
                color: #495057;
            }
            QTextEdit {
                border: 1px solid #ced4da;
                border-radius: 6px;
                background-color: white;
                padding: 10px;
            }
        """)
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # Titre et description
        title = QLabel("ü§ñ Assistant de Cr√©ation Automatique")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title.setStyleSheet("color: #007bff; margin: 15px; padding: 10px;")
        layout.addWidget(title)
        
        desc = QLabel("Analysez vos modifications r√©centes et cr√©ez automatiquement les packages correctifs adapt√©s")
        desc.setAlignment(Qt.AlignmentFlag.AlignCenter)
        desc.setStyleSheet("color: #666; font-size: 11px; margin-bottom: 20px;")
        layout.addWidget(desc)
        
        # Configuration de l'analyse
        config_group = QGroupBox("‚öôÔ∏è Configuration de l'Analyse")
        config_layout = QHBoxLayout()
        
        config_layout.addWidget(QLabel("Analyser les modifications des derni√®res :"))
        
        self.hours_combo = QComboBox()
        self.hours_combo.addItems([
            "6 heures", "12 heures", "24 heures", "48 heures", 
            "3 jours", "1 semaine", "2 semaines"
        ])
        self.hours_combo.setCurrentText("24 heures")
        config_layout.addWidget(self.hours_combo)
        
        self.analyze_btn = QPushButton("üîç Analyser les Modifications")
        self.analyze_btn.clicked.connect(self.start_analysis)
        self.analyze_btn.setStyleSheet("background-color: #28a745; font-size: 13px;")
        config_layout.addWidget(self.analyze_btn)
        
        config_layout.addStretch()
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # R√©sultats de l'analyse
        self.results_group = QGroupBox("üìä Suggestions de Packages")
        results_layout = QVBoxLayout()
        
        # Tableau des suggestions
        self.suggestions_table = QTableWidget()
        self.suggestions_table.setColumnCount(6)
        self.suggestions_table.setHorizontalHeaderLabels([
            "S√©lection", "Type", "Description", "Fichiers", "Priorit√©", "D√©tails"
        ])
        
        # Configuration du tableau
        header = self.suggestions_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)  # S√©lection
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)  # Type
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)  # Description
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)  # Fichiers
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)  # Priorit√©
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Fixed)  # D√©tails
        
        self.suggestions_table.setColumnWidth(0, 80)
        self.suggestions_table.setColumnWidth(3, 80)
        self.suggestions_table.setColumnWidth(5, 80)
        self.suggestions_table.setMinimumHeight(300)
        
        results_layout.addWidget(self.suggestions_table)
        
        # Actions sur les suggestions
        actions_layout = QHBoxLayout()
        
        select_all_btn = QPushButton("‚òëÔ∏è Tout S√©lectionner")
        select_all_btn.clicked.connect(self.select_all_suggestions)
        select_all_btn.setStyleSheet("background-color: #17a2b8;")
        
        select_critical_btn = QPushButton("üî¥ Critiques Seulement")
        select_critical_btn.clicked.connect(self.select_critical_only)
        select_critical_btn.setStyleSheet("background-color: #dc3545;")
        
        clear_btn = QPushButton("üîÑ D√©s√©lectionner")
        clear_btn.clicked.connect(self.clear_selection)
        clear_btn.setStyleSheet("background-color: #6c757d;")
        
        actions_layout.addWidget(select_all_btn)
        actions_layout.addWidget(select_critical_btn)
        actions_layout.addWidget(clear_btn)
        actions_layout.addStretch()
        
        results_layout.addLayout(actions_layout)
        self.results_group.setLayout(results_layout)
        layout.addWidget(self.results_group)
        
        # Aper√ßu du package s√©lectionn√©
        self.preview_group = QGroupBox("üëÅÔ∏è Aper√ßu du Package")
        preview_layout = QVBoxLayout()
        
        self.preview_text = QTextEdit()
        self.preview_text.setMaximumHeight(150)
        self.preview_text.setReadOnly(True)
        preview_layout.addWidget(self.preview_text)
        
        self.preview_group.setLayout(preview_layout)
        layout.addWidget(self.preview_group)
        
        # Barre de progression
        self.progress_bar = QProgressBar()
        self.progress_bar.hide()
        layout.addWidget(self.progress_bar)
        
        # Messages de statut
        self.status_label = QLabel("Pr√™t √† analyser")
        self.status_label.setStyleSheet("color: #666; font-style: italic; padding: 5px;")
        layout.addWidget(self.status_label)
        
        # Boutons finaux
        buttons_layout = QHBoxLayout()
        
        self.create_selected_btn = QPushButton("üöÄ Cr√©er les Packages S√©lectionn√©s")
        self.create_selected_btn.clicked.connect(self.create_selected_packages)
        self.create_selected_btn.setEnabled(False)
        self.create_selected_btn.setStyleSheet("background-color: #28a745; font-size: 14px; padding: 12px 24px;")
        
        close_btn = QPushButton("Fermer")
        close_btn.clicked.connect(self.accept)
        close_btn.setStyleSheet("background-color: #6c757d; font-size: 12px;")
        
        buttons_layout.addWidget(self.create_selected_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(close_btn)
        
        layout.addLayout(buttons_layout)
        
        self.setLayout(layout)
        
        # Masquer les groupes non utilis√©s au d√©part
        self.results_group.hide()
        self.preview_group.hide()
    
    def get_hours_from_combo(self) -> int:
        """Convertir la s√©lection combo en heures"""
        text = self.hours_combo.currentText()
        
        mapping = {
            "6 heures": 6,
            "12 heures": 12,
            "24 heures": 24,
            "48 heures": 48,
            "3 jours": 72,
            "1 semaine": 168,
            "2 semaines": 336
        }
        
        return mapping.get(text, 24)
    
    def start_analysis(self):
        """D√©marrer l'analyse des modifications"""
        hours = self.get_hours_from_combo()
        
        self.progress_bar.show()
        self.progress_bar.setValue(0)
        self.analyze_btn.setEnabled(False)
        
        # Lancer l'analyse en arri√®re-plan
        self.analysis_thread = AutoPackageThread(hours)
        self.analysis_thread.progress_updated.connect(self.progress_bar.setValue)
        self.analysis_thread.message_updated.connect(self.status_label.setText)
        self.analysis_thread.analysis_completed.connect(self.display_suggestions)
        self.analysis_thread.finished_all.connect(self.analysis_finished)
        
        self.analysis_thread.start()
    
    def display_suggestions(self, groups: List[ChangeGroup]):
        """Afficher les suggestions dans le tableau"""
        self.suggested_groups = groups
        
        if not groups:
            self.status_label.setText("‚ÑπÔ∏è Aucune modification r√©cente d√©tect√©e")
            self.progress_bar.hide()
            self.analyze_btn.setEnabled(True)
            return
        
        # Afficher les groupes de r√©sultats
        self.results_group.show()
        self.preview_group.show()
        
        # Remplir le tableau
        self.suggestions_table.setRowCount(len(groups))
        
        for i, group in enumerate(groups):
            # Colonne s√©lection
            checkbox = QCheckBox()
            checkbox.stateChanged.connect(self.update_selection)
            self.suggestions_table.setCellWidget(i, 0, checkbox)
            
            # Type
            type_item = QTableWidgetItem(self.get_type_display(group.group_type))
            type_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            self.suggestions_table.setItem(i, 1, type_item)
            
            # Description
            desc_item = QTableWidgetItem(group.suggested_description)
            self.suggestions_table.setItem(i, 2, desc_item)
            
            # Nombre de fichiers
            files_item = QTableWidgetItem(str(len(group.files)))
            files_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            self.suggestions_table.setItem(i, 3, files_item)
            
            # Priorit√©
            priority_item = QTableWidgetItem(self.get_priority_display(group.priority))
            priority_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            self.suggestions_table.setItem(i, 4, priority_item)
            
            # Bouton d√©tails
            details_btn = QPushButton("üëÅÔ∏è")
            details_btn.setMaximumSize(QSize(30, 30))
            details_btn.clicked.connect(lambda checked, idx=i: self.show_group_details(idx))
            self.suggestions_table.setCellWidget(i, 5, details_btn)
        
        # S√©lectionner automatiquement les critiques
        self.select_critical_only()
    
    def get_type_display(self, change_type: ChangeType) -> str:
        """Obtenir l'affichage du type de changement"""
        displays = {
            ChangeType.INTERFACE: "üé® Interface",
            ChangeType.REFERENTIEL: "üìä R√©f√©rentiel", 
            ChangeType.BACKEND: "‚öôÔ∏è Backend",
            ChangeType.CONFIG: "üîß Config",
            ChangeType.TEMPLATE: "üìÑ Template",
            ChangeType.SCRIPT: "üõ†Ô∏è Script"
        }
        return displays.get(change_type, "üìÑ Autre")
    
    def get_priority_display(self, priority: int) -> str:
        """Obtenir l'affichage de la priorit√©"""
        if priority == 1:
            return "üî¥ Critique"
        elif priority == 2:
            return "üü° Important"
        else:
            return "üü¢ Normal"
    
    def show_group_details(self, group_index: int):
        """Afficher les d√©tails d'un groupe dans l'aper√ßu"""
        if 0 <= group_index < len(self.suggested_groups):
            group = self.suggested_groups[group_index]
            
            details = f"""üì¶ {group.suggested_description}

üè∑Ô∏è Type: {self.get_type_display(group.group_type)}
‚≠ê Priorit√©: {self.get_priority_display(group.priority)}
üìÅ Fichiers ({len(group.files)}):
"""
            
            for change in group.files:
                modified_time = datetime.fromtimestamp(change.modified_time)
                details += f"   ‚Ä¢ {change.file_path} ({modified_time.strftime('%d/%m %H:%M')})\n"
            
            details += f"""

üìã Changelog pr√©vu:
{group.suggested_changelog}

üéØ Version sugg√©r√©e: {PackageBuilder().get_next_version()}-{group.package_name_suffix}"""
            
            self.preview_text.setText(details)
    
    def select_all_suggestions(self):
        """S√©lectionner toutes les suggestions"""
        for i in range(self.suggestions_table.rowCount()):
            checkbox = self.suggestions_table.cellWidget(i, 0)
            if checkbox:
                checkbox.setChecked(True)
    
    def select_critical_only(self):
        """S√©lectionner seulement les suggestions critiques"""
        self.clear_selection()
        for i, group in enumerate(self.suggested_groups):
            if group.priority == 1:  # Critique
                checkbox = self.suggestions_table.cellWidget(i, 0)
                if checkbox:
                    checkbox.setChecked(True)
    
    def clear_selection(self):
        """D√©s√©lectionner toutes les suggestions"""
        for i in range(self.suggestions_table.rowCount()):
            checkbox = self.suggestions_table.cellWidget(i, 0)
            if checkbox:
                checkbox.setChecked(False)
    
    def update_selection(self):
        """Mettre √† jour la liste des groupes s√©lectionn√©s"""
        self.selected_groups = []
        
        for i in range(self.suggestions_table.rowCount()):
            checkbox = self.suggestions_table.cellWidget(i, 0)
            if checkbox and checkbox.isChecked():
                self.selected_groups.append(i)
        
        self.create_selected_btn.setEnabled(len(self.selected_groups) > 0)
        
        # Afficher le premier s√©lectionn√© dans l'aper√ßu
        if self.selected_groups:
            self.show_group_details(self.selected_groups[0])
    
    def create_selected_packages(self):
        """Cr√©er les packages pour les groupes s√©lectionn√©s"""
        if not self.selected_groups:
            return
        
        # Confirmation
        message = f"""Cr√©er {len(self.selected_groups)} package(s) correctif(s) ?

Packages s√©lectionn√©s:"""
        
        for i in self.selected_groups:
            if i < len(self.suggested_groups):
                group = self.suggested_groups[i]
                message += f"\n‚Ä¢ {group.suggested_description}"
        
        reply = QMessageBox.question(
            self, 
            "Confirmer la cr√©ation", 
            message,
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply != QMessageBox.StandardButton.Yes:
            return
        
        # Lancer la cr√©ation en arri√®re-plan
        self.progress_bar.show()
        self.progress_bar.setValue(0)
        self.create_selected_btn.setEnabled(False)
        
        hours = self.get_hours_from_combo()
        self.creation_thread = AutoPackageThread(hours, self.selected_groups)
        self.creation_thread.progress_updated.connect(self.progress_bar.setValue)
        self.creation_thread.message_updated.connect(self.status_label.setText)
        self.creation_thread.package_created.connect(self.on_package_created)
        self.creation_thread.finished_all.connect(self.creation_finished)
        
        self.creation_thread.start()
    
    def on_package_created(self, result: Dict, group_index: int):
        """G√©rer la cr√©ation d'un package individuel"""
        if result["success"]:
            # Marquer comme cr√©√© dans le tableau
            if group_index < self.suggestions_table.rowCount():
                # D√©sactiver la s√©lection
                checkbox = self.suggestions_table.cellWidget(group_index, 0)
                if checkbox:
                    checkbox.setChecked(False)
                    checkbox.setEnabled(False)
                
                # Ajouter un indicateur de succ√®s
                type_item = self.suggestions_table.item(group_index, 1)
                if type_item:
                    type_item.setText(type_item.text() + " ‚úÖ")
        else:
            # Marquer l'erreur
            if group_index < self.suggestions_table.rowCount():
                type_item = self.suggestions_table.item(group_index, 1)
                if type_item:
                    type_item.setText(type_item.text() + " ‚ùå")
    
    def creation_finished(self):
        """Finaliser la cr√©ation des packages"""
        self.progress_bar.hide()
        self.create_selected_btn.setEnabled(True)
        self.analyze_btn.setEnabled(True)
        
        created_count = sum(1 for i in range(self.suggestions_table.rowCount()) 
                           if "‚úÖ" in self.suggestions_table.item(i, 1).text())
        
        if created_count > 0:
            QMessageBox.information(
                self,
                "Cr√©ation termin√©e",
                f"‚úÖ {created_count} package(s) cr√©√©(s) avec succ√®s!\n\n"
                "Les packages sont disponibles dans le r√©pertoire de l'application "
                "et peuvent √™tre d√©ploy√©s via le serveur de mise √† jour."
            )
        
        # R√©initialiser les s√©lections
        self.selected_groups = []
        self.update_selection()
    
    def analysis_finished(self):
        """Finaliser l'analyse"""
        self.progress_bar.hide()
        self.analyze_btn.setEnabled(True)


def show_auto_package_dialog(parent=None):
    """Afficher l'interface de g√©n√©ration automatique avec protection par mot de passe"""
    from package_builder_gui import PasswordDialog
    
    # V√©rification du mot de passe
    password_dialog = PasswordDialog(parent)
    if password_dialog.exec() != QDialog.DialogCode.Accepted:
        return False
    
    # Si le mot de passe est correct, afficher l'interface
    dialog = AutoPackageSuggestionsDialog(parent)
    return dialog.exec() == QDialog.DialogCode.Accepted


if __name__ == "__main__":
    from PyQt6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    # Test de l'interface
    show_auto_package_dialog()
    
    sys.exit()