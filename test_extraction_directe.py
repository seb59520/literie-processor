#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour l'extraction directe avec le prompt am√©lior√©
"""

import sys
import os
import json

def get_improved_prompt():
    """R√©cup√©rer le prompt am√©lior√©"""
    try:
        with open("prompt_ameliore_extraction.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return None

def get_depyper_text():
    """R√©cup√©rer le texte DEPYPER"""
    return """--- PAGE 1 ---
SAS Literie Westelynck au Capital de 23 100 Euros - 525 RD 642 - 59190 BORRE
T√®l. 03.28.48.04.19 - Fax 03.28.41.02.74 - contact@lwest.fr
Siret 429 352 891 00015 - APE 3103Z - CEE FR50 429 352 891
Domiciliation Bancaire : Cr√©dit Agricole d'Hazebrouck FR76 1670 6050 1650 4613 2602 3411/1
Maison
Fond√©e en
1899Mr et Me DEPYPER CHRISTIAN & ANNIE
285 RUE DE WALLON CAPPEL
CAMPING DES 8 RUES
59190 WALLON CAPPEL
Num√©ro Date Code client Mode de r√®glement
CM00009568 15/07/2025 DEPYCHWAL CBDate de validit√©COMMANDE
Commercial : P. ALINE
www.literie-westelynck.fr
Remise % Montant TTC P.U. TTC Qt√© Description
0,00 0,00 0,00 0,00 COMMANDE VALID√âE PAR T√âL√âPHONE
0,00 0,00 0,00 0,00 MOBILHOME AVEC CHAMBRE 160/ 190  (158 cm entre les 2 chevets)
0,00 0,00 0,00 0,00
0,00 511,50 511,50 1,00 MATELAS 1 PI√àCE -MOUSSE RAINUR √âE 7 ZONES DIFF√âRENCI√âES M√âDIUM
(50KG/ M3) -HOUSSE MATELASS √âETENCEL LUXE 3D LAVABLE A 40¬∞  79/ 189/ 20 -
Mme Gauche
Dont Eco -Part. M obilier (TTC) : 5,50‚Ç¨ sur P.U : 506,00‚Ç¨
0,00 511,50 511,50 1,00 MATELAS 1 PI√àCE -MOUSSE RAINUR √âE 7 ZONES DIFF√âRENCI√âES FERME
(55KG/ M3) -HOUSSE MATELASS √âETENCEL LUXE 3D LAVABLE A 40¬∞  79/ 189/ 20 -Mr
Droite
Dont Eco -Part. M obilier (TTC) : 5,50‚Ç¨ sur P.U : 506,00‚Ç¨
0,00 0,00 0,00 0,00
0,00 0,00 0,00 1,00 LIVRAISON ET INSTALLATION OFFERTES AU CAMPING DES 8 RUES A WALLON
CAPPEL
0,00 0,00 0,00 0,00
0,00 0,00 0,00 1,00 PRIX NETS TTC 2023 + ECOTAXES
ACOMPTE DE 343 ‚Ç¨ EN CB A LA COMMANDE ET SOLDE DE 680 ‚Ç¨ A LA LIVRAISON
0,00 0,00 0,00 0,00 D√âLAI : Fin ao√ªt
Taux Base HT Montant TVA
168,66 843,34 20,00
Port HT
Total TTC
Acomptes
Net √† payer0,00
1 023,00
343,00
680,00 ‚Ç¨"""

def get_expected_depyper_data():
    """R√©cup√©rer les donn√©es attendues pour DEPYPER"""
    return {
        "societe": {
            "nom": "SAS Literie Westelynck",
            "capital": "23 100 Euros",
            "adresse": "525 RD 642 - 59190 BORRE",
            "telephone": "03.28.48.04.19",
            "email": "contact@lwest.fr",
            "siret": "429 352 891 00015",
            "APE": "3103Z",
            "CEE": "FR50 429 352 891",
            "banque": "Cr√©dit Agricole d'Hazebrouck",
            "IBAN": "FR76 1670 6050 1650 4613 2602 3411/1"
        },
        "client": {
            "nom": "Mr et Me DEPYPER CHRISTIAN & ANNIE",
            "adresse": "285 RUE DE WALLON CAPPEL, CAMPING DES 8 RUES, 59190 WALLON CAPPEL",
            "code_client": "DEPYCHWAL"
        },
        "commande": {
            "numero": "CM00009568",
            "date": "15/07/2025",
            "date_validite": "",
            "commercial": "P. ALINE",
            "origine": "COMMANDE"
        },
        "mode_mise_a_disposition": {
            "emporte_client_C57": "",
            "fourgon_C58": "",
            "transporteur_C59": ""
        },
        "articles": [
            {
                "type": "matelas",
                "description": "MATELAS 1 PI√àCE -MOUSSE RAINUR √âE 7 ZONES DIFF√âRENCI√âES M√âDIUM (50KG/ M3) -HOUSSE MATELASS √âETENCEL LUXE 3D LAVABLE A 40¬∞  79/ 189/ 20",
                "titre_cote": "Mme Gauche",
                "information": "",
                "quantite": 1,
                "dimensions": "79x189x20",
                "noyau": "MOUSSE RAINUR √âE 7 ZONES",
                "fermete": "M√âDIUM",
                "housse": "MATELASS √âE",
                "matiere_housse": "TENCEL LUXE 3D",
                "autres_caracteristiques": {
                    "lavable": "40¬∞",
                    "ecotaxe": "5,50‚Ç¨"
                }
            },
            {
                "type": "matelas",
                "description": "MATELAS 1 PI√àCE -MOUSSE RAINUR √âE 7 ZONES DIFF√âRENCI√âES FERME (55KG/ M3) -HOUSSE MATELASS √âETENCEL LUXE 3D LAVABLE A 40¬∞  79/ 189/ 20",
                "titre_cote": "Mr Droite",
                "information": "",
                "quantite": 1,
                "dimensions": "79x189x20",
                "noyau": "MOUSSE RAINUR √âE 7 ZONES",
                "fermete": "FERME",
                "housse": "MATELASS √âE",
                "matiere_housse": "TENCEL LUXE 3D",
                "autres_caracteristiques": {
                    "lavable": "40¬∞",
                    "ecotaxe": "5,50‚Ç¨"
                }
            }
        ],
        "paiement": {
            "conditions": "ACOMPTE DE 343 ‚Ç¨ EN CB A LA COMMANDE ET SOLDE DE 680 ‚Ç¨ A LA LIVRAISON",
            "port_ht": 0.00,
            "base_ht": 843.34,
            "taux_tva": 20.00,
            "total_ttc": 1023.00,
            "acompte": 343.00,
            "net_a_payer": 680.00
        }
    }

def analyze_extraction_result(extracted_json, expected_data):
    """Analyser le r√©sultat de l'extraction"""
    print("üîç Analyse du r√©sultat d'extraction")
    print("=" * 50)
    
    errors = []
    successes = []
    
    # V√©rifier les donn√©es client
    if "client" in extracted_json:
        client = extracted_json["client"]
        expected_client = expected_data["client"]
        
        # V√©rifier le nom
        if client.get("nom") == expected_client["nom"]:
            successes.append(f"‚úÖ Nom client correct: {client.get('nom')}")
        else:
            errors.append(f"‚ùå Nom client incorrect: '{client.get('nom')}' au lieu de '{expected_client['nom']}'")
        
        # V√©rifier l'adresse
        if client.get("adresse") == expected_client["adresse"]:
            successes.append(f"‚úÖ Adresse client correcte: {client.get('adresse')}")
        else:
            errors.append(f"‚ùå Adresse client incorrecte: '{client.get('adresse')}' au lieu de '{expected_client['adresse']}'")
        
        # V√©rifier le code client
        if client.get("code_client") == expected_client["code_client"]:
            successes.append(f"‚úÖ Code client correct: {client.get('code_client')}")
        else:
            errors.append(f"‚ùå Code client incorrect: '{client.get('code_client')}' au lieu de '{expected_client['code_client']}'")
    
    # V√©rifier les donn√©es de commande
    if "commande" in extracted_json:
        commande = extracted_json["commande"]
        expected_commande = expected_data["commande"]
        
        # V√©rifier le num√©ro de commande
        if commande.get("numero") == expected_commande["numero"]:
            successes.append(f"‚úÖ Num√©ro commande correct: {commande.get('numero')}")
        else:
            errors.append(f"‚ùå Num√©ro commande incorrect: '{commande.get('numero')}' au lieu de '{expected_commande['numero']}'")
        
        # V√©rifier la date
        if commande.get("date") == expected_commande["date"]:
            successes.append(f"‚úÖ Date commande correcte: {commande.get('date')}")
        else:
            errors.append(f"‚ùå Date commande incorrecte: '{commande.get('date')}' au lieu de '{expected_commande['date']}'")
        
        # V√©rifier le commercial
        if commande.get("commercial") == expected_commande["commercial"]:
            successes.append(f"‚úÖ Commercial correct: {commande.get('commercial')}")
        else:
            errors.append(f"‚ùå Commercial incorrect: '{commande.get('commercial')}' au lieu de '{expected_commande['commercial']}'")
    
    # V√©rifier les paiements
    if "paiement" in extracted_json:
        paiement = extracted_json["paiement"]
        expected_paiement = expected_data["paiement"]
        
        # V√©rifier le total TTC
        if paiement.get("total_ttc") == expected_paiement["total_ttc"]:
            successes.append(f"‚úÖ Total TTC correct: {paiement.get('total_ttc')}")
        else:
            errors.append(f"‚ùå Total TTC incorrect: {paiement.get('total_ttc')} au lieu de {expected_paiement['total_ttc']}")
        
        # V√©rifier l'acompte
        if paiement.get("acompte") == expected_paiement["acompte"]:
            successes.append(f"‚úÖ Acompte correct: {paiement.get('acompte')}")
        else:
            errors.append(f"‚ùå Acompte incorrect: {paiement.get('acompte')} au lieu de {expected_paiement['acompte']}")
    
    # Afficher les r√©sultats
    print(f"\nüìä R√©sultats de l'analyse:")
    print(f"‚úÖ Succ√®s: {len(successes)}")
    print(f"‚ùå Erreurs: {len(errors)}")
    
    if successes:
        print(f"\n‚úÖ Succ√®s:")
        for success in successes:
            print(f"  {success}")
    
    if errors:
        print(f"\n‚ùå Erreurs:")
        for error in errors:
            print(f"  {error}")
    
    return len(errors) == 0

def main():
    """Fonction principale"""
    print("üîç Test d'extraction directe avec le prompt am√©lior√©")
    print("=" * 60)
    
    try:
        # R√©cup√©rer le prompt am√©lior√©
        improved_prompt = get_improved_prompt()
        if not improved_prompt:
            print("‚ùå Prompt am√©lior√© non trouv√©")
            return False
        
        print("‚úÖ Prompt am√©lior√© charg√©")
        
        # R√©cup√©rer le texte DEPYPER
        depyper_text = get_depyper_text()
        print(f"‚úÖ Texte DEPYPER charg√© ({len(depyper_text)} caract√®res)")
        
        # R√©cup√©rer les donn√©es attendues
        expected_data = get_expected_depyper_data()
        print("‚úÖ Donn√©es attendues d√©finies")
        
        # Pr√©parer le prompt avec le texte
        final_prompt = improved_prompt.replace("{text}", depyper_text)
        
        print(f"\nüìù Instructions pour le test:")
        print("-" * 40)
        print("1. Copiez le prompt final ci-dessous")
        print("2. Testez avec votre LLM pr√©f√©r√©")
        print("3. Comparez le r√©sultat avec les donn√©es attendues")
        print("4. V√©rifiez que les donn√©es extraites sont correctes")
        
        print(f"\nüéØ Donn√©es attendues pour DEPYPER:")
        print("-" * 40)
        print(f"üë§ Client: {expected_data['client']['nom']}")
        print(f"üìç Adresse: {expected_data['client']['adresse']}")
        print(f"üî¢ Code: {expected_data['client']['code_client']}")
        print(f"üìã Commande: {expected_data['commande']['numero']}")
        print(f"üìÖ Date: {expected_data['commande']['date']}")
        print(f"üë®‚Äçüíº Commercial: {expected_data['commande']['commercial']}")
        print(f"üí∞ Total TTC: {expected_data['paiement']['total_ttc']}‚Ç¨")
        print(f"üí≥ Acompte: {expected_data['paiement']['acompte']}‚Ç¨")
        
        print(f"\nüìã Prompt final √† tester:")
        print("=" * 60)
        print(final_prompt)
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 