#!/usr/bin/env python3
"""
D√©monstration du syst√®me d'alerte de mise √† jour
Modifie temporairement la version pour d√©clencher l'alerte
"""

from pathlib import Path
import shutil
from datetime import datetime

def create_demo_version():
    """Cr√©er une version de d√©monstration avec version ant√©rieure"""
    print("üé≠ D√âMONSTRATION DU SYST√àME D'ALERTE")
    print("=" * 40)
    
    # Sauvegarder le fichier version.py original
    original_version = Path("version.py")
    backup_version = Path("version_backup.py")
    
    print("üíæ Sauvegarde de version.py...")
    shutil.copy2(original_version, backup_version)
    
    # Cr√©er une version de d√©monstration avec version ant√©rieure
    demo_version_content = '''#!/usr/bin/env python3
"""
Fichier de version centralis√© pour l'application Matelas Processor - VERSION DEMO
"""

# Version principale de l'application (VERSION ANT√âRIEURE POUR DEMO)
VERSION = "3.8.0"

# Informations de build
BUILD_DATE = "2025-09-01"
BUILD_NUMBER = "20250901_demo"

# Informations compl√®tes
VERSION_INFO = {
    "version": VERSION,
    "build_date": BUILD_DATE,
    "build_number": BUILD_NUMBER,
    "full_version": f"{VERSION} (Build {BUILD_NUMBER})"
}

def get_version():
    """Retourne la version de l'application"""
    return VERSION

def get_full_version():
    """Retourne la version compl√®te avec build"""
    return VERSION_INFO["full_version"]

def get_version_info():
    """Retourne toutes les informations de version"""
    return VERSION_INFO.copy()

def get_changelog():
    """Retourne le changelog de l'application"""
    return """
# Changelog - Matelas Processor (VERSION DEMO)

## Version 3.8.0 (2025-09-01) - VERSION DE D√âMONSTRATION

### ‚ö†Ô∏è ATTENTION
Cette version est ant√©rieure √† la version 3.11.0 disponible sur le serveur.
L'indicateur de mise √† jour dans la barre de statut devrait afficher une alerte rouge.

### üéØ Test du syst√®me d'alerte
- Version locale: 3.8.0
- Version serveur: 3.11.0  
- R√©sultat attendu: Alerte rouge "Mise √† jour: 3.8.0 ‚Üí 3.11.0"
"""

if __name__ == "__main__":
    print(f"Matelas Processor - Version DEMO {get_full_version()}")
    print(f"Build date: {BUILD_DATE}")
    print(f"Build number: {BUILD_NUMBER}")
'''
    
    print("‚úèÔ∏è Cr√©ation de la version de d√©monstration...")
    with open(original_version, 'w', encoding='utf-8') as f:
        f.write(demo_version_content)
    
    print(f"üéØ Version modifi√©e: 3.8.0 (ant√©rieure √† 3.11.0)")
    print(f"üìã Fichier sauvegard√©: {backup_version}")
    
    return backup_version

def restore_original_version(backup_file):
    """Restaurer la version originale"""
    print("\\nüîÑ Restauration de la version originale...")
    
    original_version = Path("version.py")
    
    if backup_file.exists():
        shutil.copy2(backup_file, original_version)
        backup_file.unlink()  # Supprimer le backup
        print("‚úÖ Version originale restaur√©e")
        return True
    else:
        print("‚ùå Fichier de sauvegarde non trouv√©")
        return False

def show_demo_instructions():
    """Afficher les instructions de d√©monstration"""
    print("\\nüìã INSTRUCTIONS DE D√âMONSTRATION")
    print("=" * 40)
    
    print("\\nüéØ Que va-t-il se passer:")
    print("1. L'application d√©marrera avec la version 3.8.0")
    print("2. Apr√®s 2 secondes, elle v√©rifiera les mises √† jour")
    print("3. Elle d√©tectera que la version 3.11.0 est disponible")
    print("4. L'indicateur passera au ROUGE avec le texte:")
    print("   'Mise √† jour: 3.8.0 ‚Üí 3.11.0'")
    
    print("\\nüñ±Ô∏è Interactions possibles:")
    print("‚Ä¢ Cliquez sur l'indicateur rouge pour ouvrir le dialog d'installation")
    print("‚Ä¢ Le tooltip affichera: 'Nouvelle version 3.11.0 disponible ! Cliquez pour installer'")
    
    print("\\n‚ö†Ô∏è IMPORTANT:")
    print("‚Ä¢ Cette d√©monstration utilise une version temporaire")
    print("‚Ä¢ Apr√®s la d√©monstration, restaurez la version originale")
    print("‚Ä¢ Ou utilisez le script de restauration fourni")

if __name__ == "__main__":
    try:
        # Cr√©er la version de d√©monstration
        backup_file = create_demo_version()
        
        show_demo_instructions()
        
        print("\\nüöÄ LANCEMENT DE LA D√âMONSTRATION")
        print("=" * 40)
        print("D√©marrez maintenant l'application avec:")
        print("python3 app_gui.py")
        print()
        print("Observez la barre de statut en bas √† droite!")
        print("L'indicateur devrait passer au rouge apr√®s quelques secondes.")
        print()
        
        input("Appuyez sur Entr√©e apr√®s avoir test√© l'application...")
        
        # Restaurer automatiquement
        restore_original_version(backup_file)
        
        print("\\nüéâ D√âMONSTRATION TERMIN√âE!")
        print("Version originale restaur√©e automatiquement.")
        
    except KeyboardInterrupt:
        print("\\n\\n‚ö†Ô∏è D√©monstration interrompue")
        print("N'oubliez pas de restaurer la version originale!")
        
        if 'backup_file' in locals() and backup_file.exists():
            restore_original_version(backup_file)
            print("‚úÖ Version originale restaur√©e")
    
    except Exception as e:
        print(f"\\n‚ùå Erreur: {e}")
        
        # Tentative de restauration en cas d'erreur
        backup_file = Path("version_backup.py")
        if backup_file.exists():
            restore_original_version(backup_file)
            print("‚úÖ Version originale restaur√©e apr√®s erreur")