#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Application de test LLM pour MatelasApp
Permet de tester les prompts, providers et mod√®les LLM
"""

import sys
import os
import json
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional

# Ajouter le r√©pertoire backend au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

try:
    from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                                QWidget, QTextEdit, QPushButton, QLabel, QComboBox, 
                                QLineEdit, QGroupBox, QSplitter, QTabWidget, QTableWidget,
                                QTableWidgetItem, QMessageBox, QFileDialog, QProgressBar,
                                QCheckBox, QSpinBox, QDoubleSpinBox, QTextBrowser, QDialog)
    from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
    from PyQt6.QtGui import QFont, QIcon, QPixmap
except ImportError:
    print("PyQt6 non trouv√©, tentative avec PyQt5...")
    try:
        from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                                    QWidget, QTextEdit, QPushButton, QLabel, QComboBox, 
                                    QLineEdit, QGroupBox, QSplitter, QTabWidget, QTableWidget,
                                    QTableWidgetItem, QMessageBox, QFileDialog, QProgressBar,
                                    QCheckBox, QSpinBox, QDoubleSpinBox, QTextBrowser, QDialog)
        from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
        from PyQt5.QtGui import QFont, QIcon, QPixmap
    except ImportError:
        print("Erreur: PyQt5 ou PyQt6 requis pour l'interface graphique")
        sys.exit(1)

# Imports backend
from config import config
from backend.llm_provider import llm_manager

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OllamaDownloadThread(QThread):
    """Thread pour t√©l√©charger des mod√®les Ollama"""
    progress_update = pyqtSignal(str)
    download_completed = pyqtSignal(str)
    download_error = pyqtSignal(str)
    
    def __init__(self, model_name):
        super().__init__()
        self.model_name = model_name
        
    def run(self):
        try:
            import subprocess
            import sys
            
            self.progress_update.emit(f"D√©but du t√©l√©chargement de {self.model_name}...")
            
            # Commande pour t√©l√©charger le mod√®le
            cmd = ["ollama", "pull", self.model_name]
            
            # Lancer le processus
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # Lire la sortie en temps r√©el
            for line in process.stdout:
                if line.strip():
                    self.progress_update.emit(f"Ollama: {line.strip()}")
            
            # Attendre la fin du processus
            return_code = process.wait()
            
            if return_code == 0:
                self.download_completed.emit(self.model_name)
            else:
                self.download_error.emit(f"Erreur lors du t√©l√©chargement (code: {return_code})")
                
        except FileNotFoundError:
            self.download_error.emit("Ollama n'est pas install√© ou n'est pas dans le PATH")
        except Exception as e:
            self.download_error.emit(f"Erreur: {str(e)}")

class LLMTestWorker(QThread):
    """Thread de travail pour les appels LLM asynchrones"""
    result_ready = pyqtSignal(dict)
    progress_update = pyqtSignal(str)
    
    def __init__(self, prompt: str, provider: str, api_key: str, model: str, 
                 temperature: float, max_tokens: int):
        super().__init__()
        self.prompt = prompt
        self.provider = provider
        self.api_key = api_key
        self.model = model
        self.temperature = temperature
        self.max_tokens = max_tokens
        
    def run(self):
        try:
            self.progress_update.emit("Configuration du provider...")
            
            # Configuration du provider
            if self.provider == "ollama":
                api_key = None
            else:
                api_key = self.api_key
                
            llm_manager.set_provider(self.provider, api_key)
            
            self.progress_update.emit("Appel au LLM...")
            
            # Appel au LLM
            result = llm_manager.call_llm(
                self.prompt, 
                temperature=self.temperature, 
                max_tokens=self.max_tokens
            )
            
            self.progress_update.emit("Traitement termin√©")
            self.result_ready.emit(result)
            
        except Exception as e:
            self.result_ready.emit({
                "success": False,
                "error": str(e),
                "content": f"Erreur: {str(e)}"
            })

class LLMTestApp(QMainWindow):
    """Application principale de test LLM"""
    
    def __init__(self):
        super().__init__()
        self.current_prompt = self.get_current_prompt()
        self.prompt_history = []
        self.test_results = []
        self.init_ui()
        self.load_config()
        
    def init_ui(self):
        """Initialisation de l'interface utilisateur"""
        self.setWindowTitle("Test LLM - MatelasApp")
        self.setGeometry(100, 100, 1400, 900)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QHBoxLayout(central_widget)
        
        # Splitter principal
        splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(splitter)
        
        # Panneau gauche (Configuration et Prompt)
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)
        
        # Panneau droit (R√©sultats et Tests)
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)
        
        # Proportions du splitter
        splitter.setSizes([600, 800])
        
        # Barre de statut
        self.statusBar().showMessage("Pr√™t")
        
    def create_left_panel(self):
        """Cr√©ation du panneau gauche"""
        left_widget = QWidget()
        layout = QVBoxLayout(left_widget)
        
        # Configuration des providers
        provider_group = QGroupBox("Configuration Provider")
        provider_layout = QVBoxLayout(provider_group)
        
        # S√©lection du provider
        provider_row = QHBoxLayout()
        provider_row.addWidget(QLabel("Provider:"))
        self.provider_combo = QComboBox()
        self.provider_combo.addItems(["ollama", "openrouter", "openai", "anthropic"])
        self.provider_combo.currentTextChanged.connect(self.on_provider_changed)
        provider_row.addWidget(self.provider_combo)
        provider_layout.addLayout(provider_row)
        
        # Cl√© API
        api_row = QHBoxLayout()
        api_row.addWidget(QLabel("Cl√© API:"))
        self.api_key_edit = QLineEdit()
        self.api_key_edit.setEchoMode(QLineEdit.EchoMode.Password)
        api_row.addWidget(self.api_key_edit)
        
        # Bouton de synchronisation des cl√©s API
        self.sync_api_btn = QPushButton("üîÑ")
        self.sync_api_btn.setToolTip("Synchroniser la cl√© API depuis la configuration centrale")
        self.sync_api_btn.clicked.connect(self.sync_api_key)
        self.sync_api_btn.setFixedSize(30, 25)
        api_row.addWidget(self.sync_api_btn)
        
        provider_layout.addLayout(api_row)
        
        # Mod√®le
        model_row = QHBoxLayout()
        model_row.addWidget(QLabel("Mod√®le:"))
        self.model_combo = QComboBox()
        self.model_combo.addItems(["mistral:latest", "gpt-4-turbo", "gpt-3.5-turbo", "claude-3-sonnet"])
        model_row.addWidget(self.model_combo)
        
        # Boutons pour g√©rer les mod√®les Ollama
        ollama_buttons = QHBoxLayout()
        
        self.add_ollama_btn = QPushButton("‚ûï")
        self.add_ollama_btn.setToolTip("Ajouter un mod√®le Ollama")
        self.add_ollama_btn.clicked.connect(self.add_ollama_model)
        self.add_ollama_btn.setFixedSize(30, 25)
        self.add_ollama_btn.setVisible(False)  # Visible seulement pour Ollama
        ollama_buttons.addWidget(self.add_ollama_btn)
        
        self.refresh_ollama_btn = QPushButton("üîÑ")
        self.refresh_ollama_btn.setToolTip("Rafra√Æchir la liste des mod√®les Ollama")
        self.refresh_ollama_btn.clicked.connect(self.refresh_ollama_models)
        self.refresh_ollama_btn.setFixedSize(30, 25)
        self.refresh_ollama_btn.setVisible(False)  # Visible seulement pour Ollama
        ollama_buttons.addWidget(self.refresh_ollama_btn)
        
        model_row.addLayout(ollama_buttons)
        
        provider_layout.addLayout(model_row)
        
        # Param√®tres avec explications
        params_group = QGroupBox("Param√®tres LLM")
        params_layout = QVBoxLayout(params_group)
        
        # Temp√©rature avec explication
        temp_row = QHBoxLayout()
        temp_row.addWidget(QLabel("Temp√©rature:"))
        self.temperature_spin = QDoubleSpinBox()
        self.temperature_spin.setRange(0.0, 2.0)
        self.temperature_spin.setValue(0.1)
        self.temperature_spin.setSingleStep(0.1)
        self.temperature_spin.valueChanged.connect(self.on_temperature_changed)
        temp_row.addWidget(self.temperature_spin)
        
        # Label d'explication de la temp√©rature
        self.temp_explanation = QLabel("D√©termine la cr√©ativit√© (0.0 = d√©terministe, 2.0 = tr√®s cr√©atif)")
        self.temp_explanation.setStyleSheet("color: #666; font-size: 10px; font-style: italic;")
        temp_row.addWidget(self.temp_explanation)
        
        params_layout.addLayout(temp_row)
        
        # Max Tokens
        tokens_row = QHBoxLayout()
        tokens_row.addWidget(QLabel("Max Tokens:"))
        self.max_tokens_spin = QSpinBox()
        self.max_tokens_spin.setRange(100, 4000)
        self.max_tokens_spin.setValue(2000)
        self.max_tokens_spin.setSingleStep(100)
        tokens_row.addWidget(self.max_tokens_spin)
        
        # Label d'explication des tokens
        tokens_explanation = QLabel("Nombre maximum de tokens dans la r√©ponse")
        tokens_explanation.setStyleSheet("color: #666; font-size: 10px; font-style: italic;")
        tokens_row.addWidget(tokens_explanation)
        
        params_layout.addLayout(tokens_row)
        
        provider_layout.addWidget(params_group)
        
        layout.addWidget(provider_group)
        
        # Gestion du prompt
        prompt_group = QGroupBox("Prompt de Test")
        prompt_layout = QVBoxLayout(prompt_group)
        
        # Boutons de gestion du prompt
        prompt_buttons = QHBoxLayout()
        
        self.restore_prompt_btn = QPushButton("Restaurer Prompt Actuel")
        self.restore_prompt_btn.clicked.connect(self.restore_current_prompt)
        prompt_buttons.addWidget(self.restore_prompt_btn)
        
        self.save_prompt_btn = QPushButton("Sauvegarder Prompt")
        self.save_prompt_btn.clicked.connect(self.save_prompt)
        prompt_buttons.addWidget(self.save_prompt_btn)
        
        self.load_prompt_btn = QPushButton("Charger Prompt")
        self.load_prompt_btn.clicked.connect(self.load_prompt)
        prompt_buttons.addWidget(self.load_prompt_btn)
        
        self.load_model_btn = QPushButton("üìã Mod√®le R√©f√©rence")
        self.load_model_btn.setToolTip("Charger le mod√®le d'extraction de r√©f√©rence")
        self.load_model_btn.clicked.connect(self.load_reference_model)
        prompt_buttons.addWidget(self.load_model_btn)
        
        prompt_layout.addLayout(prompt_buttons)
        
        # √âditeur de prompt
        self.prompt_edit = QTextEdit()
        self.prompt_edit.setFont(QFont("Courier", 10))
        self.prompt_edit.setPlaceholderText("Entrez votre prompt de test ici...")
        prompt_layout.addWidget(self.prompt_edit)
        
        layout.addWidget(prompt_group)
        
        # Texte de test
        test_text_group = QGroupBox("Texte de Test")
        test_text_layout = QVBoxLayout(test_text_group)
        
        # Boutons pour le texte de test
        text_buttons = QHBoxLayout()
        
        self.load_pdf_btn = QPushButton("üìÑ Charger PDF")
        self.load_pdf_btn.setToolTip("Charger et extraire le texte d'un fichier PDF")
        self.load_pdf_btn.clicked.connect(self.load_pdf_text)
        text_buttons.addWidget(self.load_pdf_btn)
        
        self.load_text_btn = QPushButton("üìù Charger Texte")
        self.load_text_btn.setToolTip("Charger un fichier texte (.txt)")
        self.load_text_btn.clicked.connect(self.load_text_file)
        text_buttons.addWidget(self.load_text_btn)
        
        self.preview_text_btn = QPushButton("üëÅÔ∏è Pr√©visualiser")
        self.preview_text_btn.setToolTip("Pr√©visualiser le texte extrait dans une fen√™tre s√©par√©e")
        self.preview_text_btn.clicked.connect(self.preview_extracted_text)
        self.preview_text_btn.setEnabled(False)  # Activ√© seulement quand il y a du texte
        text_buttons.addWidget(self.preview_text_btn)
        
        self.clear_text_btn = QPushButton("Effacer")
        self.clear_text_btn.clicked.connect(self.clear_test_text)
        text_buttons.addWidget(self.clear_text_btn)
        
        self.generate_example_btn = QPushButton("üé≤ Nouvel Exemple")
        self.generate_example_btn.setToolTip("G√©n√©rer un nouvel exemple de devis al√©atoire")
        self.generate_example_btn.clicked.connect(self.generate_new_example)
        text_buttons.addWidget(self.generate_example_btn)
        
        test_text_layout.addLayout(text_buttons)
        
        # Zone de texte de test
        self.test_text_edit = QTextEdit()
        self.test_text_edit.setPlaceholderText("Entrez le texte √† analyser ou chargez un fichier...")
        self.test_text_edit.textChanged.connect(self.on_text_changed)
        test_text_layout.addWidget(self.test_text_edit)
        
        layout.addWidget(test_text_group)
        
        # Boutons de test
        test_buttons = QHBoxLayout()
        
        self.test_btn = QPushButton("Lancer Test LLM")
        self.test_btn.setStyleSheet("QPushButton { background-color: #4CAF50; color: white; font-weight: bold; padding: 10px; }")
        self.test_btn.clicked.connect(self.run_llm_test)
        test_buttons.addWidget(self.test_btn)
        
        self.compare_btn = QPushButton("üîç Comparer avec R√©f√©rence")
        self.compare_btn.setStyleSheet("QPushButton { background-color: #2196F3; color: white; font-weight: bold; padding: 10px; }")
        self.compare_btn.clicked.connect(self.compare_with_reference)
        self.compare_btn.setVisible(False)  # Visible seulement apr√®s un test
        test_buttons.addWidget(self.compare_btn)
        
        layout.addLayout(test_buttons)
        
        # Barre de progression
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        return left_widget
        
    def create_right_panel(self):
        """Cr√©ation du panneau droit"""
        right_widget = QWidget()
        layout = QVBoxLayout(right_widget)
        
        # Onglets
        self.tab_widget = QTabWidget()
        
        # Onglet R√©sultats
        results_tab = self.create_results_tab()
        self.tab_widget.addTab(results_tab, "R√©sultats")
        
        # Onglet Historique
        history_tab = self.create_history_tab()
        self.tab_widget.addTab(history_tab, "Historique Tests")
        
        # Onglet Configuration
        config_tab = self.create_config_tab()
        self.tab_widget.addTab(config_tab, "Configuration")
        
        layout.addWidget(self.tab_widget)
        
        return right_widget
        
    def create_results_tab(self):
        """Cr√©ation de l'onglet r√©sultats"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Informations du test
        info_group = QGroupBox("Informations du Test")
        info_layout = QVBoxLayout(info_group)
        
        self.test_info_label = QLabel("Aucun test effectu√©")
        info_layout.addWidget(self.test_info_label)
        
        layout.addWidget(info_group)
        
        # R√©sultat brut
        result_group = QGroupBox("R√©sultat Brut")
        result_layout = QVBoxLayout(result_group)
        
        self.result_text = QTextBrowser()
        self.result_text.setFont(QFont("Courier", 9))
        result_layout.addWidget(self.result_text)
        
        layout.addWidget(result_group)
        
        # JSON pars√©
        json_group = QGroupBox("JSON Pars√©")
        json_layout = QVBoxLayout(json_group)
        
        self.json_text = QTextBrowser()
        self.json_text.setFont(QFont("Courier", 9))
        json_layout.addWidget(self.json_text)
        
        layout.addWidget(json_group)
        
        return widget
        
    def create_history_tab(self):
        """Cr√©ation de l'onglet historique"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Tableau des r√©sultats
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(6)
        self.history_table.setHorizontalHeaderLabels([
            "Date", "Provider", "Mod√®le", "Succ√®s", "Dur√©e", "Actions"
        ])
        layout.addWidget(self.history_table)
        
        # Boutons d'action
        buttons_layout = QHBoxLayout()
        
        self.clear_history_btn = QPushButton("Effacer Historique")
        self.clear_history_btn.clicked.connect(self.clear_history)
        buttons_layout.addWidget(self.clear_history_btn)
        
        self.export_history_btn = QPushButton("Exporter Historique")
        self.export_history_btn.clicked.connect(self.export_history)
        buttons_layout.addWidget(self.export_history_btn)
        
        layout.addLayout(buttons_layout)
        
        return widget
        
    def create_config_tab(self):
        """Cr√©ation de l'onglet configuration"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Configuration actuelle
        current_config_group = QGroupBox("Configuration Actuelle")
        current_layout = QVBoxLayout(current_config_group)
        
        self.current_config_text = QTextEdit()
        self.current_config_text.setReadOnly(True)
        current_layout.addWidget(self.current_config_text)
        
        layout.addWidget(current_config_group)
        
        # Boutons de configuration
        config_buttons = QHBoxLayout()
        
        self.refresh_config_btn = QPushButton("Actualiser Config")
        self.refresh_config_btn.clicked.connect(self.refresh_config)
        config_buttons.addWidget(self.refresh_config_btn)
        
        self.test_config_btn = QPushButton("Tester Configuration")
        self.test_config_btn.clicked.connect(self.test_configuration)
        config_buttons.addWidget(self.test_config_btn)
        
        layout.addLayout(config_buttons)
        
        return widget
        
    def load_config(self):
        """Chargement de la configuration"""
        try:
            # Charger la configuration actuelle
            current_provider = config.get_current_llm_provider()
            self.provider_combo.setCurrentText(current_provider)
            
            # Charger la cl√© API si disponible
            if current_provider != "ollama":
                api_key = config.get_llm_api_key(current_provider)
                if api_key:
                    self.api_key_edit.setText(api_key)
            
            # Restaurer le prompt actuel
            self.restore_current_prompt()
            
            # Actualiser la configuration
            self.refresh_config()
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du chargement de la configuration: {e}")
            
    def get_current_prompt(self):
        """R√©cup√©ration du prompt actuel depuis main.py"""
        try:
            with open("backend/main.py", "r", encoding="utf-8") as f:
                content = f.read()
                
            # Rechercher le prompt dans le code
            start_marker = 'prompt = f"""'
            end_marker = '"""'
            
            start_idx = content.find(start_marker)
            if start_idx != -1:
                start_idx += len(start_marker)
                end_idx = content.find(end_marker, start_idx)
                if end_idx != -1:
                    return content[start_idx:end_idx]
                    
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration du prompt: {e}")
            
        return "Prompt non trouv√©"
        
    def restore_current_prompt(self):
        """Restaurer le prompt actuel"""
        self.prompt_edit.setPlainText(self.current_prompt)
        self.statusBar().showMessage("Prompt actuel restaur√©")
        
    def save_prompt(self):
        """Sauvegarder le prompt actuel"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Sauvegarder le prompt", "", "Fichiers texte (*.txt);;Tous les fichiers (*)"
            )
            if filename:
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(self.prompt_edit.toPlainText())
                self.statusBar().showMessage(f"Prompt sauvegard√© dans {filename}")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la sauvegarde: {e}")
            
    def load_prompt(self):
        """Charger un prompt depuis un fichier"""
        try:
            filename, _ = QFileDialog.getOpenFileName(
                self, "Charger un prompt", "", "Fichiers texte (*.txt);;Tous les fichiers (*)"
            )
            if filename:
                with open(filename, "r", encoding="utf-8") as f:
                    content = f.read()
                self.prompt_edit.setPlainText(content)
                self.statusBar().showMessage(f"Prompt charg√© depuis {filename}")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du chargement: {e}")
            
    def load_pdf_text(self):
        """Charger le texte d'un PDF avec extraction am√©lior√©e"""
        try:
            filename, _ = QFileDialog.getOpenFileName(
                self, "Charger un PDF", "", "Fichiers PDF (*.pdf)"
            )
            if filename:
                self.statusBar().showMessage("Extraction du texte PDF en cours...")
                
                # Essayer d'abord avec PyMuPDF (plus rapide et fiable)
                try:
                    import fitz  # PyMuPDF
                    doc = fitz.open(filename)
                    text_parts = []
                    
                    for page_num in range(len(doc)):
                        page = doc.load_page(page_num)
                        page_text = page.get_text()
                        if page_text.strip():  # Ignorer les pages vides
                            text_parts.append(f"--- PAGE {page_num + 1} ---\n{page_text}")
                    
                    doc.close()
                    extracted_text = "\n\n".join(text_parts)
                    
                    if not extracted_text.strip():
                        raise Exception("Aucun texte extrait du PDF")
                    
                    # Nettoyer le texte extrait
                    cleaned_text = self.clean_extracted_text(extracted_text)
                    
                    # Afficher le texte dans l'√©diteur
                    self.test_text_edit.setPlainText(cleaned_text)
                    
                    # Activer le bouton de pr√©visualisation
                    self.preview_text_btn.setEnabled(True)
                    
                    # Afficher les statistiques d'extraction
                    char_count = len(cleaned_text)
                    word_count = len(cleaned_text.split())
                    page_count = len(doc)
                    
                    self.statusBar().showMessage(
                        f"PDF charg√©: {filename} | {page_count} pages | {word_count} mots | {char_count} caract√®res"
                    )
                    
                    # Afficher un message de confirmation
                    QMessageBox.information(
                        self, 
                        "PDF Charg√©", 
                        f"Texte extrait avec succ√®s !\n\n"
                        f"üìÑ Pages: {page_count}\n"
                        f"üìù Mots: {word_count}\n"
                        f"üî§ Caract√®res: {char_count}\n\n"
                        f"Le texte est maintenant pr√™t pour les tests LLM.\n"
                        f"Utilisez le bouton 'üëÅÔ∏è Pr√©visualiser' pour voir le texte extrait."
                    )
                    
                except ImportError:
                    # Fallback si PyMuPDF n'est pas install√©
                    self.extract_pdf_with_pypdf2(filename)
                except Exception as e:
                    # Si PyMuPDF √©choue, essayer avec PyPDF2
                    self.statusBar().showMessage(f"PyMuPDF √©chou√©, tentative avec PyPDF2...")
                    self.extract_pdf_with_pypdf2(filename)
                    
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du chargement du PDF: {e}")
            self.statusBar().showMessage("Erreur lors du chargement du PDF")
    
    def extract_pdf_with_pypdf2(self, filename):
        """Extraire le texte PDF avec PyPDF2 (fallback)"""
        try:
            import PyPDF2
            
            with open(filename, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                text_parts = []
                
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    page_text = page.extract_text()
                    if page_text.strip():
                        text_parts.append(f"--- PAGE {page_num + 1} ---\n{page_text}")
                
                extracted_text = "\n\n".join(text_parts)
                
                if not extracted_text.strip():
                    raise Exception("Aucun texte extrait du PDF")
                
                # Nettoyer le texte extrait
                cleaned_text = self.clean_extracted_text(extracted_text)
                
                # Afficher le texte dans l'√©diteur
                self.test_text_edit.setPlainText(cleaned_text)
                
                # Activer le bouton de pr√©visualisation
                self.preview_text_btn.setEnabled(True)
                
                # Afficher les statistiques
                char_count = len(cleaned_text)
                word_count = len(cleaned_text.split())
                page_count = len(pdf_reader.pages)
                
                self.statusBar().showMessage(
                    f"PDF charg√© (PyPDF2): {filename} | {page_count} pages | {word_count} mots | {char_count} caract√®res"
                )
                
        except ImportError:
            raise Exception("Aucune biblioth√®que PDF disponible. Installez PyMuPDF ou PyPDF2")
        except Exception as e:
            raise Exception(f"Erreur PyPDF2: {e}")
    
    def clean_extracted_text(self, text):
        """Nettoyer le texte extrait du PDF"""
        if not text:
            return text
        
        # Supprimer les caract√®res de contr√¥le ind√©sirables
        import re
        
        # Remplacer les sauts de ligne multiples par des sauts simples
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
        
        # Supprimer les espaces en d√©but et fin de ligne
        lines = text.split('\n')
        cleaned_lines = []
        
        for line in lines:
            # Nettoyer la ligne
            cleaned_line = line.strip()
            
            # Ignorer les lignes vides ou avec seulement des caract√®res sp√©ciaux
            if cleaned_line and not re.match(r'^[\s\-_=*#]+$', cleaned_line):
                cleaned_lines.append(cleaned_line)
        
        # Rejoindre les lignes
        cleaned_text = '\n'.join(cleaned_lines)
        
        # Supprimer les espaces en d√©but et fin
        cleaned_text = cleaned_text.strip()
        
        return cleaned_text
    
    def preview_extracted_text(self):
        """Pr√©visualiser le texte extrait dans une fen√™tre s√©par√©e"""
        try:
            text = self.test_text_edit.toPlainText()
            if not text.strip():
                QMessageBox.warning(self, "Aucun texte", "Aucun texte √† pr√©visualiser")
                return
            
            # Cr√©er une fen√™tre de pr√©visualisation
            preview_dialog = QDialog(self)
            preview_dialog.setWindowTitle("Pr√©visualisation du Texte Extrait")
            preview_dialog.setModal(True)
            preview_dialog.resize(800, 600)
            
            layout = QVBoxLayout(preview_dialog)
            
            # Zone de texte pour la pr√©visualisation
            preview_text = QTextEdit()
            preview_text.setPlainText(text)
            preview_text.setReadOnly(True)
            preview_text.setFont(QFont("Courier", 10))
            layout.addWidget(preview_text)
            
            # Statistiques du texte
            char_count = len(text)
            word_count = len(text.split())
            line_count = len(text.split('\n'))
            
            stats_label = QLabel(
                f"üìä Statistiques: {char_count} caract√®res | {word_count} mots | {line_count} lignes"
            )
            stats_label.setStyleSheet("color: #666; font-weight: bold; padding: 5px;")
            layout.addWidget(stats_label)
            
            # Boutons
            button_layout = QHBoxLayout()
            
            copy_btn = QPushButton("üìã Copier")
            copy_btn.clicked.connect(lambda: self.copy_text_to_clipboard(text))
            button_layout.addWidget(copy_btn)
            
            save_btn = QPushButton("üíæ Sauvegarder")
            save_btn.clicked.connect(lambda: self.save_extracted_text(text))
            button_layout.addWidget(save_btn)
            
            close_btn = QPushButton("Fermer")
            close_btn.clicked.connect(preview_dialog.accept)
            button_layout.addWidget(close_btn)
            
            layout.addLayout(button_layout)
            
            preview_dialog.exec()
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la pr√©visualisation: {e}")
    
    def copy_text_to_clipboard(self, text):
        """Copier le texte dans le presse-papiers"""
        try:
            clipboard = QApplication.clipboard()
            clipboard.setText(text)
            self.statusBar().showMessage("Texte copi√© dans le presse-papiers")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la copie: {e}")
    
    def save_extracted_text(self, text):
        """Sauvegarder le texte extrait dans un fichier"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Sauvegarder le texte extrait", "", "Fichiers texte (*.txt)"
            )
            if filename:
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(text)
                self.statusBar().showMessage(f"Texte sauvegard√©: {filename}")
                QMessageBox.information(self, "Succ√®s", f"Texte sauvegard√© dans {filename}")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la sauvegarde: {e}")
    
    def on_text_changed(self):
        """Gestionnaire de changement de texte"""
        text = self.test_text_edit.toPlainText()
        has_text = bool(text.strip())
        
        # Activer/d√©sactiver le bouton de pr√©visualisation
        self.preview_text_btn.setEnabled(has_text)
        
        # Mettre √† jour le statut
        if has_text:
            char_count = len(text)
            word_count = len(text.split())
            self.statusBar().showMessage(f"Texte pr√™t: {word_count} mots, {char_count} caract√®res")
        else:
            self.statusBar().showMessage("Pr√™t")
    
    def load_text_file(self):
        """Charger un fichier texte"""
        try:
            filename, _ = QFileDialog.getOpenFileName(
                self, "Charger un fichier texte", "", "Fichiers texte (*.txt);;Tous les fichiers (*)"
            )
            if filename:
                with open(filename, "r", encoding="utf-8") as f:
                    content = f.read()
                self.test_text_edit.setPlainText(content)
                
                # Activer le bouton de pr√©visualisation
                self.preview_text_btn.setEnabled(True)
                
                # Afficher les statistiques
                char_count = len(content)
                word_count = len(content.split())
                
                self.statusBar().showMessage(f"Fichier charg√©: {filename} | {word_count} mots | {char_count} caract√®res")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du chargement: {e}")
            
    def clear_test_text(self):
        """Effacer le texte de test"""
        self.test_text_edit.clear()
        
    def on_provider_changed(self, provider):
        """Gestion du changement de provider"""
        # Mettre √† jour les mod√®les disponibles selon le provider
        self.model_combo.clear()
        
        if provider == "ollama":
            # Charger les mod√®les Ollama disponibles
            self.load_ollama_models()
        elif provider == "openrouter":
            self.model_combo.addItems(["openai/gpt-4-turbo", "openai/gpt-3.5-turbo", "anthropic/claude-3-sonnet"])
        elif provider == "openai":
            self.model_combo.addItems(["gpt-4-turbo", "gpt-3.5-turbo"])
        elif provider == "anthropic":
            self.model_combo.addItems(["claude-3-sonnet", "claude-3-haiku"])
        
        # Synchroniser la cl√© API depuis la configuration centrale
        if provider != "ollama":
            api_key = config.get_llm_api_key(provider)
            if api_key:
                self.api_key_edit.setText(api_key)
                self.statusBar().showMessage(f"Cl√© API {provider} charg√©e depuis la configuration")
            else:
                self.api_key_edit.clear()
                self.statusBar().showMessage(f"Aucune cl√© API configur√©e pour {provider}")
        else:
            self.api_key_edit.clear()
            self.statusBar().showMessage("Ollama ne n√©cessite pas de cl√© API")
        
        # Afficher/masquer les boutons de gestion Ollama
        self.add_ollama_btn.setVisible(provider == "ollama")
        self.refresh_ollama_btn.setVisible(provider == "ollama")
    
    def load_ollama_models(self):
        """Charger les mod√®les Ollama disponibles"""
        try:
            import subprocess
            import json
            
            self.statusBar().showMessage("Chargement des mod√®les Ollama...")
            
            # Commande pour lister les mod√®les (sans --json pour compatibilit√©)
            result = subprocess.run(
                ["ollama", "list"],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                try:
                    # Parser la sortie textuelle d'ollama list
                    lines = result.stdout.strip().split('\n')
                    model_names = []
                    
                    # Ignorer la premi√®re ligne (en-t√™te)
                    for line in lines[1:]:  # Skip header line
                        if line.strip():
                            # Nettoyer la ligne et extraire le nom du mod√®le
                            # Format: NAME                                  ID              SIZE      MODIFIED
                            line = line.strip()
                            
                            # Chercher l'ID (12 caract√®res hexad√©cimaux)
                            import re
                            id_match = re.search(r'([a-f0-9]{12})', line)
                            if id_match:
                                # Prendre tout ce qui est avant l'ID
                                id_pos = id_match.start()
                                model_name = line[:id_pos].strip()
                                if model_name:
                                    model_names.append(model_name)
                    
                    if model_names:
                        # Vider la liste actuelle
                        self.model_combo.clear()
                        self.model_combo.addItems(model_names)
                        self.statusBar().showMessage(f"{len(model_names)} mod√®les Ollama charg√©s: {', '.join(model_names[:3])}{'...' if len(model_names) > 3 else ''}")
                    else:
                        # Mod√®les par d√©faut si aucun mod√®le n'est trouv√©
                        self.model_combo.clear()
                        self.model_combo.addItems(["mistral:latest", "llama2:latest", "codellama:latest"])
                        self.statusBar().showMessage("Aucun mod√®le Ollama trouv√©, mod√®les par d√©faut charg√©s")
                        
                except Exception as e:
                    # En cas d'erreur de parsing, utiliser les mod√®les par d√©faut
                    self.model_combo.clear()
                    self.model_combo.addItems(["mistral:latest", "llama2:latest", "codellama:latest"])
                    self.statusBar().showMessage(f"Erreur de parsing: {str(e)}, mod√®les par d√©faut charg√©s")
            else:
                # En cas d'erreur, utiliser les mod√®les par d√©faut
                self.model_combo.clear()
                self.model_combo.addItems(["mistral:latest", "llama2:latest", "codellama:latest"])
                self.statusBar().showMessage(f"Erreur Ollama (code {result.returncode}): {result.stderr}")
                
        except subprocess.TimeoutExpired as e:
            # Timeout sp√©cifique
            self.model_combo.clear()
            self.model_combo.addItems(["mistral:latest", "llama2:latest", "codellama:latest"])
            self.statusBar().showMessage("Timeout lors du chargement des mod√®les Ollama (60s), mod√®les par d√©faut charg√©s")
        except FileNotFoundError as e:
            # Ollama non install√©
            self.model_combo.clear()
            self.model_combo.addItems(["mistral:latest", "llama2:latest", "codellama:latest"])
            self.statusBar().showMessage("Ollama non install√© ou non trouv√© dans le PATH")
        except Exception as e:
            # Erreur g√©n√©rale
            self.model_combo.clear()
            self.model_combo.addItems(["mistral:latest", "llama2:latest", "codellama:latest"])
            self.statusBar().showMessage(f"Erreur inattendue: {str(e)}")
    
    def on_temperature_changed(self, value):
        """Mise √† jour de l'explication de la temp√©rature"""
        if value == 0.0:
            explanation = "D√©terministe - R√©ponses coh√©rentes et pr√©visibles"
        elif value <= 0.3:
            explanation = "Faible cr√©ativit√© - R√©ponses structur√©es et pr√©cises"
        elif value <= 0.7:
            explanation = "Cr√©ativit√© mod√©r√©e - √âquilibr√© entre pr√©cision et cr√©ativit√©"
        elif value <= 1.0:
            explanation = "Cr√©ativit√© √©lev√©e - R√©ponses vari√©es et originales"
        else:
            explanation = "Tr√®s cr√©atif - R√©ponses tr√®s vari√©es et impr√©visibles"
        
        self.temp_explanation.setText(f"Temp√©rature {value}: {explanation}")
    
    def add_ollama_model(self):
        """Ajouter un mod√®le Ollama"""
        try:
            from PyQt6.QtWidgets import QInputDialog
            
            model_name, ok = QInputDialog.getText(
                self, 
                "Ajouter un mod√®le Ollama", 
                "Nom du mod√®le (ex: llama2:latest, codellama:7b):"
            )
            
            if ok and model_name.strip():
                model_name = model_name.strip()
                
                # V√©rifier si le mod√®le existe d√©j√†
                existing_models = [self.model_combo.itemText(i) for i in range(self.model_combo.count())]
                if model_name in existing_models:
                    QMessageBox.information(self, "Info", f"Le mod√®le '{model_name}' existe d√©j√†")
                    return
                
                # Ajouter le mod√®le √† la liste
                self.model_combo.addItem(model_name)
                self.model_combo.setCurrentText(model_name)
                
                # Demander si l'utilisateur veut t√©l√©charger le mod√®le
                reply = QMessageBox.question(
                    self, 
                    "T√©l√©charger le mod√®le", 
                    f"Voulez-vous t√©l√©charger le mod√®le '{model_name}' maintenant ?\n\n"
                    "Cela peut prendre plusieurs minutes selon la taille du mod√®le.",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                
                if reply == QMessageBox.StandardButton.Yes:
                    self.download_ollama_model(model_name)
                    
                self.statusBar().showMessage(f"Mod√®le '{model_name}' ajout√©")
                
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de l'ajout du mod√®le: {e}")
    
    def load_reference_model(self):
        """Charger le mod√®le d'extraction de r√©f√©rence"""
        try:
            # Charger le mod√®le de r√©f√©rence
            with open("modele_extraction_reference.json", "r", encoding="utf-8") as f:
                reference_model = json.load(f)
            
            # Cr√©er un prompt bas√© sur le mod√®le de r√©f√©rence
            prompt_template = self.create_prompt_from_reference(reference_model)
            
            # Charger le prompt dans l'√©diteur
            self.prompt_edit.setPlainText(prompt_template)
            
            # Cr√©er un exemple de texte de test
            example_text = self.create_example_text_from_reference(reference_model)
            self.test_text_edit.setPlainText(example_text)
            
            self.statusBar().showMessage("Mod√®le de r√©f√©rence charg√© avec succ√®s")
            
            # Afficher une bo√Æte de dialogue avec des informations
            QMessageBox.information(self, "Mod√®le de R√©f√©rence", 
                "Mod√®le d'extraction de r√©f√©rence charg√© !\n\n"
                "‚úÖ Prompt adapt√© au format JSON exact\n"
                "‚úÖ Exemple de texte de test g√©n√©r√©\n"
                "‚úÖ Structure compl√®te avec tous les champs\n\n"
                "Vous pouvez maintenant tester l'extraction avec ce format optimis√©.")
            
        except FileNotFoundError:
            QMessageBox.warning(self, "Erreur", 
                "Fichier modele_extraction_reference.json non trouv√©.\n"
                "Assurez-vous que le fichier existe dans le r√©pertoire.")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du chargement du mod√®le: {e}")
    
    def create_prompt_from_reference(self, reference_model):
        """Cr√©er un prompt optimis√© bas√© sur le mod√®le de r√©f√©rence"""
        prompt = f'''Tu es un assistant d'extraction sp√©cialis√© pour des devis de literie. Analyse le texte ci-dessous et g√©n√®re uniquement un JSON structur√© selon le format exact suivant.

TEXTE √Ä ANALYSER :
{{text}}

R√àGLES D'EXTRACTION STRICTES :

1. STRUCTURE JSON OBLIGATOIRE :
{{
  "societe": {{
    "nom": "nom de l'entreprise",
    "capital": "capital social",
    "adresse": "adresse compl√®te",
    "telephone": "num√©ro de t√©l√©phone",
    "email": "adresse email",
    "siret": "num√©ro SIRET",
    "APE": "code APE",
    "CEE": "num√©ro CEE",
    "banque": "nom de la banque",
    "IBAN": "num√©ro IBAN"
  }},
  "client": {{
    "nom": "nom du client",
    "adresse": "adresse du client",
    "code_client": "code client"
  }},
  "commande": {{
    "numero": "num√©ro de commande",
    "date": "date de commande",
    "date_validite": "date de validit√©",
    "commercial": "nom du commercial",
    "origine": "origine de la commande"
  }},
  "mode_mise_a_disposition": {{
    "emporte_client_C57": "texte si enl√®vement client",
    "fourgon_C58": "texte si livraison fourgon",
    "transporteur_C59": "texte si transporteur"
  }},
  "articles": [
    {{
      "type": "matelas|sommier|accessoire|t√™te de lit|pieds|remise",
      "description": "description compl√®te de l'article",
      "titre_cote": "Mr/Mme Gauche/Droit si applicable",
      "information": "en-t√™te comme '1/ CHAMBRE XYZ' si pr√©sent",
      "quantite": nombre,
      "dimensions": "format LxlxH",
      "noyau": "type de noyau pour matelas",
      "fermete": "niveau de fermet√©",
      "housse": "type de housse",
      "matiere_housse": "mat√©riau de la housse",
      "autres_caracteristiques": {{
        "caracteristique1": "valeur1",
        "caracteristique2": "valeur2"
      }}
    }}
  ],
  "paiement": {{
    "conditions": "conditions de paiement",
    "port_ht": montant_ht_port,
    "base_ht": montant_ht_total,
    "taux_tva": pourcentage_tva,
    "total_ttc": montant_ttc,
    "acompte": montant_acompte,
    "net_a_payer": montant_final
  }}
}}

2. R√àGLES SP√âCIFIQUES :
- Pour chaque article, extraire TOUS les champs disponibles
- Le champ "autres_caracteristiques" doit contenir les sp√©cificit√©s non standard
- Les remises sont des articles de type "remise" avec montant dans autres_caracteristiques
- Les dimensions doivent √™tre au format "LxlxH" (ex: "159x199x19")
- Les montants doivent √™tre des nombres (pas de texte)
- Si une information est absente : null pour les nombres, "" pour les textes

3. EXEMPLE DE R√âF√âRENCE :
{json.dumps(reference_model, indent=2, ensure_ascii=False)}

R√©ponds UNIQUEMENT avec un JSON valide selon cette structure exacte.'''
        
        return prompt
    
    def create_example_text_from_reference(self, reference_model):
        """Cr√©er un exemple de texte bas√© sur le mod√®le de r√©f√©rence"""
        # G√©n√©rer un exemple al√©atoire
        return self.generate_random_devis_example()
    
    def generate_random_devis_example(self):
        """G√©n√©rer un exemple de devis al√©atoire pour les tests"""
        import random
        from datetime import datetime, timedelta
        
        # Donn√©es al√©atoires pour varier les exemples
        clients = [
            ("Mr et Me LAGADEC HELENE", "25 RUE DE L'√âGLISE, 59670 BAVINCHOVE", "LAGAHEBAV"),
            ("Mr DUPONT JEAN", "15 AVENUE DE LA PAIX, 59000 LILLE", "DUPOJEALIL"),
            ("Me MARTIN SOPHIE", "8 RUE DU COMMERCE, 59100 ROUBAIX", "MARTSOPROU"),
            ("Mr et Me DURAND PIERRE", "42 BOULEVARD VICTOR HUGO, 59200 TOURCOING", "DURAPIEVIC"),
            ("Mr LEROY ANTOINE", "3 PLACE DE LA R√âPUBLIQUE, 59300 VALENCIENNES", "LEROANTPLA")
        ]
        
        produits = [
            ("LITERIE 160/200/59 CM JUMEAUX SUR PIEDS", [
                "SOMMIERS JUMEAUX RELAXATION MOTORIS√âE 5 PLIS PETITE T√äTI√àRE",
                "M√âTRAGE PVC SARANO CAMEL",
                "DOSSERET GALB√â COINS VIFS 160/90 BASE SOMMIERS",
                "JEU DE 4 PIEDS CYLINDRE VERNI NATUREL 20 CM + 2 PIEDS CENTRAUX + PATINS FEUTRES",
                "MATELAS JUMEAUX - MOUSSE RAINUR√âE 7 ZONES DIFF√âRENCI√âES M√âDIUM (50KG/M3)"
            ]),
            ("LITERIE 140/190/59 CM DOUBLE SUR PIEDS", [
                "SOMMIER DOUBLE RELAXATION MOTORIS√âE 5 PLIS GRANDE T√äTI√àRE",
                "M√âTRAGE PVC SARANO GRIS",
                "DOSSERET GALB√â COINS VIFS 140/90 BASE SOMMIERS",
                "JEU DE 4 PIEDS CYLINDRE VERNI NATUREL 20 CM + PATINS FEUTRES",
                "MATELAS DOUBLE - MOUSSE VISCO√âLASTIQUE 7 ZONES DIFF√âRENCI√âES FERME (60KG/M3)"
            ]),
            ("LITERIE 90/200/59 CM SIMPLE SUR PIEDS", [
                "SOMMIER SIMPLE RELAXATION MOTORIS√âE 5 PLIS PETITE T√äTI√àRE",
                "M√âTRAGE PVC SARANO BLANC",
                "DOSSERET DROIT COINS VIFS 90/90 BASE SOMMIERS",
                "JEU DE 4 PIEDS CYLINDRE VERNI NATUREL 20 CM + PATINS FEUTRES",
                "MATELAS SIMPLE - LATEX NATUREL 7 ZONES DIFF√âRENCI√âES DOUX (70KG/M3)"
            ])
        ]
        
        remises = [
            ("REMISE 50% SOLDES MOD√àLE D'EXPOSITION", -1295.00),
            ("REMISE 30% FIN DE S√âRIE", -850.00),
            ("REMISE 20% PREMI√àRE COMMANDE", -450.00),
            ("REMISE 15% CLIENT FID√àLE", -320.00),
            ("REMISE 10% PAIEMENT COMPTANT", -180.00)
        ]
        
        # S√©lection al√©atoire
        client = random.choice(clients)
        produit = random.choice(produits)
        remise = random.choice(remises)
        
        # Date al√©atoire dans les 30 derniers jours
        date_commande = datetime.now() - timedelta(days=random.randint(0, 30))
        
        # Num√©ro de commande al√©atoire
        num_commande = f"CM{random.randint(100000, 999999)}"
        
        # Montants al√©atoires
        base_ht = random.randint(1500, 3000)
        tva = base_ht * 0.20
        total_ttc = base_ht + tva
        acompte = random.randint(500, 1000)
        net_a_payer = total_ttc - acompte
        
        # G√©n√©rer le devis
        example_text = f"""DEVIS LITERIE WESTELYNCK

SAS Literie Westelynck
Capital : 23 100 Euros
525 RD 642 - 59190 BORRE
T√©l : 03.28.48.04.19
Email : contact@lwest.fr
SIRET : 429 352 891 00015
APE : 3103Z
CEE : FR50 429 352 891
Banque : Cr√©dit Agricole d'Hazebrouck
IBAN : FR76 1670 6050 1650 4613 2602 341

CLIENT :
{client[0]}
{client[1]}
Code client : {client[2]}

COMMANDE N¬∞ {num_commande}
Date : {date_commande.strftime('%d/%m/%Y')}
Commercial : P. ALINE
Origine : COMMANDE

LIVRAISON : ENL√àVEMENT PAR VOS SOINS

{produit[0]}

"""
        
        # Ajouter les produits
        for i, prod in enumerate(produit[1], 1):
            example_text += f"{i}. {prod}\n   Quantit√© : {random.randint(1, 3)}\n\n"
        
        # Ajouter la remise
        example_text += f"{len(produit[1]) + 1}. {remise[0]}\n   Montant : {remise[1]:.2f}‚Ç¨\n\n"
        
        # Ajouter la remise enl√®vement
        remise_enlevement = random.randint(20, 100)
        example_text += f"{len(produit[1]) + 2}. REMISE : 5% ENL√àVEMENT PAR VOS SOINS\n   Montant : -{remise_enlevement:.2f}‚Ç¨\n\n"
        
        # Conditions de paiement et totaux
        example_text += f"""CONDITIONS DE PAIEMENT :
ACOMPTE DE {acompte} ‚Ç¨ EN CB LA COMMANDE ET SOLDE DE {net_a_payer:.0f} ‚Ç¨ √Ä L'ENL√àVEMENT

PORT HT : 0,00‚Ç¨
BASE HT : {base_ht:.2f}‚Ç¨
TVA 20% : {tva:.2f}‚Ç¨
TOTAL TTC : {total_ttc:.2f}‚Ç¨
ACOMPTE : {acompte:.2f}‚Ç¨
NET √Ä PAYER : {net_a_payer:.2f}‚Ç¨"""
        
        return example_text
    
    def generate_new_example(self):
        """G√©n√©rer un nouvel exemple de devis"""
        try:
            # Charger le mod√®le de r√©f√©rence pour la coh√©rence
            with open("modele_extraction_reference.json", "r", encoding="utf-8") as f:
                reference_model = json.load(f)
            
            # G√©n√©rer un nouvel exemple
            new_example = self.generate_random_devis_example()
            
            # Mettre √† jour le texte de test
            self.test_text_edit.setPlainText(new_example)
            
            self.statusBar().showMessage("Nouvel exemple de devis g√©n√©r√©")
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la g√©n√©ration d'exemple: {e}")
    
    def refresh_ollama_models(self):
        """Rafra√Æchir la liste des mod√®les Ollama"""
        try:
            # Sauvegarder le mod√®le actuellement s√©lectionn√©
            current_model = self.model_combo.currentText()
            
            # Recharger les mod√®les
            self.load_ollama_models()
            
            # Restaurer le mod√®le s√©lectionn√© s'il existe encore
            if current_model:
                index = self.model_combo.findText(current_model)
                if index >= 0:
                    self.model_combo.setCurrentIndex(index)
            
            self.statusBar().showMessage("Liste des mod√®les Ollama rafra√Æchie")
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du rafra√Æchissement: {e}")
    
    def download_ollama_model(self, model_name):
        """T√©l√©charger un mod√®le Ollama"""
        try:
            import subprocess
            import sys
            
            # Cr√©er un thread pour le t√©l√©chargement
            self.download_thread = OllamaDownloadThread(model_name)
            self.download_thread.progress_update.connect(self.on_download_progress)
            self.download_thread.download_completed.connect(self.on_download_completed)
            self.download_thread.download_error.connect(self.on_download_error)
            self.download_thread.start()
            
            self.statusBar().showMessage(f"T√©l√©chargement de '{model_name}' en cours...")
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du t√©l√©chargement: {e}")
    
    def on_download_progress(self, message):
        """Mise √† jour de la progression du t√©l√©chargement"""
        self.statusBar().showMessage(message)
    
    def on_download_completed(self, model_name):
        """T√©l√©chargement termin√©"""
        QMessageBox.information(self, "Succ√®s", f"Mod√®le '{model_name}' t√©l√©charg√© avec succ√®s !")
        self.statusBar().showMessage(f"Mod√®le '{model_name}' pr√™t √† utiliser")
    
    def on_download_error(self, error):
        """Erreur de t√©l√©chargement"""
        QMessageBox.warning(self, "Erreur", f"Erreur lors du t√©l√©chargement: {error}")
        self.statusBar().showMessage("Erreur de t√©l√©chargement")
    
    def sync_api_key(self):
        """Synchroniser la cl√© API depuis la configuration centrale"""
        try:
            provider = self.provider_combo.currentText()
            if provider == "ollama":
                self.api_key_edit.clear()
                self.statusBar().showMessage("Ollama ne n√©cessite pas de cl√© API")
                return
                
            api_key = config.get_llm_api_key(provider)
            if api_key:
                self.api_key_edit.setText(api_key)
                self.statusBar().showMessage(f"Cl√© API {provider} synchronis√©e depuis la configuration centrale")
            else:
                self.api_key_edit.clear()
                self.statusBar().showMessage(f"Aucune cl√© API configur√©e pour {provider}")
                
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la synchronisation: {e}")
            
    def run_llm_test(self):
        """Lancer un test LLM"""
        try:
            # R√©cup√©ration des param√®tres
            provider = self.provider_combo.currentText()
            
            # R√©cup√©rer la cl√© API depuis la configuration centrale
            if provider == "ollama":
                api_key = None
            else:
                api_key = config.get_llm_api_key(provider)
                if not api_key:
                    # Fallback sur le champ de saisie
                    api_key = self.api_key_edit.text().strip()
            
            model = self.model_combo.currentText()
            temperature = self.temperature_spin.value()
            max_tokens = self.max_tokens_spin.value()
            
            # R√©cup√©ration du prompt et du texte de test
            prompt_template = self.prompt_edit.toPlainText()
            test_text = self.test_text_edit.toPlainText()
            
            if not prompt_template.strip():
                QMessageBox.warning(self, "Erreur", "Le prompt ne peut pas √™tre vide")
                return
                
            if not test_text.strip():
                QMessageBox.warning(self, "Erreur", "Le texte de test ne peut pas √™tre vide")
                return
                
            # V√©rification de la cl√© API
            if provider != "ollama" and not api_key:
                QMessageBox.warning(self, "Erreur", f"Cl√© API requise pour {provider}")
                return
                
            # Pr√©paration du prompt final
            prompt = prompt_template.replace("{text}", test_text)
            
            # D√©sactiver le bouton pendant le test
            self.test_btn.setEnabled(False)
            self.progress_bar.setVisible(True)
            self.progress_bar.setRange(0, 0)  # Ind√©termin√©
            
            # Lancer le test dans un thread
            self.worker = LLMTestWorker(
                prompt, provider, api_key, model, temperature, max_tokens
            )
            self.worker.result_ready.connect(self.on_test_completed)
            self.worker.progress_update.connect(self.on_progress_update)
            self.worker.start()
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du lancement du test: {e}")
            self.test_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
            
    def on_progress_update(self, message):
        """Mise √† jour de la progression"""
        self.statusBar().showMessage(message)
        
    def on_test_completed(self, result):
        """Gestion de la fin du test"""
        try:
            # R√©activer le bouton
            self.test_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
            
            # Affichage des r√©sultats
            self.display_test_results(result)
            
            # Ajout √† l'historique
            self.add_to_history(result)
            
            self.statusBar().showMessage("Test termin√©")
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du traitement des r√©sultats: {e}")
    
    def compare_with_reference(self):
        """Comparer le r√©sultat avec le mod√®le de r√©f√©rence"""
        try:
            # R√©cup√©rer le r√©sultat actuel
            current_result = self.result_text.toPlainText().strip()
            if not current_result:
                QMessageBox.warning(self, "Erreur", "Aucun r√©sultat √† comparer")
                return
            
            # Charger le mod√®le de r√©f√©rence
            with open("modele_extraction_reference.json", "r", encoding="utf-8") as f:
                reference_model = json.load(f)
            
            # Parser le r√©sultat actuel
            try:
                # Nettoyer le contenu
                cleaned_content = current_result
                if cleaned_content.startswith('```json'):
                    cleaned_content = cleaned_content[7:]
                if cleaned_content.endswith('```'):
                    cleaned_content = cleaned_content[:-3]
                
                current_json = json.loads(cleaned_content)
            except json.JSONDecodeError as e:
                QMessageBox.warning(self, "Erreur", f"R√©sultat JSON invalide: {e}")
                return
            
            # Comparer les structures
            comparison_result = self.compare_json_structures(reference_model, current_json)
            
            # Afficher le r√©sultat de comparaison
            self.show_comparison_dialog(comparison_result)
            
        except FileNotFoundError:
            QMessageBox.warning(self, "Erreur", "Fichier de r√©f√©rence non trouv√©")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la comparaison: {e}")
    
    def compare_json_structures(self, reference, current, path=""):
        """Comparer deux structures JSON"""
        comparison = {
            "valid": True,
            "missing_fields": [],
            "extra_fields": [],
            "type_mismatches": [],
            "details": []
        }
        
        if isinstance(reference, dict) and isinstance(current, dict):
            # V√©rifier les champs manquants
            for key in reference:
                full_path = f"{path}.{key}" if path else key
                if key not in current:
                    comparison["missing_fields"].append(full_path)
                    comparison["valid"] = False
                else:
                    # Comparer r√©cursivement
                    sub_comparison = self.compare_json_structures(reference[key], current[key], full_path)
                    comparison["missing_fields"].extend(sub_comparison["missing_fields"])
                    comparison["extra_fields"].extend(sub_comparison["extra_fields"])
                    comparison["type_mismatches"].extend(sub_comparison["type_mismatches"])
                    comparison["details"].extend(sub_comparison["details"])
                    if not sub_comparison["valid"]:
                        comparison["valid"] = False
            
            # V√©rifier les champs suppl√©mentaires
            for key in current:
                if key not in reference:
                    full_path = f"{path}.{key}" if path else key
                    comparison["extra_fields"].append(full_path)
        
        elif isinstance(reference, list) and isinstance(current, list):
            # Pour les listes, v√©rifier au moins la structure du premier √©l√©ment
            if reference and current:
                if isinstance(reference[0], dict) and isinstance(current[0], dict):
                    sub_comparison = self.compare_json_structures(reference[0], current[0], f"{path}[0]")
                    comparison["missing_fields"].extend(sub_comparison["missing_fields"])
                    comparison["extra_fields"].extend(sub_comparison["extra_fields"])
                    comparison["type_mismatches"].extend(sub_comparison["type_mismatches"])
                    comparison["details"].extend(sub_comparison["details"])
                    if not sub_comparison["valid"]:
                        comparison["valid"] = False
        
        elif type(reference) != type(current):
            comparison["type_mismatches"].append(f"{path}: {type(reference).__name__} vs {type(current).__name__}")
            comparison["valid"] = False
        
        return comparison
    
    def show_comparison_dialog(self, comparison):
        """Afficher le dialogue de comparaison"""
        dialog = QMessageBox()
        dialog.setWindowTitle("Comparaison avec le Mod√®le de R√©f√©rence")
        
        if comparison["valid"]:
            dialog.setIcon(QMessageBox.Icon.Information)
            dialog.setText("‚úÖ Structure JSON Valide")
            dialog.setInformativeText("Le r√©sultat respecte parfaitement la structure de r√©f√©rence !")
        else:
            dialog.setIcon(QMessageBox.Icon.Warning)
            dialog.setText("‚ö†Ô∏è Diff√©rences D√©tect√©es")
            
            details = []
            if comparison["missing_fields"]:
                details.append(f"Champs manquants : {len(comparison['missing_fields'])}")
                for field in comparison["missing_fields"][:5]:  # Limiter √† 5
                    details.append(f"  ‚Ä¢ {field}")
                if len(comparison["missing_fields"]) > 5:
                    details.append(f"  ‚Ä¢ ... et {len(comparison['missing_fields']) - 5} autres")
            
            if comparison["extra_fields"]:
                details.append(f"Champs suppl√©mentaires : {len(comparison['extra_fields'])}")
                for field in comparison["extra_fields"][:5]:
                    details.append(f"  ‚Ä¢ {field}")
                if len(comparison["extra_fields"]) > 5:
                    details.append(f"  ‚Ä¢ ... et {len(comparison['extra_fields']) - 5} autres")
            
            if comparison["type_mismatches"]:
                details.append(f"Types incorrects : {len(comparison['type_mismatches'])}")
                for mismatch in comparison["type_mismatches"][:3]:
                    details.append(f"  ‚Ä¢ {mismatch}")
            
            dialog.setInformativeText("\n".join(details))
        
        dialog.exec()
            
    def display_test_results(self, result):
        """Affichage des r√©sultats du test"""
        # Informations du test
        provider = self.provider_combo.currentText()
        model = self.model_combo.currentText()
        
        info_text = f"""
Provider: {provider}
Mod√®le: {model}
Temp√©rature: {self.temperature_spin.value()}
Max Tokens: {self.max_tokens_spin.value()}
Succ√®s: {'Oui' if result.get('success', False) else 'Non'}
"""
        
        if not result.get('success', False):
            info_text += f"Erreur: {result.get('error', 'Erreur inconnue')}"
            
        self.test_info_label.setText(info_text)
        
        # R√©sultat brut
        content = result.get('content', '')
        self.result_text.setPlainText(content)
        
        # Tentative de parsing JSON
        try:
            if content.strip():
                # Nettoyer le contenu
                cleaned_content = content.strip()
                if cleaned_content.startswith('```json'):
                    cleaned_content = cleaned_content[7:]
                
                # Ajouter un bouton pour comparer avec le mod√®le de r√©f√©rence
                if hasattr(self, 'compare_btn'):
                    self.compare_btn.setVisible(True)
                if cleaned_content.endswith('```'):
                    cleaned_content = cleaned_content[:-3]
                    
                parsed_json = json.loads(cleaned_content)
                formatted_json = json.dumps(parsed_json, indent=2, ensure_ascii=False)
                self.json_text.setPlainText(formatted_json)
            else:
                self.json_text.setPlainText("Aucun contenu √† parser")
        except json.JSONDecodeError as e:
            self.json_text.setPlainText(f"Erreur de parsing JSON: {e}\n\nContenu re√ßu:\n{content}")
        except Exception as e:
            self.json_text.setPlainText(f"Erreur: {e}")
            
    def add_to_history(self, result):
        """Ajout du r√©sultat √† l'historique"""
        try:
            # Cr√©er l'entr√©e d'historique
            history_entry = {
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'provider': self.provider_combo.currentText(),
                'model': self.model_combo.currentText(),
                'success': result.get('success', False),
                'error': result.get('error', ''),
                'content': result.get('content', ''),
                'temperature': self.temperature_spin.value(),
                'max_tokens': self.max_tokens_spin.value()
            }
            
            self.test_results.append(history_entry)
            
            # Mettre √† jour le tableau
            self.update_history_table()
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout √† l'historique: {e}")
            
    def update_history_table(self):
        """Mise √† jour du tableau d'historique"""
        try:
            self.history_table.setRowCount(len(self.test_results))
            
            for i, result in enumerate(self.test_results):
                # Date
                self.history_table.setItem(i, 0, QTableWidgetItem(result['date']))
                
                # Provider
                self.history_table.setItem(i, 1, QTableWidgetItem(result['provider']))
                
                # Mod√®le
                self.history_table.setItem(i, 2, QTableWidgetItem(result['model']))
                
                # Succ√®s
                success_text = "‚úÖ" if result['success'] else "‚ùå"
                self.history_table.setItem(i, 3, QTableWidgetItem(success_text))
                
                # Dur√©e (placeholder pour l'instant)
                self.history_table.setItem(i, 4, QTableWidgetItem("N/A"))
                
                # Actions
                actions_widget = QWidget()
                actions_layout = QHBoxLayout(actions_widget)
                
                view_btn = QPushButton("Voir")
                view_btn.clicked.connect(lambda checked, idx=i: self.view_history_result(idx))
                actions_layout.addWidget(view_btn)
                
                actions_widget.setLayout(actions_layout)
                self.history_table.setCellWidget(i, 5, actions_widget)
                
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du tableau: {e}")
            
    def view_history_result(self, index):
        """Voir un r√©sultat de l'historique"""
        try:
            result = self.test_results[index]
            
            # Afficher dans l'onglet r√©sultats
            self.tab_widget.setCurrentIndex(0)
            
            # Mettre √† jour les informations
            info_text = f"""
Date: {result['date']}
Provider: {result['provider']}
Mod√®le: {result['model']}
Temp√©rature: {result['temperature']}
Max Tokens: {result['max_tokens']}
Succ√®s: {'Oui' if result['success'] else 'Non'}
"""
            if not result['success']:
                info_text += f"Erreur: {result['error']}"
                
            self.test_info_label.setText(info_text)
            
            # Afficher le contenu
            self.result_text.setPlainText(result['content'])
            
            # Parser le JSON si possible
            try:
                if result['content'].strip():
                    cleaned_content = result['content'].strip()
                    if cleaned_content.startswith('```json'):
                        cleaned_content = cleaned_content[7:]
                    if cleaned_content.endswith('```'):
                        cleaned_content = cleaned_content[:-3]
                        
                    parsed_json = json.loads(cleaned_content)
                    formatted_json = json.dumps(parsed_json, indent=2, ensure_ascii=False)
                    self.json_text.setPlainText(formatted_json)
                else:
                    self.json_text.setPlainText("Aucun contenu √† parser")
            except:
                self.json_text.setPlainText("Impossible de parser le JSON")
                
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de l'affichage du r√©sultat: {e}")
            
    def clear_history(self):
        """Effacer l'historique"""
        reply = QMessageBox.question(
            self, "Confirmation", "Voulez-vous vraiment effacer tout l'historique ?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            self.test_results.clear()
            self.update_history_table()
            self.statusBar().showMessage("Historique effac√©")
            
    def export_history(self):
        """Exporter l'historique"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Exporter l'historique", "", "Fichiers JSON (*.json)"
            )
            if filename:
                with open(filename, "w", encoding="utf-8") as f:
                    json.dump(self.test_results, f, indent=2, ensure_ascii=False)
                self.statusBar().showMessage(f"Historique export√© dans {filename}")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de l'export: {e}")
            
    def refresh_config(self):
        """Actualiser la configuration"""
        try:
            config_info = {
                "provider_actuel": config.get_current_llm_provider(),
                "cl√©s_configur√©es": {}
            }
            
            providers = ["ollama", "openrouter", "openai", "anthropic"]
            for provider in providers:
                if provider != "ollama":
                    api_key = config.get_llm_api_key(provider)
                    config_info["cl√©s_configur√©es"][provider] = "Configur√©e" if api_key else "Non configur√©e"
                else:
                    config_info["cl√©s_configur√©es"][provider] = "Pas de cl√© requise"
                    
            config_text = json.dumps(config_info, indent=2, ensure_ascii=False)
            self.current_config_text.setPlainText(config_text)
            
        except Exception as e:
            self.current_config_text.setPlainText(f"Erreur lors du chargement de la configuration: {e}")
            
    def test_configuration(self):
        """Tester la configuration actuelle"""
        try:
            provider = config.get_current_llm_provider()
            api_key = config.get_llm_api_key(provider) if provider != "ollama" else None
            
            test_prompt = "R√©ponds simplement 'Configuration OK'"
            
            # Lancer un test rapide
            self.worker = LLMTestWorker(
                test_prompt, provider, api_key, "test", 0.1, 100
            )
            self.worker.result_ready.connect(self.on_config_test_completed)
            self.worker.start()
            
            self.statusBar().showMessage("Test de configuration en cours...")
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du test de configuration: {e}")
            
    def on_config_test_completed(self, result):
        """Gestion de la fin du test de configuration"""
        if result.get('success', False):
            QMessageBox.information(self, "Succ√®s", "Configuration test√©e avec succ√®s !")
        else:
            QMessageBox.warning(self, "Erreur", f"Erreur de configuration: {result.get('error', 'Erreur inconnue')}")
            
        self.statusBar().showMessage("Test de configuration termin√©")

def main():
    """Fonction principale"""
    app = QApplication(sys.argv)
    
    # Style de l'application
    app.setStyle('Fusion')
    
    # Cr√©ation de la fen√™tre principale
    window = LLMTestApp()
    window.show()
    
    # Ex√©cution de l'application
    sys.exit(app.exec())

if __name__ == "__main__":
    main() 