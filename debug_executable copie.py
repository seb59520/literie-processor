#!/usr/bin/env python3
"""
Script de diagnostic pour l'ex√©cutable MatelasApp
Identifie les probl√®mes de lancement
"""

import os
import sys
import subprocess
import platform
import json

def check_executable():
    """V√©rifie l'ex√©cutable et ses d√©pendances"""
    
    print("=" * 50)
    print("DIAGNOSTIC EX√âCUTABLE MATELASAPP")
    print("=" * 50)
    print(f"Plateforme: {platform.system()} {platform.release()}")
    print(f"Python: {sys.version}")
    print()
    
    # V√©rifier l'ex√©cutable
    exe_name = "MatelasApp"
    if platform.system() == "Windows":
        exe_name += ".exe"
    
    exe_path = os.path.join("dist", exe_name)
    
    if not os.path.exists(exe_path):
        print(f"‚ùå Ex√©cutable non trouv√©: {exe_path}")
        print("Compilez d'abord l'application avec build_with_spec.py")
        return False
    
    print(f"‚úÖ Ex√©cutable trouv√©: {exe_path}")
    size_mb = os.path.getsize(exe_path) / (1024*1024)
    print(f"   Taille: {size_mb:.1f} MB")
    print()
    
    # Test de lancement avec capture d'erreurs
    print("üß™ Test de lancement avec capture d'erreurs...")
    print()
    
    try:
        # Lancer l'ex√©cutable et capturer la sortie
        if platform.system() == "Windows":
            # Windows - lancer avec console pour voir les erreurs
            test_command = [
                "cmd", "/c", 
                f'"{exe_path}" 2>&1'
            ]
        else:
            # macOS/Linux
            test_command = [exe_path]
        
        print(f"Commande de test: {' '.join(test_command)}")
        print()
        
        # Lancer avec timeout
        result = subprocess.run(
            test_command,
            capture_output=True,
            text=True,
            timeout=30,
            shell=True if platform.system() == "Windows" else False
        )
        
        print("üìã Sortie standard:")
        print(result.stdout)
        print()
        
        if result.stderr:
            print("‚ùå Erreurs d√©tect√©es:")
            print(result.stderr)
            print()
        
        if result.returncode == 0:
            print("‚úÖ Ex√©cutable s'est lanc√© et termin√© normalement")
        else:
            print(f"‚ö†Ô∏è Ex√©cutable s'est termin√© avec le code: {result.returncode}")
            
    except subprocess.TimeoutExpired:
        print("‚úÖ Ex√©cutable s'est lanc√© (arr√™t√© apr√®s 30s)")
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        print()
        
        # Test alternatif pour Windows
        if platform.system() == "Windows":
            print("üîÑ Test alternatif pour Windows...")
            try:
                # Lancer directement l'ex√©cutable
                process = subprocess.Popen(
                    [exe_path],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                # Attendre un peu
                import time
                time.sleep(5)
                
                # V√©rifier si le processus existe encore
                if process.poll() is None:
                    print("‚úÖ Ex√©cutable semble fonctionner (processus actif)")
                    process.terminate()
                else:
                    stdout, stderr = process.communicate()
                    print(f"‚ùå Ex√©cutable s'est arr√™t√©")
                    if stdout:
                        print("Sortie:", stdout)
                    if stderr:
                        print("Erreurs:", stderr)
                        
            except Exception as e2:
                print(f"‚ùå Erreur lors du test alternatif: {e2}")
    
    print()
    print("üîç V√©rification des assets dans l'ex√©cutable...")
    
    # V√©rifier si les assets sont inclus
    try:
        if platform.system() == "Windows":
            # Sur Windows, on peut v√©rifier avec 7zip ou un outil similaire
            print("‚ÑπÔ∏è Sur Windows, v√©rifiez manuellement que les assets sont inclus")
        else:
            # Sur macOS/Linux, on peut extraire temporairement
            import tempfile
            import shutil
            
            with tempfile.TemporaryDirectory() as temp_dir:
                # Copier l'ex√©cutable
                temp_exe = os.path.join(temp_dir, exe_name)
                shutil.copy2(exe_path, temp_exe)
                
                # Rendre ex√©cutable
                os.chmod(temp_exe, 0o755)
                
                # Lancer avec variables d'environnement de debug
                env = os.environ.copy()
                env['PYTHONPATH'] = temp_dir
                
                result = subprocess.run(
                    [temp_exe],
                    capture_output=True,
                    text=True,
                    timeout=10,
                    env=env
                )
                
                if result.stderr:
                    print("Erreurs d√©tect√©es:")
                    print(result.stderr)
                    
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de v√©rifier les assets: {e}")
    
    print()
    print("üí° Solutions possibles:")
    print("1. V√©rifiez que tous les assets existent avant compilation")
    print("2. Essayez de lancer l'ex√©cutable depuis le dossier dist/")
    print("3. V√©rifiez les permissions d'ex√©cution")
    print("4. Sur Windows, essayez de lancer en tant qu'administrateur")
    print("5. V√©rifiez que tous les modules backend sont correctement import√©s")
    
    return True

def check_assets():
    """V√©rifie que tous les assets n√©cessaires existent"""
    
    print("=" * 50)
    print("V√âRIFICATION DES ASSETS")
    print("=" * 50)
    
    required_assets = [
        "assets/lit-double.png",
        "assets/logo_westelynck.png",
        "template/template_matelas.xlsx",
        "template/template_sommier.xlsx",
        "config/mappings_matelas.json",
        "config/mappings_sommiers.json",
        "backend/R√©f√©rentiels"
    ]
    
    missing_assets = []
    for asset in required_assets:
        if os.path.exists(asset):
            print(f"‚úÖ {asset}")
        else:
            print(f"‚ùå {asset}")
            missing_assets.append(asset)
    
    if missing_assets:
        print(f"\n‚ö†Ô∏è Assets manquants: {len(missing_assets)}")
        for asset in missing_assets:
            print(f"   - {asset}")
        print("\nCes assets manquants peuvent causer des probl√®mes de lancement.")
    else:
        print("\n‚úÖ Tous les assets sont pr√©sents")
    
    return len(missing_assets) == 0

if __name__ == "__main__":
    print("üîç Diagnostic de l'ex√©cutable MatelasApp")
    print()
    
    # V√©rifier les assets
    assets_ok = check_assets()
    print()
    
    # V√©rifier l'ex√©cutable
    if assets_ok:
        check_executable()
    else:
        print("‚ùå Corrigez d'abord les assets manquants avant de tester l'ex√©cutable") 