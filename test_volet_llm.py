#!/usr/bin/env python3
"""
Script de test pour v√©rifier le volet LLM d√©roulant
"""

import os
import sys

def test_imports():
    """Teste les imports n√©cessaires"""
    print("üîç TEST DES IMPORTS")
    print("=" * 40)
    
    try:
        from PyQt6.QtWidgets import QApplication, QMainWindow, QGroupBox, QVBoxLayout
        from PyQt6.QtCore import Qt
        print("‚úÖ PyQt6 import√© avec succ√®s")
        return True
    except ImportError as e:
        print(f"‚ùå Erreur import PyQt6: {e}")
        return False

def test_volet_llm():
    """Teste la cr√©ation d'un volet LLM d√©roulant"""
    print("\nüîß TEST DU VOLET LLM")
    print("=" * 40)
    
    try:
        from PyQt6.QtWidgets import QApplication, QMainWindow, QGroupBox, QVBoxLayout, QCheckBox, QLabel
        from PyQt6.QtCore import Qt
        
        # Cr√©er une application Qt
        app = QApplication([])
        
        # Cr√©er une fen√™tre de test
        window = QMainWindow()
        window.setWindowTitle("Test Volet LLM")
        window.resize(400, 300)
        
        # Widget central
        central_widget = QMainWindow()
        window.setCentralWidget(central_widget)
        
        # Layout principal
        layout = QVBoxLayout(central_widget)
        
        # Cr√©er le volet LLM d√©roulant
        llm_group = QGroupBox("üîΩ Enrichissement LLM")
        llm_group.setCheckable(True)
        llm_group.setChecked(True)  # Ouvert par d√©faut
        
        # Layout pour le contenu du volet
        llm_layout = QVBoxLayout(llm_group)
        
        # Ajouter des widgets de test
        checkbox = QCheckBox("Utiliser l'enrichissement LLM")
        checkbox.setChecked(True)
        llm_layout.addWidget(checkbox)
        
        label = QLabel("Provider: Ollama")
        llm_layout.addWidget(label)
        
        # Ajouter le volet au layout principal
        layout.addWidget(llm_group)
        
        # Fonction de test pour le basculement
        def on_toggled(checked):
            print(f"üîÑ Volet bascul√©: {'ouvert' if checked else 'ferm√©'}")
            
            # Afficher/masquer les widgets enfants
            for i in range(llm_layout.count()):
                widget = llm_layout.itemAt(i).widget()
                if widget:
                    widget.setVisible(checked)
            
            # Changer l'ic√¥ne du titre
            if checked:
                llm_group.setTitle("üîΩ Enrichissement LLM")
            else:
                llm_group.setTitle("‚ñ∂Ô∏è Enrichissement LLM")
        
        # Connecter le signal
        llm_group.toggled.connect(on_toggled)
        
        print("‚úÖ Volet LLM cr√©√© avec succ√®s")
        print("‚úÖ Propri√©t√©s checkable et checked configur√©es")
        print("‚úÖ Signal toggled connect√©")
        print("‚úÖ Widgets enfants ajout√©s")
        
        # Afficher la fen√™tre
        window.show()
        
        print("\nüéØ INSTRUCTIONS DE TEST:")
        print("1. Cliquez sur le titre du volet pour l'ouvrir/fermer")
        print("2. V√©rifiez que l'ic√¥ne change (üîΩ ‚ÜîÔ∏è ‚ñ∂Ô∏è)")
        print("3. V√©rifiez que le contenu s'affiche/se masque")
        print("4. Fermez la fen√™tre pour terminer le test")
        
        # Lancer l'application
        app.exec()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def test_configuration():
    """Teste la configuration du volet"""
    print("\n‚öôÔ∏è TEST DE LA CONFIGURATION")
    print("=" * 40)
    
    try:
        # V√©rifier que le fichier app_gui.py contient les bonnes modifications
        fichier_gui = "app_gui.py"
        
        if not os.path.exists(fichier_gui):
            print(f"‚ùå Fichier {fichier_gui} non trouv√©")
            return False
        
        with open(fichier_gui, 'r', encoding='utf-8') as f:
            contenu = f.read()
        
        # V√©rifier les modifications
        modifications = [
            ("QGroupBox checkable", "self.llm_group.setCheckable(True)"),
            ("Signal toggled", "self.llm_group.toggled.connect(self.on_llm_group_toggled)"),
            ("Fonction on_llm_group_toggled", "def on_llm_group_toggled(self, checked):"),
            ("Fonction save_llm_panel_state", "def save_llm_panel_state(self, is_open):"),
            ("Fonction restore_llm_panel_state", "def restore_llm_panel_state(self):"),
            ("Restoration automatique", "QTimer.singleShot(100, self.restore_llm_panel_state)")
        ]
        
        print("üìã V√©rification des modifications:")
        for nom, code in modifications:
            if code in contenu:
                print(f"   ‚úÖ {nom}")
            else:
                print(f"   ‚ùå {nom}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def main():
    """Fonction principale"""
    print("üéØ TEST COMPLET DU VOLET LLM D√âROULANT")
    print("=" * 60)
    
    # Test 1: Imports
    if not test_imports():
        print("‚ùå Test des imports √©chou√©")
        return False
    
    # Test 2: Configuration
    if not test_configuration():
        print("‚ùå Test de la configuration √©chou√©")
        return False
    
    # Test 3: Volet LLM
    if not test_volet_llm():
        print("‚ùå Test du volet LLM √©chou√©")
        return False
    
    print("\nüéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !")
    print("‚úÖ Le volet LLM d√©roulant est pr√™t √† √™tre utilis√©")
    
    return True

if __name__ == "__main__":
    main()

