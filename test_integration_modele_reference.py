#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier l'int√©gration du mod√®le de r√©f√©rence
"""

import sys
import os
import json

def test_modele_reference_file():
    """Teste l'existence et la validit√© du fichier mod√®le de r√©f√©rence"""
    print("üìã Test du fichier mod√®le de r√©f√©rence")
    print("=" * 50)
    
    if os.path.exists("modele_extraction_reference.json"):
        print("‚úÖ Fichier modele_extraction_reference.json trouv√©")
        
        try:
            with open("modele_extraction_reference.json", "r", encoding="utf-8") as f:
                reference_model = json.load(f)
            
            print("‚úÖ Fichier JSON valide")
            
            # V√©rifier la structure
            required_sections = ["societe", "client", "commande", "mode_mise_a_disposition", "articles", "paiement"]
            for section in required_sections:
                if section in reference_model:
                    print(f"‚úÖ Section '{section}' pr√©sente")
                else:
                    print(f"‚ùå Section '{section}' manquante")
            
            # V√©rifier les articles
            if "articles" in reference_model and isinstance(reference_model["articles"], list):
                print(f"‚úÖ {len(reference_model['articles'])} articles dans le mod√®le")
                
                # V√©rifier la structure d'un article
                if reference_model["articles"]:
                    first_article = reference_model["articles"][0]
                    article_fields = ["type", "description", "titre_cote", "information", "quantite", 
                                    "dimensions", "noyau", "fermete", "housse", "matiere_housse", 
                                    "autres_caracteristiques"]
                    
                    for field in article_fields:
                        if field in first_article:
                            print(f"  ‚úÖ Champ article '{field}' pr√©sent")
                        else:
                            print(f"  ‚ùå Champ article '{field}' manquant")
            
            return True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur de parsing JSON: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture: {e}")
            return False
    else:
        print("‚ùå Fichier modele_extraction_reference.json non trouv√©")
        return False

def test_application_integration():
    """Teste l'int√©gration dans l'application de test LLM"""
    print("\nüß™ Test de l'int√©gration dans l'application")
    print("=" * 50)
    
    if os.path.exists("test_llm_prompt.py"):
        print("‚úÖ Fichier test_llm_prompt.py trouv√©")
        
        with open("test_llm_prompt.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        # V√©rifier les nouvelles fonctionnalit√©s
        features_to_check = [
            ("Bouton mod√®le r√©f√©rence", "load_model_btn"),
            ("M√©thode load_reference_model", "load_reference_model"),
            ("M√©thode create_prompt_from_reference", "create_prompt_from_reference"),
            ("M√©thode create_example_text_from_reference", "create_example_text_from_reference"),
            ("Bouton comparaison", "compare_btn"),
            ("M√©thode compare_with_reference", "compare_with_reference"),
            ("M√©thode compare_json_structures", "compare_json_structures"),
            ("M√©thode show_comparison_dialog", "show_comparison_dialog")
        ]
        
        for feature_name, feature_code in features_to_check:
            if feature_code in content:
                print(f"‚úÖ {feature_name} - Impl√©ment√©")
            else:
                print(f"‚ùå {feature_name} - Manquant")
        
        return True
    else:
        print("‚ùå Fichier test_llm_prompt.py non trouv√©")
        return False

def test_backend_integration():
    """Teste l'int√©gration dans le backend"""
    print("\nüîß Test de l'int√©gration dans le backend")
    print("=" * 50)
    
    if os.path.exists("backend/main.py"):
        print("‚úÖ Fichier backend/main.py trouv√©")
        
        with open("backend/main.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        # V√©rifier les am√©liorations du prompt
        prompt_improvements = [
            ("Structure JSON obligatoire", "STRUCTURE JSON OBLIGATOIRE"),
            ("R√®gles sp√©cifiques", "R√àGLES SP√âCIFIQUES"),
            ("Exemple de r√©f√©rence", "EXEMPLE DE R√âF√âRENCE"),
            ("Champ autres_caracteristiques", "autres_caracteristiques"),
            ("Types d'articles √©tendus", "matelas|sommier|accessoire|t√™te de lit|pieds|remise")
        ]
        
        for improvement_name, improvement_code in prompt_improvements:
            if improvement_code in content:
                print(f"‚úÖ {improvement_name} - Impl√©ment√©")
            else:
                print(f"‚ùå {improvement_name} - Manquant")
        
        return True
    else:
        print("‚ùå Fichier backend/main.py non trouv√©")
        return False

def test_prompt_quality():
    """Teste la qualit√© du prompt g√©n√©r√©"""
    print("\nüìù Test de la qualit√© du prompt")
    print("=" * 50)
    
    try:
        # Simuler la cr√©ation d'un prompt
        with open("modele_extraction_reference.json", "r", encoding="utf-8") as f:
            reference_model = json.load(f)
        
        # Cr√©er un prompt bas√© sur le mod√®le
        prompt_template = f'''Tu es un assistant d'extraction sp√©cialis√© pour des devis de literie. Analyse le texte ci-dessous et g√©n√®re uniquement un JSON structur√© selon le format exact suivant.

TEXTE √Ä ANALYSER :
{{text}}

R√àGLES D'EXTRACTION STRICTES :

1. STRUCTURE JSON OBLIGATOIRE :
{{
  "societe": {{
    "nom": "nom de l'entreprise",
    "capital": "capital social",
    "adresse": "adresse compl√®te",
    "telephone": "num√©ro de t√©l√©phone",
    "email": "adresse email",
    "siret": "num√©ro SIRET",
    "APE": "code APE",
    "CEE": "num√©ro CEE",
    "banque": "nom de la banque",
    "IBAN": "num√©ro IBAN"
  }},
  "client": {{
    "nom": "nom du client",
    "adresse": "adresse du client",
    "code_client": "code client"
  }},
  "commande": {{
    "numero": "num√©ro de commande",
    "date": "date de commande",
    "date_validite": "date de validit√©",
    "commercial": "nom du commercial",
    "origine": "origine de la commande"
  }},
  "mode_mise_a_disposition": {{
    "emporte_client_C57": "texte si enl√®vement client",
    "fourgon_C58": "texte si livraison fourgon",
    "transporteur_C59": "texte si transporteur"
  }},
  "articles": [
    {{
      "type": "matelas|sommier|accessoire|t√™te de lit|pieds|remise",
      "description": "description compl√®te de l'article",
      "titre_cote": "Mr/Mme Gauche/Droit si applicable",
      "information": "en-t√™te comme '1/ CHAMBRE XYZ' si pr√©sent",
      "quantite": nombre,
      "dimensions": "format LxlxH",
      "noyau": "type de noyau pour matelas",
      "fermete": "niveau de fermet√©",
      "housse": "type de housse",
      "matiere_housse": "mat√©riau de la housse",
      "autres_caracteristiques": {{
        "caracteristique1": "valeur1",
        "caracteristique2": "valeur2"
      }}
    }}
  ],
  "paiement": {{
    "conditions": "conditions de paiement",
    "port_ht": montant_ht_port,
    "base_ht": montant_ht_total,
    "taux_tva": pourcentage_tva,
    "total_ttc": montant_ttc,
    "acompte": montant_acompte,
    "net_a_payer": montant_final
  }}
}}

2. R√àGLES SP√âCIFIQUES :
- Pour chaque article, extraire TOUS les champs disponibles
- Le champ "autres_caracteristiques" doit contenir les sp√©cificit√©s non standard
- Les remises sont des articles de type "remise" avec montant dans autres_caracteristiques
- Les dimensions doivent √™tre au format "LxlxH" (ex: "159x199x19")
- Les montants doivent √™tre des nombres (pas de texte)
- Si une information est absente : null pour les nombres, "" pour les textes

3. EXEMPLE DE R√âF√âRENCE :
{json.dumps(reference_model, indent=2, ensure_ascii=False)}

R√©ponds UNIQUEMENT avec un JSON valide selon cette structure exacte.'''
        
        print("‚úÖ Prompt g√©n√©r√© avec succ√®s")
        print(f"üìè Taille du prompt : {len(prompt_template)} caract√®res")
        
        # V√©rifier les √©l√©ments cl√©s
        key_elements = [
            "STRUCTURE JSON OBLIGATOIRE",
            "R√àGLES SP√âCIFIQUES",
            "EXEMPLE DE R√âF√âRENCE",
            "autres_caracteristiques",
            "matelas|sommier|accessoire|t√™te de lit|pieds|remise"
        ]
        
        for element in key_elements:
            if element in prompt_template:
                print(f"‚úÖ √âl√©ment cl√© '{element}' pr√©sent")
            else:
                print(f"‚ùå √âl√©ment cl√© '{element}' manquant")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du prompt: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß™ Test d'int√©gration du mod√®le de r√©f√©rence")
    print("=" * 70)
    
    results = []
    
    results.append(test_modele_reference_file())
    results.append(test_application_integration())
    results.append(test_backend_integration())
    results.append(test_prompt_quality())
    
    print("\nüéâ Tests termin√©s !")
    print("=" * 70)
    
    if all(results):
        print("‚úÖ TOUS LES TESTS R√âUSSIS")
        print("\nüìã R√©sum√© de l'int√©gration:")
        print("   ‚Ä¢ Mod√®le de r√©f√©rence JSON cr√©√© et valid√©")
        print("   ‚Ä¢ Application de test LLM enrichie")
        print("   ‚Ä¢ Backend mis √† jour avec le nouveau prompt")
        print("   ‚Ä¢ Fonctionnalit√©s de comparaison ajout√©es")
        print("   ‚Ä¢ Interface utilisateur am√©lior√©e")
        print("\nüöÄ Le mod√®le de r√©f√©rence est maintenant int√©gr√© !")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("V√©rifiez les erreurs ci-dessus et corrigez-les.")
    
    return all(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 