#!/usr/bin/env python3
"""
Test de la fonction creer_pre_import corrig√©e
"""

import sys
import os

# Ajouter le r√©pertoire backend au path
sys.path.append('backend')

from pre_import_utils import creer_pre_import, valider_pre_import

def test_pre_import_fixed():
    """Test de la fonction creer_pre_import avec les corrections de s√©curit√©"""
    
    print("=== TEST PR√â-IMPORT CORRIG√â ===")
    
    # Test 1: Param√®tres valides
    print("\nüìã Test 1: Param√®tres valides")
    configurations_matelas = [
        {
            "matelas_index": 1,
            "noyau": "MOUSSE RAINUREE 7 ZONES",
            "quantite": 2,
            "hauteur": 20,
            "fermete": "FERME",
            "housse": "MATELASS√âE",
            "matiere_housse": "TENCEL LUXE 3D",
            "poignees": "INT√âGR√âES",
            "dimensions": {"largeur": 79, "longueur": 198},
            "semaine_annee": "25_2025",
            "lundi": "2025-06-16",
            "vendredi": "2025-06-20",
            "commande_client": "GALOO"
        }
    ]
    
    donnees_client = {
        "nom": "Mr et Mme GALOO PASCAL & SANDRINE",
        "adresse": "OXELAERE",
        "code_client": "GALOPOX",
        "titre": "Mr et Mme"
    }
    
    try:
        pre_import_data = creer_pre_import(configurations_matelas, donnees_client, False, [], False)
        print(f"‚úÖ Pr√©-import cr√©√© avec succ√®s: {len(pre_import_data)} √©l√©ments")
        
        if pre_import_data:
            validation = valider_pre_import(pre_import_data)
            print(f"‚úÖ Validation: {validation}")
            
            # Afficher le premier √©l√©ment
            print(f"üìã Premier √©l√©ment: {pre_import_data[0]}")
        else:
            print("‚ùå Pr√©-import vide")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # Test 2: Param√®tres None (doit retourner liste vide)
    print("\nüìã Test 2: Param√®tres None")
    try:
        pre_import_data = creer_pre_import(None, donnees_client, False, [], False)
        print(f"‚úÖ Retourne liste vide pour configurations_matelas None: {len(pre_import_data)} √©l√©ments")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    try:
        pre_import_data = creer_pre_import(configurations_matelas, None, False, [], False)
        print(f"‚úÖ Retourne liste vide pour donnees_client None: {len(pre_import_data)} √©l√©ments")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    # Test 3: Param√®tres vides (doit retourner liste vide)
    print("\nüìã Test 3: Param√®tres vides")
    try:
        pre_import_data = creer_pre_import([], donnees_client, False, [], False)
        print(f"‚úÖ Retourne liste vide pour configurations_matelas vide: {len(pre_import_data)} √©l√©ments")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    try:
        pre_import_data = creer_pre_import(configurations_matelas, {}, False, [], False)
        print(f"‚úÖ Retourne liste vide pour donnees_client vide: {len(pre_import_data)} √©l√©ments")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    print("\n=== FIN DES TESTS ===")

if __name__ == "__main__":
    test_pre_import_fixed()

