#!/usr/bin/env python3
"""
Diagnostic de l'interface Ollama
"""

import sys
import os
import json

# Ajouter le r√©pertoire backend au path
sys.path.append('backend')

from config import config

def diagnostic_ollama_interface():
    """Diagnostic complet de l'interface Ollama"""
    
    print("=== DIAGNOSTIC INTERFACE OLLAMA ===")
    
    # 1. V√©rifier la configuration actuelle
    print("\nüìã 1. Configuration actuelle:")
    current_provider = config.get_current_llm_provider()
    print(f"   Provider actuel: {current_provider}")
    
    # 2. V√©rifier tous les providers et leurs cl√©s
    print("\nüìã 2. √âtat des providers et cl√©s API:")
    
    providers = ["openrouter", "openai", "anthropic", "gemini", "mistral", "ollama"]
    
    for provider in providers:
        api_key = config.get_llm_api_key(provider)
        status = "‚úÖ Configur√©" if api_key else "‚ùå Non configur√©"
        
        if provider == "ollama":
            if not api_key:
                status = "‚úÖ Correct (pas de cl√©)"
            else:
                status = "‚ö†Ô∏è Incorrect (cl√© trouv√©e)"
        
        print(f"   {provider:12}: {status}")
        if api_key:
            print(f"              Cl√©: {api_key[:20]}...")
    
    # 3. V√©rifier la configuration des mod√®les
    print("\nüìã 3. Configuration des mod√®les:")
    
    for provider in providers:
        model = config.get_llm_model(provider)
        if model:
            print(f"   {provider:12}: {model}")
        else:
            print(f"   {provider:12}: Mod√®le par d√©faut")
    
    # 4. V√©rifier la configuration Ollama sp√©cifique
    print("\nüìã 4. Configuration Ollama sp√©cifique:")
    
    ollama_base_url = config.get_ollama_base_url()
    print(f"   URL de base: {ollama_base_url or 'localhost:11434 (d√©faut)'}")
    
    ollama_model = config.get_llm_model("ollama")
    print(f"   Mod√®le: {ollama_model or 'mistral:latest (d√©faut)'}")
    
    # 5. V√©rifier le fichier de configuration
    print("\nüìã 5. Fichier de configuration:")
    
    config_file = "matelas_config.json"
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            print(f"   Fichier: {config_file}")
            print(f"   Taille: {os.path.getsize(config_file)} octets")
            
            # V√©rifier les cl√©s importantes
            important_keys = [
                "current_llm_provider",
                "llm_api_key_ollama",
                "llm_model_ollama",
                "ollama_base_url"
            ]
            
            for key in important_keys:
                value = config_data.get(key, "Non d√©fini")
                if key == "llm_api_key_ollama":
                    if value:
                        print(f"   ‚ö†Ô∏è {key}: {value[:20]}... (devrait √™tre vide)")
                    else:
                        print(f"   ‚úÖ {key}: Aucune (correct)")
                else:
                    print(f"   {key}: {value}")
                    
        except Exception as e:
            print(f"   ‚ùå Erreur lecture fichier: {e}")
    else:
        print(f"   ‚ùå Fichier {config_file} non trouv√©")
    
    # 6. Test de changement de provider
    print("\nüìã 6. Test de changement de provider:")
    
    try:
        # Sauvegarder le provider actuel
        original_provider = config.get_current_llm_provider()
        print(f"   Provider original: {original_provider}")
        
        # Changer vers OpenRouter
        config.set_current_llm_provider("openrouter")
        openrouter_provider = config.get_current_llm_provider()
        print(f"   Changement vers OpenRouter: {openrouter_provider}")
        
        # Changer vers Ollama
        config.set_current_llm_provider("ollama")
        ollama_provider = config.get_current_llm_provider()
        print(f"   Changement vers Ollama: {ollama_provider}")
        
        # Restaurer le provider original
        config.set_current_llm_provider(original_provider)
        restored_provider = config.get_current_llm_provider()
        print(f"   Restauration: {restored_provider}")
        
        if (openrouter_provider == "openrouter" and 
            ollama_provider == "ollama" and 
            restored_provider == original_provider):
            print("   ‚úÖ Changements de provider r√©ussis")
        else:
            print("   ‚ùå Probl√®me avec les changements de provider")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors des tests: {e}")
    
    # 7. Recommandations
    print("\nüìã 7. Recommandations:")
    
    if current_provider == "ollama":
        print("   ‚úÖ Ollama est le provider actuel")
        
        # V√©rifier qu'il n'y a pas de cl√© API pour Ollama
        ollama_key = config.get_llm_api_key("ollama")
        if ollama_key:
            print("   ‚ö†Ô∏è Supprimer la cl√© API pour Ollama")
            print("   üîß Commande: config.set_llm_api_key('ollama', '')")
        else:
            print("   ‚úÖ Aucune cl√© API pour Ollama (correct)")
            
        # V√©rifier que le mod√®le est configur√©
        ollama_model = config.get_llm_model("ollama")
        if not ollama_model:
            print("   üí° D√©finir un mod√®le par d√©faut pour Ollama")
            print("   üîß Commande: config.set_llm_model('ollama', 'mistral:latest')")
        else:
            print(f"   ‚úÖ Mod√®le configur√©: {ollama_model}")
    else:
        print(f"   üîÑ Changer vers Ollama: config.set_current_llm_provider('ollama')")
    
    print("\n=== FIN DU DIAGNOSTIC ===")

def fix_ollama_config():
    """Corriger la configuration Ollama si n√©cessaire"""
    
    print("\n=== CORRECTION CONFIGURATION OLLAMA ===")
    
    # 1. V√©rifier et corriger le provider
    current_provider = config.get_current_llm_provider()
    if current_provider != "ollama":
        print(f"üîß Changement du provider de {current_provider} vers ollama...")
        config.set_current_llm_provider("ollama")
        print("‚úÖ Provider chang√© vers ollama")
    else:
        print("‚úÖ Ollama est d√©j√† le provider actuel")
    
    # 2. Supprimer la cl√© API pour Ollama
    ollama_key = config.get_llm_api_key("ollama")
    if ollama_key:
        print(f"üîß Suppression de la cl√© API pour Ollama...")
        config.set_llm_api_key("ollama", "")
        print("‚úÖ Cl√© API supprim√©e")
    else:
        print("‚úÖ Aucune cl√© API pour Ollama (correct)")
    
    # 3. D√©finir un mod√®le par d√©faut si n√©cessaire
    ollama_model = config.get_llm_model("ollama")
    if not ollama_model:
        print("üîß D√©finition du mod√®le par d√©faut...")
        config.set_llm_model("ollama", "mistral:latest")
        print("‚úÖ Mod√®le d√©fini: mistral:latest")
    else:
        print(f"‚úÖ Mod√®le d√©j√† configur√©: {ollama_model}")
    
    # 4. V√©rifier la configuration finale
    print("\nüìã Configuration finale:")
    final_provider = config.get_current_llm_provider()
    final_key = config.get_llm_api_key("ollama")
    final_model = config.get_llm_model("ollama")
    
    print(f"   Provider: {final_provider}")
    print(f"   Cl√© API: {'Aucune' if not final_key else final_key}")
    print(f"   Mod√®le: {final_model}")
    
    if final_provider == "ollama" and not final_key and final_model:
        print("‚úÖ Configuration Ollama corrig√©e avec succ√®s !")
        return True
    else:
        print("‚ùå Configuration Ollama encore incorrecte")
        return False

if __name__ == "__main__":
    print("üöÄ Diagnostic de l'interface Ollama")
    
    # Diagnostic
    diagnostic_ollama_interface()
    
    # Correction si n√©cessaire
    print("\n" + "="*50)
    response = input("Voulez-vous corriger automatiquement la configuration ? (o/n): ")
    
    if response.lower() in ['o', 'oui', 'y', 'yes']:
        success = fix_ollama_config()
        if success:
            print("\nüéâ Configuration corrig√©e !")
            print("‚úÖ Relancez l'application pour tester")
        else:
            print("\n‚ùå Correction √©chou√©e")
            print("üîß V√©rifiez manuellement la configuration")
    else:
        print("\n‚è≠Ô∏è Aucune correction automatique effectu√©e")
    
    print("\n=== FIN DU PROGRAMME ===")

