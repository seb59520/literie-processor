#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier la pr√©visualisation
"""

import sys
import os

# Ajouter le r√©pertoire au path pour importer les modules
sys.path.append(os.path.dirname(__file__))

def test_imports():
    """Tester que tous les imports n√©cessaires fonctionnent"""
    print("üîç Test des imports n√©cessaires")
    print("=" * 50)
    
    try:
        # Test PyQt6
        try:
            from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                                        QWidget, QTextEdit, QPushButton, QLabel, QComboBox, 
                                        QLineEdit, QGroupBox, QSplitter, QTabWidget, QTableWidget,
                                        QTableWidgetItem, QMessageBox, QFileDialog, QProgressBar,
                                        QCheckBox, QSpinBox, QDoubleSpinBox, QTextBrowser, QDialog)
            from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
            from PyQt6.QtGui import QFont, QIcon, QPixmap
            print("‚úÖ PyQt6 - Tous les imports r√©ussis")
            return "PyQt6"
        except ImportError as e:
            print(f"‚ùå PyQt6 - Import √©chou√©: {e}")
        
        # Test PyQt5
        try:
            from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                                        QWidget, QTextEdit, QPushButton, QLabel, QComboBox, 
                                        QLineEdit, QGroupBox, QSplitter, QTabWidget, QTableWidget,
                                        QTableWidgetItem, QMessageBox, QFileDialog, QProgressBar,
                                        QCheckBox, QSpinBox, QDoubleSpinBox, QTextBrowser, QDialog)
            from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
            from PyQt5.QtGui import QFont, QIcon, QPixmap
            print("‚úÖ PyQt5 - Tous les imports r√©ussis")
            return "PyQt5"
        except ImportError as e:
            print(f"‚ùå PyQt5 - Import √©chou√©: {e}")
        
        print("‚ùå Aucune version de PyQt disponible")
        return None
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des imports: {e}")
        return None

def test_dialog_creation():
    """Tester la cr√©ation d'une fen√™tre de dialogue"""
    print("\nüîß Test de cr√©ation de fen√™tre de dialogue")
    print("=" * 50)
    
    try:
        # D√©tecter la version de PyQt
        qt_version = test_imports()
        if not qt_version:
            return False
        
        # Importer selon la version d√©tect√©e
        if qt_version == "PyQt6":
            from PyQt6.QtWidgets import QApplication, QDialog, QVBoxLayout, QTextEdit, QPushButton, QLabel
            from PyQt6.QtGui import QFont
        else:
            from PyQt5.QtWidgets import QApplication, QDialog, QVBoxLayout, QTextEdit, QPushButton, QLabel
            from PyQt5.QtGui import QFont
        
        # Cr√©er l'application
        app = QApplication([])
        
        # Cr√©er une fen√™tre de dialogue
        dialog = QDialog()
        dialog.setWindowTitle("Test de Pr√©visualisation")
        dialog.setModal(True)
        dialog.resize(600, 400)
        
        layout = QVBoxLayout(dialog)
        
        # Zone de texte
        text_edit = QTextEdit()
        text_edit.setPlainText("Ceci est un test de pr√©visualisation.\n\nLe texte extrait du PDF appara√Ætra ici.")
        text_edit.setReadOnly(True)
        text_edit.setFont(QFont("Courier", 10))
        layout.addWidget(text_edit)
        
        # Statistiques
        stats_label = QLabel("üìä Statistiques: 67 caract√®res | 12 mots | 3 lignes")
        stats_label.setStyleSheet("color: #666; font-weight: bold; padding: 5px;")
        layout.addWidget(stats_label)
        
        # Bouton de fermeture
        close_btn = QPushButton("Fermer")
        close_btn.clicked.connect(dialog.accept)
        layout.addWidget(close_btn)
        
        print("‚úÖ Fen√™tre de dialogue cr√©√©e avec succ√®s")
        print("‚úÖ Zone de texte configur√©e")
        print("‚úÖ Statistiques affich√©es")
        print("‚úÖ Bouton de fermeture ajout√©")
        
        # Afficher la fen√™tre
        print("\nüñ•Ô∏è Affichage de la fen√™tre de test...")
        dialog.exec()
        
        print("‚úÖ Fen√™tre ferm√©e avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de cr√©ation: {e}")
        return False

def test_pdf_extraction_imports():
    """Tester les imports pour l'extraction PDF"""
    print("\nüìÑ Test des imports d'extraction PDF")
    print("=" * 50)
    
    libraries = {
        "PyMuPDF (fitz)": "import fitz",
        "PyPDF2": "import PyPDF2",
        "reportlab": "from reportlab.pdfgen import canvas"
    }
    
    available_libs = []
    
    for lib_name, import_cmd in libraries.items():
        try:
            exec(import_cmd)
            print(f"‚úÖ {lib_name} - Disponible")
            available_libs.append(lib_name)
        except ImportError:
            print(f"‚ùå {lib_name} - Non disponible")
    
    return available_libs

def main():
    """Fonction principale"""
    print("üîç Test de pr√©visualisation et extraction PDF")
    print("=" * 60)
    
    try:
        # 1. Test des imports PyQt
        qt_version = test_imports()
        if not qt_version:
            print("\n‚ùå Impossible de tester sans PyQt")
            return False
        
        # 2. Test de cr√©ation de fen√™tre
        dialog_success = test_dialog_creation()
        
        # 3. Test des imports PDF
        pdf_libs = test_pdf_extraction_imports()
        
        # 4. R√©sum√©
        print("\nüéâ Test termin√© !")
        print("=" * 60)
        
        if dialog_success:
            print("‚úÖ Pr√©visualisation fonctionnelle")
        else:
            print("‚ùå Probl√®me avec la pr√©visualisation")
        
        if pdf_libs:
            print(f"‚úÖ Biblioth√®ques PDF disponibles: {', '.join(pdf_libs)}")
        else:
            print("‚ùå Aucune biblioth√®que PDF disponible")
        
        print(f"‚úÖ Version PyQt d√©tect√©e: {qt_version}")
        
        return dialog_success and len(pdf_libs) > 0
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 