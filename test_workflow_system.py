#!/usr/bin/env python3
"""
Test simple du syst√®me de workflow
"""

import time
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_workflow_engine():
    """Test le moteur de workflow"""
    print("üß™ Test du moteur de workflow...")
    
    try:
        from backend.workflow_engine import get_workflow_engine, Workflow, WorkflowTask
        
        # Cr√©er le moteur
        engine = get_workflow_engine()
        print("‚úÖ Moteur de workflow cr√©√©")
        
        # D√©marrer le moteur
        engine.start()
        print("‚úÖ Moteur d√©marr√©")
        
        # Cr√©er une t√¢che simple
        def simple_task(message):
            print(f"Ex√©cution t√¢che: {message}")
            time.sleep(1)
            return f"R√©sultat: {message}"
        
        # Cr√©er un workflow de test
        workflow = Workflow(
            id="test_workflow",
            name="Test Simple",
            description="Test basique du syst√®me"
        )
        
        # Ajouter des t√¢ches
        task1 = WorkflowTask(
            id="task1",
            name="Premi√®re t√¢che",
            function=simple_task,
            args=("Hello World",)
        )
        
        task2 = WorkflowTask(
            id="task2", 
            name="Deuxi√®me t√¢che",
            function=simple_task,
            args=("Task 2",),
            depends_on=["task1"]
        )
        
        workflow.tasks.extend([task1, task2])
        
        # Soumettre le workflow
        workflow_id = engine.submit_workflow(workflow)
        print(f"‚úÖ Workflow soumis: {workflow_id}")
        
        # Attendre la completion
        max_wait = 10
        waited = 0
        
        while waited < max_wait:
            status = engine.get_workflow_status(workflow_id)
            if status and status["status"] in ["completed", "failed"]:
                break
            time.sleep(1)
            waited += 1
            print(f"‚è≥ Attente... ({waited}s)")
        
        # V√©rifier le r√©sultat final
        final_status = engine.get_workflow_status(workflow_id)
        if final_status:
            print(f"üìä Statut final: {final_status['status']}")
            print(f"üìä Progression: {final_status['progress']:.1f}%")
        
        engine.stop()
        print("‚úÖ Test workflow termin√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test workflow: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_batch_processor():
    """Test le processeur de lots"""
    print("\nüß™ Test du processeur de lots...")
    
    try:
        from backend.batch_processor import get_batch_processor
        
        # Cr√©er le processeur
        processor = get_batch_processor()
        print("‚úÖ Processeur de lots cr√©√©")
        
        # Cr√©er des fichiers de test (simulation)
        test_files = [
            "/path/to/test1.pdf",
            "/path/to/test2.pdf", 
            "/path/to/test3.pdf"
        ]
        
        config = {
            "auto_retry": True,
            "priority": 5
        }
        
        # Cr√©er un lot
        workflow_id = processor.create_pdf_processing_batch(
            test_files, 
            config, 
            "Lot de test",
            priority=5
        )
        
        print(f"‚úÖ Lot cr√©√©: {workflow_id}")
        
        # V√©rifier le statut
        time.sleep(2)
        batch_status = processor.get_batch_status("batch_" + workflow_id.split("_", 1)[1])
        
        if batch_status:
            print(f"üìä Statut du lot: {batch_status.get('workflow_status', {}).get('status', 'unknown')}")
        
        print("‚úÖ Test batch processor termin√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test batch: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_monitoring():
    """Test le syst√®me de monitoring"""
    print("\nüß™ Test du syst√®me de monitoring...")
    
    try:
        from backend.workflow_monitor import get_workflow_monitor
        from backend.workflow_engine import get_workflow_engine
        
        engine = get_workflow_engine()
        monitor = get_workflow_monitor(engine)
        
        print("‚úÖ Moniteur cr√©√©")
        
        # D√©marrer le monitoring
        monitor.start_monitoring()
        print("‚úÖ Monitoring d√©marr√©")
        
        # Obtenir les donn√©es dashboard
        dashboard_data = monitor.get_dashboard_data()
        print(f"üìä Workflows actifs: {dashboard_data['active_workflows']}")
        print(f"üìä Workflows aujourd'hui: {dashboard_data['workflows_today']}")
        
        monitor.stop_monitoring()
        print("‚úÖ Test monitoring termin√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test monitoring: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Lance tous les tests"""
    print("üöÄ Test du Syst√®me de Workflow Automatis√©")
    print("=" * 60)
    
    results = []
    
    # Test 1: Moteur de workflow
    results.append(test_workflow_engine())
    
    # Test 2: Processeur de lots
    results.append(test_batch_processor())
    
    # Test 3: Syst√®me de monitoring
    results.append(test_monitoring())
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√©sultats des Tests:")
    
    success_count = sum(results)
    total_tests = len(results)
    
    print(f"   ‚úÖ Succ√®s: {success_count}/{total_tests}")
    print(f"   ‚ùå √âchecs: {total_tests - success_count}/{total_tests}")
    print(f"   üìà Taux de r√©ussite: {success_count/total_tests:.1%}")
    
    if success_count == total_tests:
        print("\nüéâ Tous les tests sont pass√©s! Le syst√®me de workflow est op√©rationnel.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total_tests - success_count} test(s) ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)