#!/usr/bin/env python3
"""
Interface graphique PyQt6 pour l'application de traitement de devis matelas
"""

import sys
import os
import json
import tempfile
import shutil
import logging
import logging.handlers
import subprocess
from datetime import datetime
from typing import List, Dict, Optional

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QPushButton, QLabel, QFileDialog, QTextEdit, QSpinBox, 
    QLineEdit, QCheckBox, QComboBox, QGroupBox, QScrollArea,
    QProgressBar, QMessageBox, QTabWidget, QTableWidget, QTableWidgetItem,
    QSplitter, QFrame, QMenuBar, QMenu, QTextBrowser, QGridLayout,
    QDialogButtonBox, QDialog, QHeaderView, QFormLayout,
    QListWidget, QListWidgetItem, QStatusBar
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt6.QtGui import QFont, QPixmap, QIcon, QAction
import webbrowser

# Import des modules backend existants
sys.path.append('backend')
from backend_interface import backend_interface
from config import config

# Import du module de stockage s√©curis√©
try:
    from backend.secure_storage import secure_storage
    SECURE_STORAGE_AVAILABLE = True
except ImportError as e:
    print(f"Module de stockage s√©curis√© non disponible: {e}")
    SECURE_STORAGE_AVAILABLE = False

# Configuration du syst√®me de logs avanc√©
def setup_logging():
    """Configure le syst√®me de logging avanc√© avec rotation des fichiers"""
    # Cr√©er le dossier logs s'il n'existe pas
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # Configuration du logger principal
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    
    # Formatter personnalis√©
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # Handler pour fichier avec rotation (max 5 fichiers de 5MB chacun)
    file_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'matelas_app.log'),
        maxBytes=5*1024*1024,  # 5MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    
    # Handler pour erreurs critiques
    error_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'matelas_errors.log'),
        maxBytes=2*1024*1024,  # 2MB
        backupCount=3,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    
    # Handler pour console
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    
    # Ajouter les handlers
    logger.addHandler(file_handler)
    logger.addHandler(error_handler)
    logger.addHandler(console_handler)
    
    return logger

# Initialiser le logging
logger = setup_logging()

class ProcessingThread(QThread):
    """Thread pour le traitement des fichiers PDF"""
    progress_updated = pyqtSignal(int)
    result_ready = pyqtSignal(dict)
    error_occurred = pyqtSignal(str)
    log_message = pyqtSignal(str, str)  # message, level
    
    def __init__(self, files, enrich_llm, llm_provider, openrouter_api_key, 
                 semaine_prod, annee_prod, commande_client):
        super().__init__()
        self.files = files
        self.enrich_llm = enrich_llm
        self.llm_provider = llm_provider
        self.openrouter_api_key = openrouter_api_key
        self.semaine_prod = semaine_prod
        self.annee_prod = annee_prod
        self.commande_client = commande_client
        
        # Logger sp√©cifique pour ce thread
        self.thread_logger = logging.getLogger(f"ProcessingThread_{id(self)}")
    
    def run(self):
        try:
            total_files = len(self.files)
            self.log_message.emit(f"D√©but du traitement de {total_files} fichiers", "INFO")
            self.progress_updated.emit(5)
            
            # Initialisation et validation
            self.log_message.emit("Validation des fichiers et pr√©paration...", "INFO")
            self.progress_updated.emit(10)
            
            # Appel du backend interface avec progression d√©taill√©e
            import asyncio
            self.log_message.emit("Appel du backend interface", "INFO")
            self.progress_updated.emit(15)
            
            # Simulation de progression pendant le traitement backend
            # (le backend ne fournit pas de progression en temps r√©el)
            progress_steps = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]
            for i, progress in enumerate(progress_steps):
                # Attendre un peu pour simuler le traitement
                import time
                time.sleep(0.1)  # 100ms entre chaque √©tape
                
                # Messages informatifs selon l'√©tape
                if progress == 20:
                    self.log_message.emit("Extraction du texte des PDF...", "INFO")
                elif progress == 40:
                    self.log_message.emit("Analyse du contenu...", "INFO")
                elif progress == 60:
                    if self.enrich_llm:
                        self.log_message.emit("Enrichissement avec IA...", "INFO")
                    else:
                        self.log_message.emit("Traitement des donn√©es...", "INFO")
                elif progress == 80:
                    self.log_message.emit("G√©n√©ration des configurations...", "INFO")
                
                self.progress_updated.emit(progress)
            
            # Appel r√©el du backend
            result = asyncio.run(backend_interface.process_pdf_files(
                self.files, self.enrich_llm, self.llm_provider, 
                self.openrouter_api_key, self.semaine_prod, 
                self.annee_prod, self.commande_client
            ))
            
            self.progress_updated.emit(90)
            self.log_message.emit("Traitement backend termin√©", "INFO")
            
            # Traiter tous les r√©sultats
            if result['results']:
                self.log_message.emit("Finalisation des r√©sultats...", "INFO")
                self.progress_updated.emit(95)
                
                for i, individual_result in enumerate(result['results']):
                    self.result_ready.emit(individual_result)
                    # Progression finale pour chaque r√©sultat
                    final_progress = 95 + (i + 1) * (5 // len(result['results']))
                    self.progress_updated.emit(min(final_progress, 99))
                
                self.log_message.emit(f"Traitement termin√© avec {len(result['results'])} r√©sultats", "INFO")
            else:
                self.error_occurred.emit("Aucun r√©sultat obtenu")
                self.log_message.emit("Aucun r√©sultat obtenu", "WARNING")
            
            self.progress_updated.emit(100)
            
        except Exception as e:
            error_msg = f"Erreur lors du traitement: {str(e)}"
            self.log_message.emit(error_msg, "ERROR")
            self.error_occurred.emit(error_msg)
            logger.exception("Erreur dans ProcessingThread")


class TestThread(QThread):
    """Thread pour l'ex√©cution des tests automatis√©s"""
    test_progress = pyqtSignal(int)
    test_output = pyqtSignal(str, str)  # message, level
    test_finished = pyqtSignal(dict)  # r√©sultats des tests
    test_error = pyqtSignal(str)


class BalanceThread(QThread):
    """Thread pour r√©cup√©rer le solde OpenRouter"""
    balance_ready = pyqtSignal(dict)  # donn√©es du solde
    balance_error = pyqtSignal(str)   # message d'erreur
    
    def __init__(self, api_key):
        super().__init__()
        self.api_key = api_key
    
    def run(self):
        """R√©cup√®re le solde OpenRouter via l'API"""
        try:
            import requests
            import json
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            # R√©cup√©rer le solde
            response = requests.get("https://openrouter.ai/api/v1/auth/key", headers=headers)
            
            print(f"üîç Debug OpenRouter API:")
            print(f"  - Status Code: {response.status_code}")
            print(f"  - Response Headers: {dict(response.headers)}")
            print(f"  - Response Text: {response.text[:500]}...")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"  - JSON Data: {json.dumps(data, indent=2)}")
                    
                    # Essayer diff√©rents formats de r√©ponse possibles
                    balance = 0
                    credits = 0
                    total_spent = 0
                    
                    # Format 1: champs directs
                    if "credits" in data:
                        credits = float(data["credits"])
                        balance = credits
                    if "balance" in data:
                        balance = float(data["balance"])
                    if "total_spent" in data:
                        total_spent = float(data["total_spent"])
                    
                    # Format 2: champs alternatifs
                    if "spent" in data:
                        total_spent = float(data["spent"])
                    if "remaining" in data:
                        balance = float(data["remaining"])
                    if "amount" in data:
                        balance = float(data["amount"])
                    
                    # Format 3: objets imbriqu√©s (comme dans la r√©ponse actuelle)
                    for key, value in data.items():
                        if isinstance(value, dict):
                            # Champs OpenRouter sp√©cifiques pour les limites de cl√©
                            if "limit_remaining" in value:
                                balance = float(value["limit_remaining"])  # Limite restante
                            if "usage" in value:
                                credits = float(value["usage"])  # Utilisation actuelle
                            if "limit" in value:
                                total_spent = float(value["limit"])  # Limite totale
                            
                            # Champs g√©n√©riques (fallback)
                            if "credits" in value and credits == 0:
                                credits = float(value["credits"])
                            if "balance" in value and balance == 0:
                                balance = float(value["balance"])
                            if "total_spent" in value and total_spent == 0:
                                total_spent = float(value["total_spent"])
                    
                    print(f"  - Extracted values: balance={balance}, credits={credits}, total_spent={total_spent}")
                    
                    balance_data = {
                        "balance": balance,
                        "credits": credits,
                        "total_spent": total_spent
                    }
                    self.balance_ready.emit(balance_data)
                    
                except json.JSONDecodeError as e:
                    self.balance_error.emit(f"Erreur de parsing JSON: {str(e)} - R√©ponse: {response.text[:200]}")
                    
            elif response.status_code == 401:
                self.balance_error.emit("Erreur d'authentification: V√©rifiez votre cl√© API OpenRouter")
            elif response.status_code == 403:
                self.balance_error.emit("Acc√®s refus√©: Votre cl√© API n'a pas les permissions n√©cessaires")
            elif response.status_code == 404:
                self.balance_error.emit("Endpoint non trouv√©: L'API OpenRouter a peut-√™tre chang√©")
            else:
                self.balance_error.emit(f"Erreur API: {response.status_code} - {response.text}")
                
        except Exception as e:
            import traceback
            print(f"‚ùå Exception compl√®te: {traceback.format_exc()}")
            self.balance_error.emit(f"Erreur lors de la r√©cup√©ration du solde: {str(e)}")


class TestThread(QThread):
    """Thread pour l'ex√©cution des tests automatis√©s"""
    test_progress = pyqtSignal(int)
    test_output = pyqtSignal(str, str)  # message, level
    test_finished = pyqtSignal(dict)  # r√©sultats des tests
    test_error = pyqtSignal(str)
    
    def __init__(self, test_type, verbose=False, coverage=False):
        super().__init__()
        self.test_type = test_type
        self.verbose = verbose
        self.coverage = coverage
        self.results = {}
        
        # Logger sp√©cifique pour ce thread
        self.thread_logger = logging.getLogger(f"TestThread_{id(self)}")
    
    def run(self):
        try:
            self.test_output.emit("D√©but de l'ex√©cution des tests", "INFO")
            self.test_progress.emit(10)
            
            # Construire la commande selon le type de test
            if self.test_type == "install_deps":
                self._run_install_dependencies()
            elif self.test_type == "all":
                self._run_all_tests()
            elif self.test_type == "unit":
                self._run_unit_tests()
            elif self.test_type == "integration":
                self._run_integration_tests()
            elif self.test_type == "performance":
                self._run_performance_tests()
            elif self.test_type == "regression":
                self._run_regression_tests()
            else:
                raise ValueError(f"Type de test inconnu: {self.test_type}")
            
            self.test_progress.emit(100)
            self.test_output.emit("Tests termin√©s avec succ√®s", "INFO")
            self.test_finished.emit(self.results)
            
        except Exception as e:
            error_msg = f"Erreur lors de l'ex√©cution des tests: {str(e)}"
            self.test_output.emit(error_msg, "ERROR")
            self.test_error.emit(error_msg)
            self.thread_logger.exception("Erreur dans TestThread")
    
    def _run_install_dependencies(self):
        """Installe les d√©pendances de test"""
        self.test_output.emit("Installation des d√©pendances de test...", "INFO")
        
        dependencies = [
            "pytest", "pytest-asyncio", "pytest-cov", "pytest-html", 
            "pytest-xdist", "pytest-mock", "pytest-benchmark"
        ]
        
        for dep in dependencies:
            self.test_output.emit(f"Installation de {dep}...", "INFO")
            try:
                result = subprocess.run(
                    ["pip", "install", dep],
                    capture_output=True,
                    text=True,
                    timeout=60
                )
                if result.returncode == 0:
                    self.test_output.emit(f"‚úÖ {dep} install√© avec succ√®s", "INFO")
                else:
                    self.test_output.emit(f"‚ö†Ô∏è √âchec de l'installation de {dep}", "WARNING")
            except Exception as e:
                self.test_output.emit(f"‚ùå Erreur lors de l'installation de {dep}: {e}", "ERROR")
    
    def _run_all_tests(self):
        """Ex√©cute tous les tests"""
        self.test_output.emit("Ex√©cution de tous les tests...", "INFO")
        
        command = ["python3", "tests/run_all_tests.py", "--all"]
        if self.verbose:
            command.append("--verbose")
        if self.coverage:
            command.append("--coverage")
            command.append("--report")
        
        self._execute_test_command(command, "Tous les tests")
    
    def _run_unit_tests(self):
        """Ex√©cute les tests unitaires"""
        self.test_output.emit("Ex√©cution des tests unitaires...", "INFO")
        
        command = ["python3", "-m", "pytest", "tests/test_unitaires.py"]
        if self.verbose:
            command.append("-v")
        if self.coverage:
            command.extend(["--cov=backend", "--cov=config", "--cov-report=term-missing"])
        
        self._execute_test_command(command, "Tests unitaires")
    
    def _run_integration_tests(self):
        """Ex√©cute les tests d'int√©gration"""
        self.test_output.emit("Ex√©cution des tests d'int√©gration...", "INFO")
        
        command = ["python3", "-m", "pytest", "tests/test_integration.py"]
        if self.verbose:
            command.append("-v")
        
        self._execute_test_command(command, "Tests d'int√©gration")
    
    def _run_performance_tests(self):
        """Ex√©cute les tests de performance"""
        self.test_output.emit("Ex√©cution des tests de performance...", "INFO")
        
        command = ["python3", "-m", "pytest", "tests/test_performance.py"]
        if self.verbose:
            command.append("-v")
        
        self._execute_test_command(command, "Tests de performance")
    
    def _run_regression_tests(self):
        """Ex√©cute les tests de r√©gression"""
        self.test_output.emit("Ex√©cution des tests de r√©gression...", "INFO")
        
        command = ["python3", "-m", "pytest", "tests/test_regression.py"]
        if self.verbose:
            command.append("-v")
        
        self._execute_test_command(command, "Tests de r√©gression")
    
    def _execute_test_command(self, command, test_name):
        """Ex√©cute une commande de test et capture la sortie"""
        self.test_output.emit(f"Commande: {' '.join(command)}", "INFO")
        
        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=300  # 5 minutes max
            )
            
            # Capturer la sortie
            if result.stdout:
                for line in result.stdout.split('\n'):
                    if line.strip():
                        self.test_output.emit(line, "INFO")
            
            if result.stderr:
                for line in result.stderr.split('\n'):
                    if line.strip():
                        self.test_output.emit(line, "WARNING")
            
            # Enregistrer le r√©sultat
            self.results[test_name] = {
                'success': result.returncode == 0,
                'returncode': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr
            }
            
            if result.returncode == 0:
                self.test_output.emit(f"‚úÖ {test_name} termin√©s avec succ√®s", "INFO")
            else:
                self.test_output.emit(f"‚ùå {test_name} ont √©chou√© (code: {result.returncode})", "ERROR")
                
        except subprocess.TimeoutExpired:
            error_msg = f"Timeout lors de l'ex√©cution de {test_name}"
            self.test_output.emit(error_msg, "ERROR")
            self.results[test_name] = {
                'success': False,
                'error': 'Timeout'
            }
        except Exception as e:
            error_msg = f"Erreur lors de l'ex√©cution de {test_name}: {e}"
            self.test_output.emit(error_msg, "ERROR")
            self.results[test_name] = {
                'success': False,
                'error': str(e)
            }


class ApiKeyManagerDialog(QDialog):
    """Dialogue pour la gestion des cl√©s API"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üîê Gestionnaire de Cl√©s API")
        self.setModal(True)
        self.resize(600, 500)
        
        # V√©rifier si le stockage s√©curis√© est disponible
        if not SECURE_STORAGE_AVAILABLE:
            QMessageBox.warning(
                self, 
                "Stockage S√©curis√© Non Disponible",
                "Le module de stockage s√©curis√© n'est pas disponible.\n"
                "Installez la d√©pendance 'cryptography' pour activer cette fonctionnalit√©."
            )
            self.reject()
            return
        
        self.init_ui()
        self.load_api_keys()
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        layout = QVBoxLayout(self)
        
        # Titre
        title = QLabel("üîê Gestionnaire de Cl√©s API S√©curis√©es")
        title.setStyleSheet("font-size: 16px; font-weight: bold; margin: 10px;")
        layout.addWidget(title)
        
        # Description
        desc = QLabel(
            "G√©rez vos cl√©s API de mani√®re s√©curis√©e. Les cl√©s sont chiffr√©es "
            "et stock√©es localement sur votre machine."
        )
        desc.setWordWrap(True)
        desc.setStyleSheet("color: #666; margin: 5px;")
        layout.addWidget(desc)
        
        # Tableau des cl√©s existantes
        self.keys_table = QTableWidget()
        self.keys_table.setColumnCount(4)
        self.keys_table.setHorizontalHeaderLabels([
            "Service", "Description", "Cr√©√©e le", "Actions"
        ])
        # Configuration du redimensionnement des colonnes pour PyQt6
        header = self.keys_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)
        layout.addWidget(self.keys_table)
        
        # Boutons d'action
        buttons_layout = QHBoxLayout()
        
        self.add_btn = QPushButton("‚ûï Ajouter une Cl√©")
        self.add_btn.clicked.connect(self.add_api_key)
        self.add_btn.setStyleSheet("background-color: #4CAF50; color: white; padding: 8px;")
        buttons_layout.addWidget(self.add_btn)
        
        self.refresh_btn = QPushButton("üîÑ Actualiser")
        self.refresh_btn.clicked.connect(self.load_api_keys)
        self.refresh_btn.setStyleSheet("background-color: #2196F3; color: white; padding: 8px;")
        buttons_layout.addWidget(self.refresh_btn)
        
        self.test_btn = QPushButton("üß™ Tester Chiffrement")
        self.test_btn.clicked.connect(self.test_encryption)
        self.test_btn.setStyleSheet("background-color: #FF9800; color: white; padding: 8px;")
        buttons_layout.addWidget(self.test_btn)
        
        buttons_layout.addStretch()
        
        self.close_btn = QPushButton("Fermer")
        self.close_btn.clicked.connect(self.accept)
        self.close_btn.setStyleSheet("background-color: #f44336; color: white; padding: 8px;")
        buttons_layout.addWidget(self.close_btn)
        
        layout.addLayout(buttons_layout)
    
    def load_api_keys(self):
        """Charge et affiche les cl√©s API existantes"""
        try:
            services = secure_storage.list_services()
            self.keys_table.setRowCount(len(services))
            
            for row, service in enumerate(services):
                info = secure_storage.get_api_key_info(service)
                
                # Service
                service_item = QTableWidgetItem(service)
                service_item.setFlags(service_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.keys_table.setItem(row, 0, service_item)
                
                # Description
                desc_item = QTableWidgetItem(info.get('description', ''))
                desc_item.setFlags(desc_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.keys_table.setItem(row, 1, desc_item)
                
                # Date de cr√©ation
                created = info.get('created_at', '')
                if created:
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(created.replace('Z', '+00:00'))
                        created = dt.strftime('%d/%m/%Y %H:%M')
                    except:
                        pass
                created_item = QTableWidgetItem(created)
                created_item.setFlags(created_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.keys_table.setItem(row, 2, created_item)
                
                # Actions
                actions_widget = QWidget()
                actions_layout = QHBoxLayout(actions_widget)
                actions_layout.setContentsMargins(2, 2, 2, 2)
                
                edit_btn = QPushButton("‚úèÔ∏è")
                edit_btn.setToolTip("Modifier")
                edit_btn.clicked.connect(lambda checked, s=service: self.edit_api_key(s))
                edit_btn.setStyleSheet("background-color: #2196F3; color: white; border: none; padding: 4px;")
                actions_layout.addWidget(edit_btn)
                
                delete_btn = QPushButton("üóëÔ∏è")
                delete_btn.setToolTip("Supprimer")
                delete_btn.clicked.connect(lambda checked, s=service: self.delete_api_key(s))
                delete_btn.setStyleSheet("background-color: #f44336; color: white; border: none; padding: 4px;")
                actions_layout.addWidget(delete_btn)
                
                actions_layout.addStretch()
                self.keys_table.setCellWidget(row, 3, actions_widget)
            
            if not services:
                self.keys_table.setRowCount(1)
                no_keys_item = QTableWidgetItem("Aucune cl√© API sauvegard√©e")
                no_keys_item.setFlags(no_keys_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.keys_table.setItem(0, 0, no_keys_item)
                
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors du chargement des cl√©s API: {str(e)}")
    
    def add_api_key(self):
        """Ouvre le dialogue d'ajout de cl√© API"""
        dialog = ApiKeyEditDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.load_api_keys()
    
    def edit_api_key(self, service_name):
        """Ouvre le dialogue de modification de cl√© API"""
        dialog = ApiKeyEditDialog(self, service_name)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.load_api_keys()
    
    def delete_api_key(self, service_name):
        """Supprime une cl√© API"""
        reply = QMessageBox.question(
            self, 
            "Confirmation de suppression",
            f"√ätes-vous s√ªr de vouloir supprimer la cl√© API pour '{service_name}' ?\n\n"
            "Cette action est irr√©versible.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                if secure_storage.delete_api_key(service_name):
                    QMessageBox.information(self, "Succ√®s", f"Cl√© API '{service_name}' supprim√©e avec succ√®s.")
                    self.load_api_keys()
                else:
                    QMessageBox.warning(self, "Erreur", "Erreur lors de la suppression de la cl√© API.")
            except Exception as e:
                QMessageBox.critical(self, "Erreur", f"Erreur lors de la suppression: {str(e)}")
    
    def test_encryption(self):
        """Teste le syst√®me de chiffrement"""
        try:
            if secure_storage.test_encryption():
                QMessageBox.information(
                    self, 
                    "Test R√©ussi", 
                    "‚úÖ Le syst√®me de chiffrement fonctionne correctement.\n\n"
                    "Vos cl√©s API sont prot√©g√©es de mani√®re s√©curis√©e."
                )
            else:
                QMessageBox.warning(
                    self, 
                    "Test √âchou√©", 
                    "‚ùå Le test de chiffrement a √©chou√©.\n\n"
                    "V√©rifiez la configuration du stockage s√©curis√©."
                )
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors du test: {str(e)}")


class ApiKeyEditDialog(QDialog):
    """Dialogue pour l'√©dition d'une cl√© API"""
    
    def __init__(self, parent=None, service_name=None):
        super().__init__(parent)
        self.service_name = service_name
        self.is_edit = service_name is not None
        
        self.setWindowTitle("üîë √âdition de Cl√© API" if self.is_edit else "‚ûï Nouvelle Cl√© API")
        self.setModal(True)
        self.resize(500, 300)
        
        self.init_ui()
        if self.is_edit:
            self.load_existing_key()
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        layout = QVBoxLayout(self)
        
        # Formulaire
        form_layout = QFormLayout()
        
        # Service
        self.service_combo = QComboBox()
        self.service_combo.addItems([
            "openrouter", "ollama", "anthropic", "openai", "google", "custom"
        ])
        self.service_combo.setEditable(True)
        self.service_combo.setCurrentText(self.service_name or "")
        form_layout.addRow("Service:", self.service_combo)
        
        # Description
        self.desc_edit = QLineEdit()
        self.desc_edit.setPlaceholderText("Description optionnelle de cette cl√© API")
        form_layout.addRow("Description:", self.desc_edit)
        
        # Cl√© API
        self.api_key_edit = QLineEdit()
        self.api_key_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_key_edit.setPlaceholderText("sk-... ou votre cl√© API")
        form_layout.addRow("Cl√© API:", self.api_key_edit)
        
        # Bouton pour afficher/masquer la cl√©
        show_key_btn = QPushButton("üëÅÔ∏è Afficher")
        show_key_btn.setCheckable(True)
        show_key_btn.toggled.connect(self.toggle_key_visibility)
        form_layout.addRow("", show_key_btn)
        
        layout.addLayout(form_layout)
        
        # Boutons
        button_box = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel
        )
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def toggle_key_visibility(self, show):
        """Affiche ou masque la cl√© API"""
        if show:
            self.api_key_edit.setEchoMode(QLineEdit.EchoMode.Normal)
            self.sender().setText("üôà Masquer")
        else:
            self.api_key_edit.setEchoMode(QLineEdit.EchoMode.Password)
            self.sender().setText("üëÅÔ∏è Afficher")
    
    def load_existing_key(self):
        """Charge les donn√©es de la cl√© existante"""
        try:
            info = secure_storage.get_api_key_info(self.service_name)
            if info:
                self.service_combo.setCurrentText(self.service_name)
                self.desc_edit.setText(info.get('description', ''))
                self.api_key_edit.setText(info.get('api_key', ''))
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du chargement: {str(e)}")
    
    def accept(self):
        """Valide et sauvegarde la cl√© API"""
        service = self.service_combo.currentText().strip()
        description = self.desc_edit.text().strip()
        api_key = self.api_key_edit.text().strip()
        
        if not service:
            QMessageBox.warning(self, "Erreur", "Le nom du service est obligatoire.")
            return
        
        if not api_key:
            QMessageBox.warning(self, "Erreur", "La cl√© API est obligatoire.")
            return
        
        try:
            if secure_storage.save_api_key(service, api_key, description):
                QMessageBox.information(
                    self, 
                    "Succ√®s", 
                    f"Cl√© API '{service}' sauvegard√©e avec succ√®s.\n\n"
                    "La cl√© est maintenant chiffr√©e et stock√©e de mani√®re s√©curis√©e."
                )
                super().accept()
            else:
                QMessageBox.critical(self, "Erreur", "Erreur lors de la sauvegarde de la cl√© API.")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors de la sauvegarde: {str(e)}")


class LLMProviderDialog(QDialog):
    """Dialogue unifi√© pour la gestion des providers LLM et cl√©s API"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üîß Configuration des Providers LLM")
        self.setModal(True)
        self.resize(700, 600)
        self.provider_widgets = {}  # Initialisation du dictionnaire avant tout
        self.setup_ui()
        self.load_current_settings()
    
    def setup_ui(self):
        """Configure l'interface utilisateur"""
        layout = QVBoxLayout(self)
        
        # Titre
        title = QLabel("üîß Configuration des Providers LLM")
        title.setStyleSheet("font-size: 16px; font-weight: bold; margin: 10px;")
        layout.addWidget(title)
        
        # Description
        desc = QLabel(
            "Configurez vos providers LLM et leurs cl√©s API. "
            "S√©lectionnez le provider actuel et g√©rez les mod√®les pour chaque service."
        )
        desc.setWordWrap(True)
        desc.setStyleSheet("color: #666; margin: 5px;")
        layout.addWidget(desc)
        
        # Provider actuel
        current_group = QGroupBox("Provider LLM actuel")
        current_layout = QHBoxLayout(current_group)
        current_layout.addWidget(QLabel("Provider :"))
        self.provider_combo = QComboBox()
        self.provider_combo.addItems(["openrouter", "openai", "anthropic", "gemini", "mistral"])
        self.provider_combo.currentTextChanged.connect(self.on_provider_changed)
        current_layout.addWidget(self.provider_combo)
        layout.addWidget(current_group)
        
        # Onglets pour chaque provider
        self.tab_widget = QTabWidget()
        
        # Onglet OpenRouter
        self.openrouter_tab = self.create_provider_tab("OpenRouter", "sk-or-v1-...")
        self.tab_widget.addTab(self.openrouter_tab, "OpenRouter")
        
        # Onglet OpenAI
        self.openai_tab = self.create_provider_tab("OpenAI", "sk-...")
        self.tab_widget.addTab(self.openai_tab, "OpenAI")
        
        # Onglet Anthropic
        self.anthropic_tab = self.create_provider_tab("Anthropic", "sk-ant-...")
        self.tab_widget.addTab(self.anthropic_tab, "Anthropic")
        
        # Onglet Gemini
        self.gemini_tab = self.create_provider_tab("Gemini", "AIza...")
        self.tab_widget.addTab(self.gemini_tab, "Gemini")
        
        # Onglet Mistral
        self.mistral_tab = self.create_provider_tab("Mistral", "mist-...")
        self.tab_widget.addTab(self.mistral_tab, "Mistral")
        
        # Onglet Ollama
        self.ollama_tab = self.create_provider_tab("Ollama", "(optionnel)")
        self.tab_widget.addTab(self.ollama_tab, "Ollama")
        
        layout.addWidget(self.tab_widget)
        
        # Boutons
        buttons = QHBoxLayout()
        
        save_button = QPushButton("üíæ Sauvegarder")
        save_button.clicked.connect(self.save_settings)
        save_button.setStyleSheet("background-color: #4CAF50; color: white; padding: 8px;")
        buttons.addWidget(save_button)
        
        test_all_button = QPushButton("üß™ Tester toutes les connexions")
        test_all_button.clicked.connect(self.test_all_connections)
        test_all_button.setStyleSheet("background-color: #2196F3; color: white; padding: 8px;")
        buttons.addWidget(test_all_button)
        
        buttons.addStretch()
        
        cancel_button = QPushButton("Annuler")
        cancel_button.clicked.connect(self.reject)
        cancel_button.setStyleSheet("background-color: #f44336; color: white; padding: 8px;")
        buttons.addWidget(cancel_button)
        
        layout.addLayout(buttons)
    
    def create_provider_tab(self, provider_name, api_key_placeholder=""):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        if provider_name.lower() == "ollama":
            title = QLabel("<b>Ollama (local)</b>")
            layout.addWidget(title)
            # ComboBox mod√®le + bouton refresh
            model_label = QLabel("Mod√®le :")
            model_combo = QComboBox()
            model_combo.setEditable(True)
            model_combo.setInsertPolicy(QComboBox.InsertPolicy.NoInsert)
            refresh_btn = QPushButton("üîÑ")
            refresh_btn.setToolTip("Rafra√Æchir la liste des mod√®les Ollama")
            refresh_btn.setFixedWidth(32)
            def refresh_ollama_models():
                import requests
                try:
                    resp = requests.get("http://localhost:11434/api/tags", timeout=2)
                    if resp.status_code == 200:
                        data = resp.json()
                        tags = [m["name"] for m in data.get("models", []) if "name" in m]
                        model_combo.clear()
                        model_combo.addItems(tags)
                    else:
                        model_combo.clear()
                except Exception:
                    model_combo.clear()
            refresh_btn.clicked.connect(refresh_ollama_models)
            # Layout horizontal mod√®le
            model_layout = QHBoxLayout()
            model_layout.addWidget(model_label)
            model_layout.addWidget(model_combo)
            model_layout.addWidget(refresh_btn)
            layout.addLayout(model_layout)
            # Bouton tester
            test_btn = QPushButton("‚úèÔ∏è Tester la connexion Ollama")
            test_btn.setStyleSheet("background-color: orange; color: white; font-weight: bold;")
            test_btn.clicked.connect(lambda: self.test_connection(provider_name))
            layout.addWidget(test_btn)
            # Message d'aide
            help_label = QLabel("<i>Aucune cl√© API requise. Ollama doit √™tre lanc√© localement (commande : <b>ollama serve</b>).</i>")
            help_label.setStyleSheet("color: #555; margin-top: 8px;")
            layout.addWidget(help_label)
            api_key_input = None
            model_input = model_combo
        else:
            title = QLabel(f"<b>{provider_name} (cloud)</b>")
            layout.addWidget(title)
            # Champ cl√© API
            api_key_label = QLabel("Cl√© API :")
            api_key_input = QLineEdit()
            api_key_input.setPlaceholderText(api_key_placeholder)
            api_key_input.setEchoMode(QLineEdit.EchoMode.Password)
            api_key_input.setObjectName(f"key_{provider_name.lower()}")
            show_key_btn = QPushButton("üëÅÔ∏è")
            show_key_btn.setCheckable(True)
            show_key_btn.setFixedWidth(40)
            def toggle_echo():
                api_key_input.setEchoMode(QLineEdit.EchoMode.Normal if show_key_btn.isChecked() else QLineEdit.EchoMode.Password)
            show_key_btn.clicked.connect(toggle_echo)
            test_btn = QPushButton("‚úèÔ∏è Tester la connexion")
            test_btn.setStyleSheet("background-color: orange; color: white; font-weight: bold;")
            test_btn.clicked.connect(lambda: self.test_connection(provider_name))
            def update_test_btn():
                test_btn.setEnabled(bool(api_key_input.text().strip()))
            api_key_input.textChanged.connect(update_test_btn)
            update_test_btn()
            api_layout = QHBoxLayout()
            api_layout.addWidget(api_key_label)
            api_layout.addWidget(api_key_input)
            api_layout.addWidget(show_key_btn)
            api_layout.addWidget(test_btn)
            layout.addLayout(api_layout)
            # ComboBox mod√®le pour chaque provider
            model_label = QLabel("Mod√®le :")
            model_combo = QComboBox()
            model_combo.setEditable(True)
            model_combo.setInsertPolicy(QComboBox.InsertPolicy.NoInsert)
            
            if provider_name.lower() == "openrouter":
                # Mod√®les populaires OpenRouter
                models = [
                    "gpt-4o", "gpt-4-turbo", "gpt-3.5-turbo", "mistral-medium", "mistral-small",
                    "llama-3-70b-instruct", "llama-3-8b-instruct", "mixtral-8x7b-instruct",
                    "gemini-pro", "claude-3-haiku", "claude-3-sonnet"
                ]
            elif provider_name.lower() == "openai":
                # Mod√®les populaires OpenAI
                models = [
                    "gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-3.5-turbo", "gpt-3.5-turbo-16k"
                ]
            elif provider_name.lower() == "anthropic":
                # Mod√®les populaires Anthropic
                models = [
                    "claude-3-5-sonnet-20241022", "claude-3-opus-20240229", "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307"
                ]
            elif provider_name.lower() == "gemini":
                # Mod√®les populaires Gemini
                models = [
                    "models/gemini-1.5-pro", "models/gemini-1.5-flash", "models/gemini-pro"
                ]
            elif provider_name.lower() == "mistral":
                # Mod√®les populaires Mistral
                models = [
                    "mistral-large-latest", "mistral-medium-latest", "mistral-small-latest"
                ]
            else:
                # Mod√®les par d√©faut pour les autres providers
                models = ["mod√®le-par-d√©faut"]
            
            model_combo.addItems(models)
            model_layout = QHBoxLayout()
            model_layout.addWidget(model_label)
            model_layout.addWidget(model_combo)
            layout.addLayout(model_layout)
            model_input = model_combo
            help_label = QLabel("<i>Cl√© API obligatoire pour ce provider cloud.</i>")
            help_label.setStyleSheet("color: #555; margin-top: 8px;")
            layout.addWidget(help_label)
        status_label = QLabel()
        status_label.setWordWrap(True)
        layout.addWidget(status_label)
        self.provider_widgets[provider_name] = {
            "api_key_input": api_key_input if provider_name.lower() != "ollama" else None,
            "model_input": model_input,
            "status_label": status_label,
        }
        tab.setLayout(layout)
        return tab
    
    def get_model_suggestions(self, provider):
        """Retourne les suggestions de mod√®les pour un provider"""
        suggestions = {
            "openai": ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-3.5-turbo"],
            "anthropic": ["claude-3-5-sonnet-20241022", "claude-3-opus-20240229", "claude-3-sonnet-20240229"],
            "gemini": ["models/gemini-1.5-pro", "models/gemini-1.5-flash", "models/gemini-pro"],
            "mistral": ["mistral-large-latest", "mistral-medium-latest", "mistral-small-latest"],
            "openrouter": ["openai/gpt-4o", "anthropic/claude-3-5-sonnet", "google/gemini-1.5-pro"]
        }
        return suggestions.get(provider, [])
    
    def on_model_suggestion_changed(self, text, input_field):
        """Appel√© quand une suggestion de mod√®le est s√©lectionn√©e"""
        if text:
            input_field.setText(text)
    
    def toggle_key_visibility(self, show, input_field, button):
        """Affiche ou masque la cl√© API"""
        if show:
            input_field.setEchoMode(QLineEdit.EchoMode.Normal)
            button.setText("üôà")
        else:
            input_field.setEchoMode(QLineEdit.EchoMode.Password)
            button.setText("üëÅÔ∏è")
    
    def on_provider_changed(self, provider):
        """Appel√© quand le provider actuel change"""
        # Mettre √† jour l'onglet actif
        provider_tabs = {
            "openrouter": 0,
            "openai": 1,
            "anthropic": 2,
            "gemini": 3,
            "mistral": 4,
            "ollama": 5
        }
        if provider in provider_tabs:
            self.tab_widget.setCurrentIndex(provider_tabs[provider])
    
    def load_current_settings(self):
        """Charge les param√®tres actuels"""
        # Provider actuel
        current_provider = config.get_current_llm_provider()
        index = self.provider_combo.findText(current_provider)
        if index >= 0:
            self.provider_combo.setCurrentIndex(index)
        
        # Cl√©s API et mod√®les
        providers = ["openrouter", "openai", "anthropic", "gemini", "mistral", "ollama"]
        for provider in providers:
            # Cl√© API
            key_input = self.findChild(QLineEdit, f"key_{provider}")
            if key_input:
                api_key = config.get_llm_api_key(provider)
                key_input.setText(api_key)
            
            # Mod√®le
            model_input = self.findChild(QLineEdit, f"model_{provider}")
            if model_input:
                model = config.get_llm_model(provider)
                model_input.setText(model)
    
    def test_connection(self, provider):
        widgets = self.provider_widgets[provider]
        status_label = widgets["status_label"]
        if provider.lower() == "ollama":
            import requests
            try:
                resp = requests.get("http://localhost:11434/api/tags", timeout=2)
                if resp.status_code == 200:
                    status_label.setText("‚úÖ Ollama disponible sur localhost:11434")
                    status_label.setStyleSheet("color: green; padding: 5px; border-radius: 3px; background-color: #e8f5e8;")
                else:
                    status_label.setText(f"‚ùå Ollama ne r√©pond pas (code {resp.status_code})")
                    status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            except Exception as e:
                status_label.setText("‚ùå Ollama non disponible. Lancez-le avec 'ollama serve'.")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            return
        # Pour OpenRouter et autres
        api_key_input = widgets.get("api_key_input")
        api_key = api_key_input.text().strip() if api_key_input else ""
        if provider.lower() == "openrouter":
            if not api_key:
                status_label.setText("‚ùå Cl√© API manquante pour OpenRouter")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
                return
            import requests
            headers = {"Authorization": f"Bearer {api_key}"}
            try:
                resp = requests.get("https://openrouter.ai/api/v1/auth/key", headers=headers, timeout=5)
                if resp.status_code == 200 and resp.json().get("data"):
                    status_label.setText("‚úÖ Connexion OpenRouter OK")
                    status_label.setStyleSheet("color: green; padding: 5px; border-radius: 3px; background-color: #e8f5e8;")
                else:
                    status_label.setText(f"‚ùå Erreur OpenRouter: {resp.status_code}")
                    status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            except Exception as e:
                status_label.setText(f"‚ùå Erreur de connexion: {e}")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            return
        elif provider.lower() == "mistral":
            if not api_key:
                status_label.setText("‚ùå Cl√© API manquante pour Mistral")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
                return
            import requests
            headers = {"Authorization": f"Bearer {api_key}"}
            try:
                resp = requests.get("https://api.mistral.ai/v1/models", headers=headers, timeout=5)
                if resp.status_code == 200:
                    status_label.setText("‚úÖ Connexion Mistral OK")
                    status_label.setStyleSheet("color: green; padding: 5px; border-radius: 3px; background-color: #e8f5e8;")
                else:
                    status_label.setText(f"‚ùå Erreur Mistral: {resp.status_code}")
                    status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            except Exception as e:
                status_label.setText(f"‚ùå Erreur de connexion: {e}")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            return
        elif provider.lower() == "openai":
            if not api_key:
                status_label.setText("‚ùå Cl√© API manquante pour OpenAI")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
                return
            import requests
            headers = {"Authorization": f"Bearer {api_key}"}
            try:
                resp = requests.get("https://api.openai.com/v1/models", headers=headers, timeout=5)
                if resp.status_code == 200:
                    status_label.setText("‚úÖ Connexion OpenAI OK")
                    status_label.setStyleSheet("color: green; padding: 5px; border-radius: 3px; background-color: #e8f5e8;")
                else:
                    status_label.setText(f"‚ùå Erreur OpenAI: {resp.status_code}")
                    status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            except Exception as e:
                status_label.setText(f"‚ùå Erreur de connexion: {e}")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            return
        elif provider.lower() == "anthropic":
            if not api_key:
                status_label.setText("‚ùå Cl√© API manquante pour Anthropic")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
                return
            import requests
            headers = {"x-api-key": api_key, "anthropic-version": "2023-06-01"}
            try:
                resp = requests.get("https://api.anthropic.com/v1/models", headers=headers, timeout=5)
                if resp.status_code == 200:
                    status_label.setText("‚úÖ Connexion Anthropic OK")
                    status_label.setStyleSheet("color: green; padding: 5px; border-radius: 3px; background-color: #e8f5e8;")
                else:
                    status_label.setText(f"‚ùå Erreur Anthropic: {resp.status_code}")
                    status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            except Exception as e:
                status_label.setText(f"‚ùå Erreur de connexion: {e}")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            return
        elif provider.lower() == "gemini":
            if not api_key:
                status_label.setText("‚ùå Cl√© API manquante pour Gemini")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
                return
            import requests
            try:
                resp = requests.get(f"https://generativelanguage.googleapis.com/v1beta/models?key={api_key}", timeout=5)
                if resp.status_code == 200:
                    status_label.setText("‚úÖ Connexion Gemini OK")
                    status_label.setStyleSheet("color: green; padding: 5px; border-radius: 3px; background-color: #e8f5e8;")
                else:
                    status_label.setText(f"‚ùå Erreur Gemini: {resp.status_code}")
                    status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            except Exception as e:
                status_label.setText(f"‚ùå Erreur de connexion: {e}")
                status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
            return
        # ... autres providers ...
        else:
            # Provider non g√©r√©
            status_label.setText(f"‚ùå Test non impl√©ment√© pour {provider}")
            status_label.setStyleSheet("color: orange; padding: 5px; border-radius: 3px; background-color: #fff3e0;")
    
    def test_all_connections(self):
        """Teste toutes les connexions"""
        providers = ["openrouter", "openai", "anthropic", "gemini", "mistral", "ollama"]
        for provider in providers:
            try:
                self.test_connection(provider)
            except Exception as e:
                # Gestion d'erreur pour chaque test
                if provider in self.provider_widgets:
                    status_label = self.provider_widgets[provider]["status_label"]
                    status_label.setText(f"‚ùå Erreur lors du test: {str(e)}")
                    status_label.setStyleSheet("color: red; padding: 5px; border-radius: 3px; background-color: #ffebee;")
    
    def save_settings(self):
        """Sauvegarde les param√®tres"""
        # Provider actuel
        current_provider = self.provider_combo.currentText()
        config.set_current_llm_provider(current_provider)
        
        # Cl√©s API et mod√®les
        providers = ["openrouter", "openai", "anthropic", "gemini", "mistral", "ollama"]
        for provider in providers:
            # Cl√© API
            key_input = self.findChild(QLineEdit, f"key_{provider}")
            if key_input:
                api_key = key_input.text().strip()
                config.set_llm_api_key(provider, api_key)
            
            # Mod√®le
            model_input = self.findChild(QLineEdit, f"model_{provider}")
            if model_input:
                model = model_input.text().strip()
                config.set_llm_model(provider, model)
        
        QMessageBox.information(self, "Succ√®s", "Configuration sauvegard√©e avec succ√®s!")
        self.accept()


class MatelasApp(QMainWindow):
    """Application principale pour le traitement de devis matelas"""
    
    def __init__(self):
        super().__init__()
        self.selected_files = []
        self.processing_thread = None
        self.test_thread = None
        # Variables pour accumuler les r√©sultats
        self.all_results = []
        self.all_configurations = []
        self.all_configurations_sommiers = []
        self.all_preimport = []
        self.all_excel_files = []
        self.eula_accepted_file = os.path.join(os.path.expanduser('~'), '.matelas_eula_accepted')
        
        # Logger sp√©cifique pour l'application
        try:
            self.app_logger = logging.getLogger("MatelasApp")
            self.app_logger.info("Initialisation de l'application MatelasApp")
        except Exception as e:
            print(f"Erreur lors de l'initialisation du logger: {e}")
            self.app_logger = None
        
        try:
            self.check_eula_acceptance()
            self.init_ui()
            
            # Timer pour mettre √† jour la barre de statut
            self.status_timer = QTimer()
            self.status_timer.timeout.connect(self.update_status_bar)
            self.status_timer.start(1000)  # Mise √† jour toutes les secondes
            
            if self.app_logger:
                self.app_logger.info("Application initialis√©e avec succ√®s")
        except Exception as e:
            print(f"Erreur lors de l'initialisation de l'interface: {e}")
            if self.app_logger:
                self.app_logger.error(f"Erreur lors de l'initialisation: {e}")
            raise
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        self.setWindowTitle("Application Traitement Devis Matelas")
        self.setGeometry(100, 100, 1400, 900)
        
        # D√©finir l'ic√¥ne de la fen√™tre avec le logo
        self.setWindowIcon(QIcon("assets/lit-double.png"))
        
        # Cr√©ation de la barre de menu
        self.create_menu_bar()
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QHBoxLayout(central_widget)
        
        # Splitter pour diviser l'interface
        splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(splitter)
        
        # Panneau de gauche (configuration)
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)
        
        # Panneau de droite (r√©sultats)
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)
        
        # Proportions du splitter
        splitter.setSizes([400, 1000])
        
        # Style
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 1ex;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            QPushButton {
                background-color: #0078d4;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
            QTextEdit {
                border: 1px solid #cccccc;
                border-radius: 4px;
                padding: 5px;
            }
            QTableWidget {
                border: 1px solid #cccccc;
                border-radius: 4px;
                gridline-color: #e0e0e0;
            }
            QTextBrowser {
                border: 1px solid #cccccc;
                border-radius: 4px;
                padding: 5px;
                background-color: #fafafa;
                font-family: 'Courier New', monospace;
                font-size: 10px;
            }
        """)
        
        self.app_logger.info("Interface utilisateur initialis√©e")
    
    def create_left_panel(self):
        """Cr√©e le panneau de configuration √† gauche"""
        left_widget = QWidget()
        layout = QVBoxLayout(left_widget)
        
        # Affichage du logo en haut du panneau
        logo_label = QLabel()
        logo_pixmap = QPixmap("assets/lit-double.png").scaledToHeight(80, Qt.TransformationMode.SmoothTransformation)
        logo_label.setPixmap(logo_pixmap)
        logo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(logo_label)
        
        # Titre
        title = QLabel("Configuration")
        title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # Groupe fichiers
        file_group = QGroupBox("Fichiers PDF")
        file_layout = QVBoxLayout(file_group)
        
        self.file_label = QLabel("Aucun fichier s√©lectionn√©")
        self.file_label.setWordWrap(True)
        file_layout.addWidget(self.file_label)
        
        file_buttons_layout = QHBoxLayout()
        self.select_files_btn = QPushButton("S√©lectionner fichiers")
        self.select_files_btn.clicked.connect(self.select_files)
        file_buttons_layout.addWidget(self.select_files_btn)
        
        self.clear_files_btn = QPushButton("Effacer")
        self.clear_files_btn.clicked.connect(self.clear_files)
        self.clear_files_btn.setEnabled(False)
        file_buttons_layout.addWidget(self.clear_files_btn)
        
        file_layout.addLayout(file_buttons_layout)

        # Ajout d'un layout pour les champs commande par fichier
        self.commande_fields_layout = QVBoxLayout()
        file_layout.addLayout(self.commande_fields_layout)

        layout.addWidget(file_group)
        
        # Groupe LLM
        llm_group = QGroupBox("Enrichissement LLM")
        llm_layout = QVBoxLayout(llm_group)
        
        self.enrich_llm_checkbox = QCheckBox("Utiliser l'enrichissement LLM")
        llm_layout.addWidget(self.enrich_llm_checkbox)
        
        # Provider LLM
        provider_layout = QHBoxLayout()
        provider_layout.addWidget(QLabel("Provider:"))

        # R√©cup√©rer les providers avec une cl√© API
        from config import config
        providers_with_key = [p for p, key in config.get_all_llm_providers().items() if key.strip()]
        provider_list = ["ollama"] + [p for p in providers_with_key if p != "ollama"]

        self.llm_provider_combo = QComboBox()
        self.llm_provider_combo.addItems(provider_list)
        self.llm_provider_combo.currentTextChanged.connect(self.on_provider_changed)
        provider_layout.addWidget(self.llm_provider_combo)
        llm_layout.addLayout(provider_layout)

        # Synchronisation avec la config globale
        current_provider = config.get_current_llm_provider()
        if current_provider not in provider_list:
            current_provider = "ollama"
        index = self.llm_provider_combo.findText(current_provider)
        if index >= 0:
            self.llm_provider_combo.setCurrentIndex(index)
        
        # API Key OpenRouter
        self.api_key_label = QLabel("Cl√© API OpenRouter:")
        self.api_key_label.setVisible(False)
        llm_layout.addWidget(self.api_key_label)
        
        self.api_key_input = QLineEdit()
        self.api_key_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_key_input.setVisible(False)
        self.api_key_input.setText(config.get_openrouter_api_key())
        llm_layout.addWidget(self.api_key_input)
        
        layout.addWidget(llm_group)
        
        # Groupe production
        prod_group = QGroupBox("Param√®tres de production")
        prod_layout = QVBoxLayout(prod_group)
        
        # Semaine
        semaine_layout = QHBoxLayout()
        semaine_layout.addWidget(QLabel("Semaine:"))
        self.semaine_spin = QSpinBox()
        self.semaine_spin.setRange(1, 53)
        self.semaine_spin.setValue(config.get_last_semaine())
        semaine_layout.addWidget(self.semaine_spin)
        prod_layout.addLayout(semaine_layout)
        
        # Ann√©e
        annee_layout = QHBoxLayout()
        annee_layout.addWidget(QLabel("Ann√©e:"))
        self.annee_spin = QSpinBox()
        self.annee_spin.setRange(2020, 2030)
        self.annee_spin.setValue(config.get_last_annee())
        annee_layout.addWidget(self.annee_spin)
        prod_layout.addLayout(annee_layout)
        
        layout.addWidget(prod_group)
        
        # Groupe commande client
        cmd_group = QGroupBox("Commande client")
        self.cmd_layout = QVBoxLayout(cmd_group)
        
        layout.addWidget(cmd_group)
        
        # Bouton traitement
        self.process_btn = QPushButton("Traiter les fichiers")
        self.process_btn.clicked.connect(self.process_files)
        self.process_btn.setEnabled(False)
        layout.addWidget(self.process_btn)
        
        # Barre de progression
        progress_group = QGroupBox("Progression")
        progress_layout = QVBoxLayout(progress_group)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setFormat("Traitement en cours... %p%")
        self.progress_bar.setMinimum(0)
        self.progress_bar.setMaximum(100)
        progress_layout.addWidget(self.progress_bar)
        
        # Label pour le statut d√©taill√©
        self.progress_status_label = QLabel("Pr√™t")
        self.progress_status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.progress_status_label.setStyleSheet("color: green; font-weight: bold;")
        self.progress_status_label.setVisible(False)
        progress_layout.addWidget(self.progress_status_label)
        
        layout.addWidget(progress_group)
        
        # Espace flexible
        layout.addStretch()
        
        return left_widget
    
    def create_menu_bar(self):
        """Cr√©e la barre de menu de l'application"""
        menubar = self.menuBar()
        
        # Menu Fichier
        file_menu = menubar.addMenu('&Fichier')
        
        # Action Ouvrir fichiers
        open_action = QAction('&Ouvrir fichiers PDF...', self)
        open_action.setShortcut('Ctrl+O')
        open_action.setStatusTip('Ouvrir des fichiers PDF pour traitement')
        open_action.triggered.connect(self.select_files)
        file_menu.addAction(open_action)
        
        # S√©parateur
        file_menu.addSeparator()
        
        # Action Quitter
        quit_action = QAction('&Quitter', self)
        quit_action.setShortcut('Ctrl+Q')
        quit_action.setStatusTip('Quitter l\'application')
        quit_action.triggered.connect(self.close)
        file_menu.addAction(quit_action)
        
        # Menu Traitement
        process_menu = menubar.addMenu('&Traitement')
        
        # Action Traiter les fichiers
        process_action = QAction('&Traiter les fichiers', self)
        process_action.setShortcut('F5')
        process_action.setStatusTip('Lancer le traitement des fichiers s√©lectionn√©s')
        process_action.triggered.connect(self.process_files)
        process_menu.addAction(process_action)
        
        # Action Arr√™ter le traitement
        self.stop_action = QAction('&Arr√™ter le traitement', self)
        self.stop_action.setShortcut('F6')
        self.stop_action.setStatusTip('Arr√™ter le traitement en cours')
        self.stop_action.triggered.connect(self.stop_processing)
        self.stop_action.setEnabled(False)
        process_menu.addAction(self.stop_action)
        
        # Menu Aide
        help_menu = menubar.addMenu('&Aide')
        
        # Action Guide d'aide complet
        help_action = QAction('&Guide d\'aide complet', self)
        help_action.setShortcut('F1')
        help_action.setStatusTip('Ouvrir le guide d\'aide complet')
        help_action.triggered.connect(self.show_help_guide)
        help_menu.addAction(help_action)
        

        
        # Action Gestionnaire de cl√©s API (supprim√© car doublon avec R√©glages)
        # if SECURE_STORAGE_AVAILABLE:
        #     api_keys_action = QAction('üîê &Gestionnaire de Cl√©s API', self)
        #     api_keys_action.setShortcut('F3')
        #     api_keys_action.setStatusTip('G√©rer les cl√©s API de mani√®re s√©curis√©e')
        #     api_keys_action.triggered.connect(self.show_api_key_manager)
        #     help_menu.addAction(api_keys_action)
        
        # Action Contrat d'utilisation
        eula_action = QAction("&Contrat d'utilisation", self)
        eula_action.setStatusTip("Afficher le contrat d'utilisation (EULA)")
        eula_action.triggered.connect(self.show_eula)
        help_menu.addAction(eula_action)
        
        # Action √Ä propos
        about_action = QAction('&√Ä propos', self)
        about_action.setStatusTip('Informations sur l\'application')
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
        # Barre de statut avanc√©e
        self.create_advanced_status_bar()
        
        # Menu R√©glages
        settings_menu = menubar.addMenu('&R√©glages')
        
        # Action Param√®tres g√©n√©raux
        general_settings_action = QAction('‚öôÔ∏è Param√®tres g√©n√©raux', self)
        general_settings_action.setStatusTip('Configurer les param√®tres g√©n√©raux de l\'application')
        general_settings_action.triggered.connect(self.show_general_settings_dialog)
        settings_menu.addAction(general_settings_action)
        
        # S√©parateur
        settings_menu.addSeparator()
        
        # Action Classement des noyaux
        noyau_order_action = QAction('Classer l\'ordre des noyaux', self)
        noyau_order_action.setStatusTip('D√©finir l\'ordre d\'√©criture des noyaux dans Excel')
        noyau_order_action.triggered.connect(self.show_noyau_order_dialog)
        settings_menu.addAction(noyau_order_action)
        
        # Action Configuration des Providers LLM
        api_keys_action = QAction('üîß Configuration des Providers LLM', self)
        api_keys_action.setStatusTip('Configurer les providers LLM et leurs cl√©s API')
        api_keys_action.triggered.connect(self.show_api_keys_dialog)
        settings_menu.addAction(api_keys_action)
        
        # S√©parateur
        settings_menu.addSeparator()
        
        # Action Tests automatis√©s
        tests_action = QAction('üß™ Tests automatis√©s', self)
        tests_action.setStatusTip('Acc√©der aux tests automatis√©s')
        tests_action.triggered.connect(self.show_tests_dialog)
        settings_menu.addAction(tests_action)
        
        # Action Co√ªt OpenRouter
        cost_action = QAction('üí∞ Co√ªt OpenRouter', self)
        cost_action.setStatusTip('Surveiller les co√ªts et limites OpenRouter')
        cost_action.triggered.connect(self.show_cost_dialog)
        settings_menu.addAction(cost_action)
        
        # S√©parateur
        settings_menu.addSeparator()
        
        # Action Maintenance - Documentation
        maintenance_action = QAction('üìö Maintenance - Documentation', self)
        maintenance_action.setStatusTip('Acc√©der √† la documentation de maintenance (fichiers Markdown)')
        maintenance_action.triggered.connect(self.show_maintenance_dialog)
        settings_menu.addAction(maintenance_action)
        
        # S√©parateur
        settings_menu.addSeparator()
        
        # Action Configuration des mappings Excel
        mapping_action = QAction('üìä Configuration des mappings Excel', self)
        mapping_action.setStatusTip('Configurer les mappings entre champs pr√©-import et cellules Excel')
        mapping_action.triggered.connect(self.show_mapping_config_dialog)
        settings_menu.addAction(mapping_action)
        
        # Action Gestionnaire de mises √† jour
        update_action = QAction('üîÑ Gestionnaire de mises √† jour', self)
        update_action.setStatusTip('G√©rer les versions et appliquer les patches')
        update_action.triggered.connect(self.show_update_manager)
        settings_menu.addAction(update_action)
    
    def create_advanced_status_bar(self):
        status_bar = QStatusBar(self)
        self.setStatusBar(status_bar)
        
        # Informations sur les fichiers et r√©sultats
        self.files_info = QLabel("Fichiers: 0")
        self.results_info = QLabel("R√©sultats: 0 config, 0 pr√©-import, 0 Excel")
        status_bar.addWidget(self.files_info)
        status_bar.addWidget(self.results_info)
        
        # S√©parateur
        separator1 = QLabel(" | ")
        separator1.setStyleSheet("color: gray;")
        status_bar.addWidget(separator1)
        
        # √âtat de la connexion internet
        self.internet_status_label = QLabel()
        status_bar.addWidget(self.internet_status_label)
        
        # S√©parateur
        separator2 = QLabel(" | ")
        separator2.setStyleSheet("color: gray;")
        status_bar.addWidget(separator2)
        
        # R√©pertoire de sortie Excel
        self.excel_output_label = QLabel()
        status_bar.addWidget(self.excel_output_label)
        
        # S√©parateur
        separator3 = QLabel(" | ")
        separator3.setStyleSheet("color: gray;")
        status_bar.addWidget(separator3)
        
        # Provider LLM
        self.provider_status_label = QLabel()
        status_bar.addPermanentWidget(self.provider_status_label)
        
        # Initialisation des statuts
        self.update_provider_status()
        self.update_internet_status()
        self.update_excel_output_status()
        
        # Timer pour mettre √† jour l'√©tat de la connexion internet
        self.internet_timer = QTimer()
        self.internet_timer.timeout.connect(self.update_internet_status)
        self.internet_timer.start(30000)  # V√©rifier toutes les 30 secondes
        
        return status_bar

    def update_provider_status(self):
        from config import config
        provider = config.get_current_llm_provider()
        provider_display = {
            "openai": "OpenAI",
            "anthropic": "Anthropic",
            "gemini": "Gemini",
            "mistral": "Mistral",
            "openrouter": "OpenRouter",
            "ollama": "Ollama"
        }.get(provider, provider)
        self.provider_status_label.setText(f"Provider LLM : {provider_display}")
    
    def update_internet_status(self):
        """Met √† jour l'√©tat de la connexion internet"""
        try:
            import urllib.request
            import socket
            
            # Test de connexion avec timeout
            socket.setdefaulttimeout(5)
            
            # Test avec un serveur fiable
            urllib.request.urlopen('http://www.google.com', timeout=5)
            
            self.internet_status_label.setText("üåê Internet: Connect√©")
            self.internet_status_label.setStyleSheet("color: green; font-weight: bold;")
            
        except Exception as e:
            self.internet_status_label.setText("üåê Internet: D√©connect√©")
            self.internet_status_label.setStyleSheet("color: red; font-weight: bold;")
    
    def update_excel_output_status(self):
        """Met √† jour l'affichage du r√©pertoire de sortie Excel"""
        try:
            from config import config
            output_dir = config.get_excel_output_directory()
            
            # Raccourcir le chemin pour l'affichage
            if len(output_dir) > 40:
                # Prendre le d√©but et la fin du chemin
                parts = output_dir.split(os.sep)
                if len(parts) > 3:
                    shortened = os.sep.join(parts[:2] + ['...'] + parts[-2:])
                else:
                    shortened = output_dir
            else:
                shortened = output_dir
            
            # Compter les fichiers Excel existants
            excel_count = 0
            if os.path.exists(output_dir):
                excel_files = [f for f in os.listdir(output_dir) if f.endswith('.xlsx')]
                excel_count = len(excel_files)
            
            self.excel_output_label.setText(f"üìÅ Excel: {shortened} ({excel_count} fichiers)")
            self.excel_output_label.setStyleSheet("color: blue;")
            
        except Exception as e:
            self.excel_output_label.setText("üìÅ Excel: Erreur de configuration")
            self.excel_output_label.setStyleSheet("color: red;")
    
    def update_status_info(self):
        """Met √† jour les informations de la barre de statut"""
        try:
            if not hasattr(self, 'files_info') or not hasattr(self, 'results_info'):
                return
                
            # Mise √† jour des informations sur les fichiers
            files_count = len(self.selected_files)
            self.files_info.setText(f"Fichiers: {files_count}")
            
            # Mise √† jour des informations sur les r√©sultats
            config_count = len(self.all_configurations)
            preimport_count = len(self.all_preimport)
            excel_count = len(self.all_excel_files)
            self.results_info.setText(f"R√©sultats: {config_count} config, {preimport_count} pr√©-import, {excel_count} Excel")
            
            # Mise √† jour du r√©pertoire Excel
            self.update_excel_output_status()
            
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.debug(f"Erreur lors de la mise √† jour du statut: {e}")
            else:
                print(f"Erreur lors de la mise √† jour du statut: {e}")
    
    def update_status_indicator(self, status, color="green"):
        """Met √† jour l'indicateur de statut"""
        try:
            if not hasattr(self, 'status_indicator'):
                return
                
            status_icons = {
                "ready": "üü¢",
                "processing": "üü°", 
                "error": "üî¥",
                "warning": "üü†",
                "success": "üü¢"
            }
            
            status_colors = {
                "ready": "#e8f5e8",
                "processing": "#fff3cd",
                "error": "#f8d7da", 
                "warning": "#fff3cd",
                "success": "#d4edda"
            }
            
            icon = status_icons.get(status, "‚ö™")
            bg_color = status_colors.get(status, "#f8f9fa")
            
            self.status_indicator.setText(f"{icon} {status.title()}")
            self.status_indicator.setStyleSheet(f"font-weight: bold; padding: 2px 8px; border-radius: 3px; background-color: {bg_color};")
            
        except Exception as e:
            print(f"Erreur lors de la mise √† jour de l'indicateur: {e}")
    
    def create_right_panel(self):
        """Cr√©e le panneau de r√©sultats √† droite"""
        right_widget = QWidget()
        layout = QVBoxLayout(right_widget)
        
        # Titre
        title = QLabel("R√©sultats")
        title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # Onglets pour les r√©sultats
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)
        
        # Onglet R√©sum√©
        self.summary_tab = QWidget()
        self.summary_layout = QVBoxLayout(self.summary_tab)
        self.summary_text = QTextBrowser()  # QTextBrowser supporte nativement les liens hypertextes
        self.summary_text.setOpenExternalLinks(False)  # D√©sactiver l'ouverture automatique
        self.summary_text.anchorClicked.connect(self.open_excel_file)
        
        # Am√©liorer le style du texte
        self.summary_text.setStyleSheet("""
            QTextBrowser {
                font-family: Arial, sans-serif;
                font-size: 11px;
                line-height: 1.4;
                color: #333333;
                background-color: #ffffff;
            }
            QTextBrowser a {
                color: #0066cc;
                text-decoration: underline;
                font-weight: bold;
                font-size: 12px;
            }
            QTextBrowser a:hover {
                color: #003366;
                text-decoration: underline;
            }
        """)
        
        self.summary_layout.addWidget(self.summary_text)
        self.tabs.addTab(self.summary_tab, "R√©sum√©")
        
        # Onglet Configurations avec sous-onglets
        self.config_tab = QWidget()
        self.config_layout = QVBoxLayout(self.config_tab)
        
        # Bouton pour effacer les r√©sultats
        clear_btn = QPushButton("Effacer tous les r√©sultats")
        clear_btn.clicked.connect(self.clear_results)
        self.config_layout.addWidget(clear_btn)
        
        # Sous-onglets pour matelas et sommiers
        self.config_subtabs = QTabWidget()
        self.config_layout.addWidget(self.config_subtabs)
        
        # Sous-onglet Matelas
        self.matelas_config_tab = QWidget()
        self.matelas_config_layout = QVBoxLayout(self.matelas_config_tab)
        self.matelas_config_table = QTableWidget()
        self.matelas_config_layout.addWidget(self.matelas_config_table)
        self.config_subtabs.addTab(self.matelas_config_tab, "Matelas")
        
        # Sous-onglet Sommiers
        self.sommiers_config_tab = QWidget()
        self.sommiers_config_layout = QVBoxLayout(self.sommiers_config_tab)
        self.sommiers_config_table = QTableWidget()
        self.sommiers_config_layout.addWidget(self.sommiers_config_table)
        self.config_subtabs.addTab(self.sommiers_config_tab, "Sommiers")
        
        self.tabs.addTab(self.config_tab, "Configurations")
        
        # Onglet Pr√©-import
        self.preimport_tab = QWidget()
        self.preimport_layout = QVBoxLayout(self.preimport_tab)
        self.preimport_table = QTableWidget()
        self.preimport_layout.addWidget(self.preimport_table)
        self.tabs.addTab(self.preimport_tab, "Pr√©-import")
        
        # Onglet JSON brut
        self.json_tab = QWidget()
        self.json_layout = QVBoxLayout(self.json_tab)
        self.json_text = QTextEdit()
        self.json_text.setReadOnly(True)
        self.json_layout.addWidget(self.json_text)
        self.tabs.addTab(self.json_tab, "JSON")
        
        # Onglet Fichiers Excel
        self.excel_tab = QWidget()
        self.excel_layout = QVBoxLayout(self.excel_tab)
        self.excel_text = QTextEdit()
        self.excel_text.setReadOnly(True)
        self.excel_layout.addWidget(self.excel_text)
        self.tabs.addTab(self.excel_tab, "Fichiers Excel")
        
        return right_widget
    
    def filter_logs(self):
        """Filtre les logs selon le niveau s√©lectionn√©"""
        level = getattr(logging, self.log_level_combo.currentText())
        self.log_handler.setLevel(level)
    
    def clear_logs(self):
        """Efface l'affichage des logs"""
        self.logs_browser.clear()
        self.app_logger.info("Logs effac√©s par l'utilisateur")
    

    

    
    def run_tests(self, test_type):
        """Lance l'ex√©cution des tests"""
        try:
            if self.test_thread and self.test_thread.isRunning():
                QMessageBox.warning(self, "Tests en cours", "Des tests sont d√©j√† en cours d'ex√©cution")
                return
            
            # R√©cup√©ration des options
            verbose = self.verbose_checkbox.isChecked()
            coverage = self.coverage_checkbox.isChecked()
            
            # Mise √† jour de l'interface
            self.test_progress_bar.setVisible(True)
            self.test_progress_bar.setValue(0)
            self.tests_status_label.setText("Tests en cours d'ex√©cution...")
            self.tests_status_label.setStyleSheet("color: orange; font-weight: bold;")
            
            # D√©sactiver les boutons
            self._set_test_buttons_enabled(False)
            
            # Cr√©er et lancer le thread de test
            self.test_thread = TestThread(test_type, verbose, coverage)
            self.test_thread.test_progress.connect(self.on_test_progress)
            self.test_thread.test_output.connect(self.on_test_output)
            self.test_thread.test_finished.connect(self.on_test_finished)
            self.test_thread.test_error.connect(self.on_test_error)
            
            self.test_thread.start()
            
            if self.app_logger:
                self.app_logger.info(f"D√©marrage des tests: {test_type}")
                
        except Exception as e:
            error_msg = f"Erreur lors du lancement des tests: {e}"
            self.tests_output.append(f"‚ùå {error_msg}")
            self.tests_status_label.setText("Erreur lors du lancement")
            self.tests_status_label.setStyleSheet("color: red; font-weight: bold;")
            self._set_test_buttons_enabled(True)
            if self.app_logger:
                self.app_logger.error(error_msg)
    
    def on_test_progress(self, value):
        """G√®re la mise √† jour de la progression des tests"""
        self.test_progress_bar.setValue(value)
    
    def on_test_output(self, message, level):
        """G√®re la sortie des tests"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Couleurs selon le niveau
        color_map = {
            "INFO": "black",
            "WARNING": "orange",
            "ERROR": "red",
            "SUCCESS": "green"
        }
        color = color_map.get(level, "black")
        
        # Formatage du message
        formatted_message = f'<span style="color: {color}">[{timestamp}] {message}</span>'
        self.tests_output.append(formatted_message)
        
        # Auto-scroll vers le bas
        scrollbar = self.tests_output.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def on_test_finished(self, results):
        """G√®re la fin des tests"""
        self.test_progress_bar.setVisible(False)
        self._set_test_buttons_enabled(True)
        
        # Analyser les r√©sultats
        total_tests = len(results)
        successful_tests = sum(1 for r in results.values() if r.get('success', False))
        failed_tests = total_tests - successful_tests
        
        if failed_tests == 0:
            self.tests_status_label.setText(f"‚úÖ Tests termin√©s: {successful_tests}/{total_tests} r√©ussis")
            self.tests_status_label.setStyleSheet("color: green; font-weight: bold;")
            self.on_test_output("üéâ Tous les tests ont r√©ussi !", "SUCCESS")
        else:
            self.tests_status_label.setText(f"‚ö†Ô∏è Tests termin√©s: {successful_tests}/{total_tests} r√©ussis, {failed_tests} √©checs")
            self.tests_status_label.setStyleSheet("color: orange; font-weight: bold;")
            self.on_test_output(f"‚ö†Ô∏è {failed_tests} test(s) ont √©chou√©", "WARNING")
        
        # Afficher un r√©sum√© des r√©sultats
        self.on_test_output("", "INFO")
        self.on_test_output("=== R√âSUM√â DES TESTS ===", "INFO")
        for test_name, result in results.items():
            status = "‚úÖ" if result.get('success', False) else "‚ùå"
            self.on_test_output(f"{status} {test_name}", "INFO")
        
        if self.app_logger:
            self.app_logger.info(f"Tests termin√©s: {successful_tests}/{total_tests} r√©ussis")
    
    def on_test_error(self, error_msg):
        """G√®re les erreurs des tests"""
        self.test_progress_bar.setVisible(False)
        self._set_test_buttons_enabled(True)
        self.tests_status_label.setText("‚ùå Erreur lors des tests")
        self.tests_status_label.setStyleSheet("color: red; font-weight: bold;")
        self.on_test_output(f"‚ùå Erreur: {error_msg}", "ERROR")
        
        if self.app_logger:
            self.app_logger.error(f"Erreur lors des tests: {error_msg}")
    
    def _set_test_buttons_enabled(self, enabled):
        """Active/d√©sactive les boutons de test"""
        buttons = [
            self.install_deps_btn, self.all_tests_btn, self.unit_tests_btn,
            self.integration_tests_btn, self.performance_tests_btn, self.regression_tests_btn
        ]
        for btn in buttons:
            btn.setEnabled(enabled)
    
    def clear_tests_output(self):
        """Efface la sortie des tests"""
        self.tests_output.clear()
        self.on_test_output("Sortie des tests effac√©e", "INFO")
    
    def save_tests_output(self):
        """Sauvegarde la sortie des tests"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Sauvegarder la sortie des tests", "", "Fichiers texte (*.txt)"
            )
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.tests_output.toPlainText())
                self.on_test_output(f"Sortie des tests sauvegard√©e dans {filename}", "INFO")
                if self.app_logger:
                    self.app_logger.info(f"Sortie des tests sauvegard√©e dans {filename}")
        except Exception as e:
            error_msg = f"Erreur lors de la sauvegarde: {e}"
            self.on_test_output(f"‚ùå {error_msg}", "ERROR")
            if self.app_logger:
                self.app_logger.error(error_msg)
    
    def load_api_key_from_config(self):
        """Charge la cl√© API depuis la configuration ou le stockage s√©curis√©"""
        try:
            # Essayer d'abord le stockage s√©curis√©
            if SECURE_STORAGE_AVAILABLE:
                api_key = secure_storage.load_api_key("openrouter")
                if api_key:
                    self.api_key_input.setText(api_key)
                    if self.app_logger:
                        self.app_logger.info("Cl√© API OpenRouter charg√©e depuis le stockage s√©curis√©")
                    return
            
            # Fallback vers la configuration classique
            if hasattr(self, 'openrouter_api_key_input'):
                api_key = self.openrouter_api_key_input.text()
                if api_key:
                    self.api_key_input.setText(api_key)
                    if self.app_logger:
                        self.app_logger.info("Cl√© API OpenRouter charg√©e depuis la configuration")
        except Exception as e:
            if self.app_logger:
                self.app_logger.error(f"Erreur lors du chargement de la cl√© API: {str(e)}")
    
    def refresh_openrouter_balance(self):
        """R√©cup√®re et affiche le solde OpenRouter"""
        try:
            api_key = self.api_key_input.text().strip()
            if not api_key:
                QMessageBox.warning(self, "Cl√© API manquante", 
                                   "Veuillez entrer votre cl√© API OpenRouter")
                return
            
            self.cost_status_label.setText("R√©cup√©ration du solde en cours...")
            self.cost_status_label.setStyleSheet("color: orange; font-weight: bold;")
            self.refresh_balance_btn.setEnabled(False)
            
            # Cr√©er un thread pour la requ√™te API
            self.balance_thread = BalanceThread(api_key)
            self.balance_thread.balance_ready.connect(self.on_balance_ready)
            self.balance_thread.balance_error.connect(self.on_balance_error)
            self.balance_thread.start()
            
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors de la r√©cup√©ration du solde: {str(e)}")
            if self.app_logger:
                self.app_logger.error(f"Erreur lors de la r√©cup√©ration du solde: {str(e)}")
    
    def on_balance_ready(self, balance_data):
        """Appel√© quand le solde est r√©cup√©r√© avec succ√®s"""
        try:
            print(f"üí∞ Balance data received: {balance_data}")
            
            # Mettre √† jour l'interface avec gestion des valeurs None/0
            balance = balance_data.get('balance', 0)
            credits = balance_data.get('credits', 0)
            total_spent = balance_data.get('total_spent', 0)
            
            # Formatage des valeurs
            if balance is not None:
                self.balance_value.setText(f"{balance:.2f} cr√©dits")
                if balance > 20:
                    self.balance_value.setStyleSheet("font-weight: bold; color: green;")
                elif balance > 5:
                    self.balance_value.setStyleSheet("font-weight: bold; color: orange;")
                else:
                    self.balance_value.setStyleSheet("font-weight: bold; color: red;")
            else:
                self.balance_value.setText("Non disponible")
                self.balance_value.setStyleSheet("font-weight: bold; color: orange;")
            
            if credits is not None:
                self.credits_value.setText(f"{credits:.2f} cr√©dits")
                if credits < 50:
                    self.credits_value.setStyleSheet("font-weight: bold; color: green;")
                elif credits < 80:
                    self.credits_value.setStyleSheet("font-weight: bold; color: orange;")
                else:
                    self.credits_value.setStyleSheet("font-weight: bold; color: red;")
            else:
                self.credits_value.setText("Non disponible")
                self.credits_value.setStyleSheet("font-weight: bold; color: orange;")
            
            if total_spent is not None:
                self.total_spent_value.setText(f"{total_spent:.0f} cr√©dits")
                self.total_spent_value.setStyleSheet("font-weight: bold; color: blue;")
            else:
                self.total_spent_value.setText("Non disponible")
                self.total_spent_value.setStyleSheet("font-weight: bold; color: orange;")
            
            # Message de statut
            if balance > 0 or credits > 0:
                self.cost_status_label.setText("Solde r√©cup√©r√© avec succ√®s")
                self.cost_status_label.setStyleSheet("color: green; font-weight: bold;")
            else:
                self.cost_status_label.setText("Solde r√©cup√©r√© mais montant √† 0")
                self.cost_status_label.setStyleSheet("color: orange; font-weight: bold;")
            
            self.refresh_balance_btn.setEnabled(True)
            
            if self.app_logger:
                self.app_logger.info(f"Solde OpenRouter r√©cup√©r√©: balance=${balance:.4f}, credits={credits:.2f}, spent=${total_spent:.4f}")
                
        except Exception as e:
            print(f"‚ùå Erreur dans on_balance_ready: {str(e)}")
            import traceback
            traceback.print_exc()
            if self.app_logger:
                self.app_logger.error(f"Erreur lors de l'affichage du solde: {str(e)}")
    
    def on_balance_error(self, error_msg):
        """Appel√© en cas d'erreur lors de la r√©cup√©ration du solde"""
        QMessageBox.critical(self, "Erreur", f"Erreur lors de la r√©cup√©ration du solde: {error_msg}")
        self.cost_status_label.setText("Erreur lors de la r√©cup√©ration du solde")
        self.cost_status_label.setStyleSheet("color: red; font-weight: bold;")
        self.refresh_balance_btn.setEnabled(True)
        
        if self.app_logger:
            self.app_logger.error(f"Erreur lors de la r√©cup√©ration du solde: {error_msg}")
    
    def calculate_cost(self):
        """Calcule le co√ªt estim√© pour un devis"""
        try:
            model = self.model_combo.currentText()
            tokens = self.tokens_input.value()
            
            # Prix par 1M tokens pour diff√©rents mod√®les (approximatifs)
            pricing = {
                "anthropic/claude-3.5-sonnet": {"input": 3.0, "output": 15.0},
                "anthropic/claude-3-opus": {"input": 15.0, "output": 75.0},
                "openai/gpt-4o": {"input": 5.0, "output": 15.0},
                "openai/gpt-4o-mini": {"input": 0.15, "output": 0.6},
                "meta-llama/llama-3.1-8b-instruct": {"input": 0.2, "output": 0.2},
                "meta-llama/llama-3.1-70b-instruct": {"input": 0.8, "output": 0.8}
            }
            
            if model in pricing:
                # Estimation: 70% input, 30% output
                input_tokens = int(tokens * 0.7)
                output_tokens = tokens - input_tokens
                
                input_cost = (input_tokens / 1_000_000) * pricing[model]["input"]
                output_cost = (output_tokens / 1_000_000) * pricing[model]["output"]
                total_cost = input_cost + output_cost
                
                self.cost_result_value.setText(f"${total_cost:.6f}")
                self.cost_result_value.setStyleSheet("font-weight: bold; color: purple;")
                
                # Ajouter √† l'historique
                self.add_to_history(model, tokens, total_cost)
                
                if self.app_logger:
                    self.app_logger.info(f"Co√ªt calcul√© pour {model}: ${total_cost:.6f} ({tokens} tokens)")
            else:
                QMessageBox.warning(self, "Mod√®le non support√©", 
                                   f"Le mod√®le {model} n'est pas dans la liste des prix connus")
                
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors du calcul du co√ªt: {str(e)}")
            if self.app_logger:
                self.app_logger.error(f"Erreur lors du calcul du co√ªt: {str(e)}")
    
    def add_to_history(self, model, tokens, cost):
        """Ajoute une entr√©e √† l'historique des co√ªts"""
        try:
            # Ajouter une nouvelle ligne au tableau
            row = self.history_table.rowCount()
            self.history_table.insertRow(row)
            
            # Remplir les colonnes
            self.history_table.setItem(row, 0, QTableWidgetItem(datetime.now().strftime("%Y-%m-%d %H:%M")))
            self.history_table.setItem(row, 1, QTableWidgetItem(model))
            self.history_table.setItem(row, 2, QTableWidgetItem(str(tokens)))
            self.history_table.setItem(row, 3, QTableWidgetItem(f"${cost:.6f}"))
            
            # Calculer le total cumul√©
            total = 0
            for i in range(self.history_table.rowCount()):
                cost_item = self.history_table.item(i, 3)
                if cost_item:
                    cost_text = cost_item.text().replace("$", "")
                    try:
                        total += float(cost_text)
                    except ValueError:
                        pass
            
            self.history_table.setItem(row, 4, QTableWidgetItem(f"${total:.6f}"))
            
        except Exception as e:
            if self.app_logger:
                self.app_logger.error(f"Erreur lors de l'ajout √† l'historique: {str(e)}")
    
    def load_cost_history(self):
        """Charge l'historique des co√ªts depuis un fichier"""
        try:
            filename, _ = QFileDialog.getOpenFileName(
                self, "Charger l'historique des co√ªts", 
                "", "Fichiers CSV (*.csv);;Tous les fichiers (*)"
            )
            
            if filename:
                self.history_table.setRowCount(0)  # Vider le tableau
                
                with open(filename, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip():
                            parts = line.strip().split(',')
                            if len(parts) >= 4:
                                row = self.history_table.rowCount()
                                self.history_table.insertRow(row)
                                
                                for i, part in enumerate(parts[:4]):
                                    self.history_table.setItem(row, i, QTableWidgetItem(part))
                
                QMessageBox.information(self, "Historique charg√©", 
                                       f"Historique des co√ªts charg√© depuis {filename}")
                
                if self.app_logger:
                    self.app_logger.info(f"Historique des co√ªts charg√© depuis {filename}")
                    
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors du chargement de l'historique: {str(e)}")
            if self.app_logger:
                self.app_logger.error(f"Erreur lors du chargement de l'historique: {str(e)}")
    
    def clear_cost_history(self):
        """Efface l'historique des co√ªts"""
        try:
            reply = QMessageBox.question(
                self, "Confirmation", 
                "√ätes-vous s√ªr de vouloir effacer tout l'historique des co√ªts ?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                self.history_table.setRowCount(0)
                
                if self.app_logger:
                    self.app_logger.info("Historique des co√ªts effac√©")
                    
        except Exception as e:
            if self.app_logger:
                self.app_logger.error(f"Erreur lors de l'effacement de l'historique: {str(e)}")
    
    def open_wallet(self):
        """Ouvre le portefeuille OpenRouter dans le navigateur"""
        try:
            import webbrowser
            
            # URL du portefeuille OpenRouter
            wallet_url = "https://openrouter.ai/account"
            
            # Ouvrir dans le navigateur par d√©faut
            webbrowser.open(wallet_url)
            
            if self.app_logger:
                self.app_logger.info("Portefeuille OpenRouter ouvert dans le navigateur")
                
            # Message de confirmation
            QMessageBox.information(
                self, 
                "Portefeuille Ouvert", 
                "Le portefeuille OpenRouter a √©t√© ouvert dans votre navigateur.\n\n"
                "Vous pouvez y voir votre vrai solde et g√©rer vos paiements."
            )
            
        except Exception as e:
            error_msg = f"Erreur lors de l'ouverture du portefeuille: {str(e)}"
            QMessageBox.critical(self, "Erreur", error_msg)
            if self.app_logger:
                self.app_logger.error(error_msg)
    
    def open_recharge(self):
        """Ouvre la page de recharge OpenRouter dans le navigateur"""
        try:
            import webbrowser
            
            # URL de recharge OpenRouter
            recharge_url = "https://openrouter.ai/account/billing"
            
            # Ouvrir dans le navigateur par d√©faut
            webbrowser.open(recharge_url)
            
            if self.app_logger:
                self.app_logger.info("Page de recharge OpenRouter ouverte dans le navigateur")
                
            # Message de confirmation
            QMessageBox.information(
                self, 
                "Recharge Ouverte", 
                "La page de recharge OpenRouter a √©t√© ouverte dans votre navigateur.\n\n"
                "Vous pouvez y ajouter des fonds √† votre compte."
            )
            
        except Exception as e:
            error_msg = f"Erreur lors de l'ouverture de la page de recharge: {str(e)}"
            QMessageBox.critical(self, "Erreur", error_msg)
            if self.app_logger:
                self.app_logger.error(error_msg)
    
    def save_logs(self):
        """Sauvegarde les logs dans un fichier"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Sauvegarder les logs", "", "Fichiers texte (*.txt)"
            )
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.logs_browser.toPlainText())
                self.app_logger.info(f"Logs sauvegard√©s dans {filename}")
                QMessageBox.information(self, "Succ√®s", f"Logs sauvegard√©s dans {filename}")
        except Exception as e:
            self.app_logger.error(f"Erreur lors de la sauvegarde des logs: {e}")
            QMessageBox.critical(self, "Erreur", f"Impossible de sauvegarder les logs: {e}")
    
    def select_files(self):
        """S√©lectionne les fichiers PDF"""
        try:
            files, _ = QFileDialog.getOpenFileNames(
                self,
                "S√©lectionner les fichiers PDF",
                "",
                "PDF files (*.pdf)"
            )
            if files:
                self.selected_files = files
                self.file_label.setText(f"{len(files)} fichier(s) s√©lectionn√©(s):\n" + 
                                      "\n".join([os.path.basename(f) for f in files]))
                self.clear_files_btn.setEnabled(True)
                self.process_btn.setEnabled(True)
                if hasattr(self, 'app_logger') and self.app_logger:
                    self.app_logger.info(f"Fichiers s√©lectionn√©s: {len(files)} fichiers")
                # Nettoyer les anciens champs commande dans cmd_layout
                if hasattr(self, 'commande_lineedits'):
                    self.commande_lineedits.clear()
                else:
                    self.commande_lineedits = []
                # Supprimer tous les widgets du layout commande client
                while self.cmd_layout.count():
                    item = self.cmd_layout.takeAt(0)
                    widget = item.widget()
                    if widget is not None:
                        widget.deleteLater()
                    else:
                        sublayout = item.layout()
                        if sublayout is not None:
                            while sublayout.count():
                                subitem = sublayout.takeAt(0)
                                subwidget = subitem.widget()
                                if subwidget is not None:
                                    subwidget.deleteLater()
                            del sublayout
                # Cr√©er un champ par fichier dans cmd_layout
                for file in self.selected_files:
                    hbox = QHBoxLayout()
                    label = QLabel(f"Commande/Client pour {os.path.basename(file)} :")
                    lineedit = QLineEdit()
                    lineedit.setPlaceholderText("Nom du client")
                    hbox.addWidget(label)
                    hbox.addWidget(lineedit)
                    self.cmd_layout.addLayout(hbox)
                    self.commande_lineedits.append(lineedit)
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de la s√©lection des fichiers: {e}")
            QMessageBox.critical(self, "Erreur", f"Erreur lors de la s√©lection des fichiers: {e}")
    
    def clear_files(self):
        """Efface la s√©lection de fichiers"""
        try:
            self.selected_files = []
            self.file_label.setText("Aucun fichier s√©lectionn√©")
            self.clear_files_btn.setEnabled(False)
            self.process_btn.setEnabled(False)
            # Nettoyer les champs commande
            if hasattr(self, 'commande_fields_layout'):
                for i in reversed(range(self.commande_fields_layout.count())):
                    item = self.commande_fields_layout.itemAt(i)
                    widget = item.widget()
                    if widget is not None:
                        widget.deleteLater()
            self.commande_lineedits = []
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info("S√©lection de fichiers effac√©e")
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de l'effacement des fichiers: {e}")
    
    def on_provider_changed(self, provider):
        """G√®re le changement de provider LLM"""
        try:
            # Sauvegarder le provider dans la configuration
            config.set_current_llm_provider(provider)
            # Mettre √† jour la barre de statut
            self.update_provider_status()
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info(f"Provider LLM chang√©: {provider}")
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors du changement de provider: {e}")
    
    def process_files(self):
        """Traite les fichiers s√©lectionn√©s"""
        try:
            if not self.selected_files:
                QMessageBox.warning(self, "Attention", "Aucun fichier s√©lectionn√©")
                return
            
            # Validation des fichiers
            for file_path in self.selected_files:
                if not os.path.exists(file_path):
                    raise FileNotFoundError(f"Fichier introuvable: {file_path}")
                if not file_path.lower().endswith('.pdf'):
                    raise ValueError(f"Fichier non PDF: {file_path}")
            
            # R√©cup√©ration des param√®tres
            enrich_llm = self.enrich_llm_checkbox.isChecked()
            llm_provider = self.llm_provider_combo.currentText()
            openrouter_api_key = self.api_key_input.text().strip() if llm_provider == "openrouter" else None
            semaine_prod = self.semaine_spin.value()
            annee_prod = self.annee_spin.value()
            # R√©cup√©rer un num√©ro de commande par fichier
            commande_client = [le.text().strip() for le in getattr(self, 'commande_lineedits', [])]
            if len(commande_client) != len(self.selected_files):
                raise ValueError("Veuillez saisir un num√©ro de commande pour chaque fichier.")
            if any(not cc for cc in commande_client):
                raise ValueError("Tous les champs Commande/Client doivent √™tre remplis.")
            
            # Sauvegarde de la configuration
            try:
                config.set_last_semaine(semaine_prod)
                config.set_last_annee(annee_prod)
                config.set_last_commande_client(self.commande_input.text())
                if llm_provider == "openrouter" and openrouter_api_key:
                    config.set_openrouter_api_key(openrouter_api_key)
                if hasattr(self, 'app_logger') and self.app_logger:
                    self.app_logger.info("Configuration sauvegard√©e")
            except Exception as e:
                if hasattr(self, 'app_logger') and self.app_logger:
                    self.app_logger.warning(f"Erreur lors de la sauvegarde de la configuration: {e}")
            
            # Validation LLM
            if llm_provider == "openrouter":
                if not openrouter_api_key:
                    raise ValueError("Cl√© API OpenRouter requise")
                # Nettoyer la cl√© API
                openrouter_api_key = openrouter_api_key.strip()
                if not openrouter_api_key.startswith("sk-or-"):
                    raise ValueError("Format de cl√© API OpenRouter invalide (doit commencer par 'sk-or-')")
            
            # R√©initialisation des r√©sultats accumul√©s
            self.all_results = []
            self.all_configurations = []
            self.all_preimport = []
            self.all_excel_files = []
            
            # D√©sactivation de l'interface
            self.process_btn.setEnabled(False)
            self.stop_action.setEnabled(True)
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
            self.progress_status_label.setVisible(True)
            self.progress_status_label.setText("Initialisation...")
            self.progress_status_label.setStyleSheet("color: blue; font-weight: bold;")
            
            # Mise √† jour du statut
            self.update_status_indicator("processing")
            
            # Cr√©ation et lancement du thread de traitement
            self.processing_thread = ProcessingThread(
                self.selected_files, enrich_llm, llm_provider, openrouter_api_key,
                semaine_prod, annee_prod, commande_client
            )
            self.processing_thread.progress_updated.connect(self.on_progress_updated)
            self.processing_thread.result_ready.connect(self.display_results)
            self.processing_thread.error_occurred.connect(self.handle_error)
            self.processing_thread.log_message.connect(self.log_message_to_text_browser)
            self.processing_thread.finished.connect(self.on_processing_finished)
            self.processing_thread.start()
            
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info(f"D√©but du traitement de {len(self.selected_files)} fichiers")
            
        except FileNotFoundError as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Fichier introuvable: {e}")
            QMessageBox.critical(self, "Erreur de fichier", str(e))
        except ValueError as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur de validation: {e}")
            QMessageBox.critical(self, "Erreur de validation", str(e))
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors du lancement du traitement: {e}")
            QMessageBox.critical(self, "Erreur", f"Erreur lors du lancement du traitement:\n{str(e)}")
    
    def on_progress_updated(self, value):
        """G√®re la mise √† jour de la progression"""
        try:
            self.progress_bar.setValue(value)
            
            # Mise √† jour du label de statut selon la progression
            if value <= 10:
                status_text = "Initialisation..."
                color = "blue"
            elif value <= 20:
                status_text = "Extraction du texte..."
                color = "orange"
            elif value <= 40:
                status_text = "Analyse du contenu..."
                color = "purple"
            elif value <= 60:
                if hasattr(self, 'enrich_llm_checkbox') and self.enrich_llm_checkbox.isChecked():
                    status_text = "Enrichissement IA..."
                    color = "magenta"
                else:
                    status_text = "Traitement des donn√©es..."
                    color = "purple"
            elif value <= 80:
                status_text = "G√©n√©ration des configurations..."
                color = "darkgreen"
            elif value <= 95:
                status_text = "Finalisation..."
                color = "green"
            else:
                status_text = "Termin√© !"
                color = "darkgreen"
            
            self.progress_status_label.setText(status_text)
            self.progress_status_label.setStyleSheet(f"color: {color}; font-weight: bold;")
            
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de la mise √† jour de la progression: {e}")
    
    def display_results(self, result):
        """Affiche les r√©sultats du traitement"""
        try:
            # Validation du r√©sultat
            if not isinstance(result, dict):
                raise ValueError("Format de r√©sultat invalide")
            
            # Accumulation des r√©sultats
            self.all_results.append(result)
            self.all_configurations.extend(result.get('configurations_matelas', []))
            self.all_configurations_sommiers.extend(result.get('configurations_sommiers', []))
            self.all_preimport.extend(result.get('pre_import', []))
            self.all_excel_files.extend(result.get('fichiers_excel', []))
            
            # Logs de d√©bogage
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info(f"DEBUG: Ajout du r√©sultat pour {result.get('filename', 'N/A')}")
                self.app_logger.info(f"DEBUG: Configurations matelas dans ce r√©sultat: {len(result.get('configurations_matelas', []))}")
                self.app_logger.info(f"DEBUG: Configurations sommiers dans ce r√©sultat: {len(result.get('configurations_sommiers', []))}")
                self.app_logger.info(f"DEBUG: Total configurations matelas accumul√©es: {len(self.all_configurations)}")
                self.app_logger.info(f"DEBUG: Total configurations sommiers accumul√©es: {len(self.all_configurations_sommiers)}")
                self.app_logger.info(f"DEBUG: Total r√©sultats accumul√©s: {len(self.all_results)}")
            
            # Mise √† jour de l'affichage avec tous les r√©sultats
            self.update_display()
            
            filename = result.get('filename', 'N/A')
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info(f"R√©sultats affich√©s pour {filename}")
            
        except ValueError as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Format de r√©sultat invalide: {e}")
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de l'affichage des r√©sultats: {e}")
    
    def update_display(self):
        """Met √† jour l'affichage avec tous les r√©sultats accumul√©s"""
        try:
            # Logs de d√©bogage
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info(f"DEBUG: update_display appel√©")
                self.app_logger.info(f"DEBUG: Nombre de r√©sultats: {len(self.all_results)}")
                self.app_logger.info(f"DEBUG: Nombre de configurations matelas: {len(self.all_configurations)}")
                self.app_logger.info(f"DEBUG: Nombre de configurations sommiers: {len(self.all_configurations_sommiers)}")
                self.app_logger.info(f"DEBUG: Nombre de pr√©-import: {len(self.all_preimport)}")
                self.app_logger.info(f"DEBUG: Nombre de fichiers Excel: {len(self.all_excel_files)}")
            
            # Onglet R√©sum√©
            summary = f"<h3>R√©sultats globaux ({len(self.all_results)} fichier(s) trait√©(s))</h3>"
            
            total_configs_matelas = len(self.all_configurations)
            total_configs_sommiers = len(self.all_configurations_sommiers)
            total_preimport = len(self.all_preimport)
            total_excel = len(self.all_excel_files)
            
            summary += f"<p><strong>üìä Total configurations matelas:</strong> {total_configs_matelas}</p>"
            summary += f"<p><strong>üõèÔ∏è Total configurations sommiers:</strong> {total_configs_sommiers}</p>"
            summary += f"<p><strong>üìã Total √©l√©ments pr√©-import:</strong> {total_preimport}</p>"
            summary += f"<p><strong>üìÅ Total fichiers Excel g√©n√©r√©s:</strong> {total_excel}</p>"
            
            summary += "<h4>D√©tail par fichier:</h4>"
            for i, result in enumerate(self.all_results, 1):
                filename = result.get('filename', 'N/A')
                status = result.get('status', 'N/A')
                configs = len(result.get('configurations_matelas', []))
                preimport = len(result.get('pre_import', []))
                excel = len(result.get('fichiers_excel', []))
                
                summary += f"<p><strong>{i}. {filename}</strong><br>"
                summary += f"   Statut: {status}<br>"
                summary += f"   Configurations: {configs}<br>"
                summary += f"   Pr√©-import: {preimport}<br>"
                summary += f"   Excel: {excel}</p>"
            
            # Ajouter les liens hypertextes dans l'onglet R√©sum√©
            if self.all_excel_files:
                summary += "<h4>üìÅ Fichiers Excel g√©n√©r√©s:</h4>"
                for fichier in self.all_excel_files:
                    # Cr√©er un lien cliquable
                    file_path = os.path.abspath(fichier)
                    if os.path.exists(file_path):
                        summary += f"<p>üîó <a href='file://{file_path}'>{os.path.basename(fichier)}</a></p>"
                    else:
                        summary += f"<p>‚ö†Ô∏è {os.path.basename(fichier)} (fichier non trouv√©)</p>"
                summary += "<p><em>üí° Cliquez sur les liens pour ouvrir les fichiers Excel directement.</em></p>"
            
            # Configurer le QTextBrowser pour supporter les liens hypertextes
            self.summary_text.setText(summary)
            
            # Onglet Configurations
            self.display_configurations_matelas(self.all_configurations)
            self.display_configurations_sommiers(self.all_configurations_sommiers)
            
            # Onglet Pr√©-import
            self.display_preimport(self.all_preimport)
            
            # Onglet JSON
            try:
                json_text = json.dumps(self.all_results, indent=2, ensure_ascii=False)
                self.json_text.setText(json_text)
            except Exception as e:
                if hasattr(self, 'app_logger') and self.app_logger:
                    self.app_logger.error(f"Erreur lors de la s√©rialisation JSON: {e}")
                self.json_text.setText("Erreur lors de la s√©rialisation JSON")
            
            # Onglet Fichiers Excel
            if self.all_excel_files:
                excel_info = f"Fichiers Excel g√©n√©r√©s ({len(self.all_excel_files)} total):\n\n"
                for fichier in self.all_excel_files:
                    excel_info += f"‚úÖ {fichier}\n"
            else:
                excel_info = "Aucun fichier Excel g√©n√©r√©"
            self.excel_text.setText(excel_info)
            
            # S√©lection de l'onglet r√©sum√©
            self.tabs.setCurrentIndex(0)
            
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de la mise √† jour de l'affichage: {e}")
            QMessageBox.warning(self, "Attention", f"Erreur lors de la mise √† jour de l'affichage: {e}")
    

    def open_excel_file(self, url):
        """Ouvre un fichier Excel quand on clique sur un lien hypertexte"""
        try:
            # Extraire le chemin du fichier depuis l'URL
            file_path = url.toString()
            if file_path.startswith('file://'):
                file_path = file_path[7:]  # Enlever le pr√©fixe 'file://'
            
            # V√©rifier que le fichier existe
            if not os.path.exists(file_path):
                QMessageBox.warning(self, "Fichier non trouv√©", f"Le fichier {os.path.basename(file_path)} n'existe pas.")
                return
            
            # Ouvrir le fichier avec l'application par d√©faut
            import subprocess
            import platform
            
            system = platform.system()
            if system == "Darwin":  # macOS
                subprocess.run(["open", file_path])
            elif system == "Windows":
                os.startfile(file_path)
            else:  # Linux
                subprocess.run(["xdg-open", file_path])
            
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info(f"Fichier Excel ouvert: {file_path}")
                
            # S'assurer que l'affichage de l'onglet R√©sum√© reste inchang√©
            # en for√ßant une mise √† jour de l'affichage
            self.update_display()
                
        except Exception as e:
            error_msg = f"Erreur lors de l'ouverture du fichier Excel: {e}"
            QMessageBox.warning(self, "Erreur", error_msg)
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(error_msg)
    
    def display_configurations_matelas(self, configurations):
        """Affiche les configurations matelas dans un tableau d√©di√©"""
        try:
            if not configurations:
                self.matelas_config_table.setRowCount(0)
                self.matelas_config_table.setColumnCount(0)
                return
            
            # Headers sp√©cifiques aux matelas
            headers = ["Fichier", "Index", "Noyau", "Quantit√©", "Dimensions", "Housse", "Mati√®re", "Hauteur", "Fermet√©", "Poign√©es"]
            self.matelas_config_table.setColumnCount(len(headers))
            self.matelas_config_table.setHorizontalHeaderLabels(headers)
            self.matelas_config_table.setRowCount(len(configurations))
            
            for i, config in enumerate(configurations):
                # Fichier source
                filename = "N/A"
                for result in getattr(self, 'all_results', []):
                    if config in result.get('configurations_matelas', []):
                        filename = os.path.basename(result.get('filename', 'N/A'))
                        break
                self.matelas_config_table.setItem(i, 0, QTableWidgetItem(filename))
                
                # Index
                idx = config.get('matelas_index', '')
                self.matelas_config_table.setItem(i, 1, QTableWidgetItem(str(idx)))
                
                # Noyau
                noyau = config.get('noyau', '')
                self.matelas_config_table.setItem(i, 2, QTableWidgetItem(noyau))
                
                # Quantit√©
                self.matelas_config_table.setItem(i, 3, QTableWidgetItem(str(config.get('quantite', ''))))
                
                # Dimensions
                dims = config.get('dimensions', {})
                dim_str = f"{dims.get('largeur', '')}x{dims.get('longueur', '')}" if dims else ""
                self.matelas_config_table.setItem(i, 4, QTableWidgetItem(dim_str))
                
                # Housse
                self.matelas_config_table.setItem(i, 5, QTableWidgetItem(config.get('housse', '')))
                
                # Mati√®re housse
                self.matelas_config_table.setItem(i, 6, QTableWidgetItem(config.get('matiere_housse', '')))
                
                # Hauteur
                self.matelas_config_table.setItem(i, 7, QTableWidgetItem(str(config.get('hauteur', ''))))
                
                # Fermet√©
                self.matelas_config_table.setItem(i, 8, QTableWidgetItem(config.get('fermete', '')))
                
                # Poign√©es
                self.matelas_config_table.setItem(i, 9, QTableWidgetItem(config.get('poignees', '')))
            
            self.matelas_config_table.resizeColumnsToContents()
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de l'affichage des configurations matelas: {e}")

    def display_configurations_sommiers(self, configurations):
        """Affiche les configurations sommiers dans un tableau d√©di√©"""
        try:
            if not configurations:
                self.sommiers_config_table.setRowCount(0)
                self.sommiers_config_table.setColumnCount(0)
                return
            
            # Headers sp√©cifiques aux sommiers
            headers = ["Fichier", "Index", "Type", "Quantit√©", "Dimensions", "Mat√©riau", "Hauteur", "Dans un lit", "Pieds"]
            self.sommiers_config_table.setColumnCount(len(headers))
            self.sommiers_config_table.setHorizontalHeaderLabels(headers)
            self.sommiers_config_table.setRowCount(len(configurations))
            
            for i, config in enumerate(configurations):
                # Fichier source
                filename = "N/A"
                for result in getattr(self, 'all_results', []):
                    if config in result.get('configurations_sommiers', []):
                        filename = os.path.basename(result.get('filename', 'N/A'))
                        break
                self.sommiers_config_table.setItem(i, 0, QTableWidgetItem(filename))
                
                # Index
                idx = config.get('sommier_index', '')
                self.sommiers_config_table.setItem(i, 1, QTableWidgetItem(str(idx)))
                
                # Type
                type_sommier = config.get('type_sommier', '')
                self.sommiers_config_table.setItem(i, 2, QTableWidgetItem(type_sommier))
                
                # Quantit√©
                self.sommiers_config_table.setItem(i, 3, QTableWidgetItem(str(config.get('quantite', ''))))
                
                # Dimensions
                dims = config.get('dimensions', {})
                dim_str = f"{dims.get('largeur', '')}x{dims.get('longueur', '')}" if dims else ""
                self.sommiers_config_table.setItem(i, 4, QTableWidgetItem(dim_str))
                
                # Mat√©riau
                self.sommiers_config_table.setItem(i, 5, QTableWidgetItem(config.get('materiau', '')))
                
                # Hauteur
                self.sommiers_config_table.setItem(i, 6, QTableWidgetItem(str(config.get('hauteur', ''))))
                
                # Dans un lit
                self.sommiers_config_table.setItem(i, 7, QTableWidgetItem(config.get('sommier_dansunlit', '')))
                
                # Pieds
                self.sommiers_config_table.setItem(i, 8, QTableWidgetItem(config.get('sommier_pieds', '')))
            
            self.sommiers_config_table.resizeColumnsToContents()
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de l'affichage des configurations sommiers: {e}")

    def display_preimport(self, preimport_data):
        """Affiche les donn√©es de pr√©-import dans un tableau combin√© matelas + sommiers"""
        try:
            if not preimport_data:
                self.preimport_table.setRowCount(0)
                self.preimport_table.setColumnCount(0)
                return
            
            # Headers combin√©s pour matelas et sommiers
            headers = ["Type", "Client", "Commande", "Semaine", "Noyau/Type", "Quantit√©", "Dimensions", "Hauteur", "Housse/Mat√©riau"]
            self.preimport_table.setColumnCount(len(headers))
            self.preimport_table.setHorizontalHeaderLabels(headers)
            
            # Donn√©es
            self.preimport_table.setRowCount(len(preimport_data))
            for i, item in enumerate(preimport_data):
                try:
                    # Type d'article
                    type_article = item.get('type_article', 'matelas')
                    self.preimport_table.setItem(i, 0, QTableWidgetItem("Matelas" if type_article == 'matelas' else "Sommier"))
                    
                    # Donn√©es client communes
                    self.preimport_table.setItem(i, 1, QTableWidgetItem(item.get('Client_D1', '')))
                    self.preimport_table.setItem(i, 2, QTableWidgetItem(item.get('numero_D2', '')))
                    self.preimport_table.setItem(i, 3, QTableWidgetItem(item.get('semaine_D5', '')))
                    
                    # Noyau (matelas) ou Type (sommier)
                    if type_article == 'matelas':
                        noyau_type = item.get('noyau', '')
                    else:
                        noyau_type = item.get('Type_Sommier_D20', '')
                    self.preimport_table.setItem(i, 4, QTableWidgetItem(noyau_type))
                    
                    # Quantit√©
                    quantite = item.get('quantite', '') or item.get('Quantite_D40', '')
                    self.preimport_table.setItem(i, 5, QTableWidgetItem(str(quantite)))
                    
                    # Dimensions
                    if type_article == 'matelas':
                        # Dimensions matelas (jumeaux ou 1 pi√®ce)
                        dims = item.get('jumeaux_D10', '') or item.get('1piece_D11', '')
                    else:
                        # Dimensions sommiers
                        dims = item.get('Dimensions_D35', '')
                    self.preimport_table.setItem(i, 6, QTableWidgetItem(dims))
                    
                    # Hauteur
                    if type_article == 'matelas':
                        hauteur = item.get('Hauteur_D22', '')
                    else:
                        hauteur = item.get('Hauteur_D30', '')
                    self.preimport_table.setItem(i, 7, QTableWidgetItem(str(hauteur)))
                    
                    # Housse (matelas) ou Mat√©riau (sommier)
                    if type_article == 'matelas':
                        # Type de housse pour matelas
                        housse_type = ""
                        if item.get('HSimple_polyester_C13') == 'X': housse_type = "Simple Polyester"
                        elif item.get('HSimple_tencel_C14') == 'X': housse_type = "Simple Tencel"
                        elif item.get('Hmat_polyester_C17') == 'X': housse_type = "Matelass√©e Polyester"
                        elif item.get('Hmat_tencel_C18') == 'X': housse_type = "Matelass√©e Tencel"
                        elif item.get('Hmat_luxe3D_C19') == 'X': housse_type = "Matelass√©e Luxe 3D"
                        self.preimport_table.setItem(i, 8, QTableWidgetItem(housse_type))
                    else:
                        # Mat√©riau pour sommiers
                        materiau = item.get('Materiau_D25', '')
                        self.preimport_table.setItem(i, 8, QTableWidgetItem(materiau))
                    
                except Exception as e:
                    if hasattr(self, 'app_logger') and self.app_logger:
                        self.app_logger.error(f"Erreur lors de l'affichage du pr√©-import {i}: {e}")
                    # Remplir avec des valeurs par d√©faut en cas d'erreur
                    for j in range(9):
                        self.preimport_table.setItem(i, j, QTableWidgetItem("Erreur"))
            
            self.preimport_table.resizeColumnsToContents()
            
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de l'affichage du pr√©-import: {e}")
    
    def clear_results(self):
        """Efface tous les r√©sultats affich√©s"""
        try:
            self.all_results = []
            self.all_configurations = []
            self.all_configurations_sommiers = []
            self.all_preimport = []
            self.all_excel_files = []
            
            # Effacer l'affichage
            self.summary_text.clear()
            self.matelas_config_table.setRowCount(0)
            self.matelas_config_table.setColumnCount(0)
            self.sommiers_config_table.setRowCount(0)
            self.sommiers_config_table.setColumnCount(0)
            self.preimport_table.setRowCount(0)
            self.preimport_table.setColumnCount(0)
            self.json_text.clear()
            self.excel_text.clear()
            
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info("Tous les r√©sultats ont √©t√© effac√©s")
            QMessageBox.information(self, "R√©sultats effac√©s", "Tous les r√©sultats ont √©t√© effac√©s.")
            
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de l'effacement des r√©sultats: {e}")
            QMessageBox.critical(self, "Erreur", f"Erreur lors de l'effacement des r√©sultats: {e}")
    
    def handle_error(self, error_msg):
        """G√®re les erreurs de traitement"""
        try:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur de traitement: {error_msg}")
            self.update_status_indicator("error")
            QMessageBox.critical(self, "Erreur", f"Erreur lors du traitement:\n{error_msg}")
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de la gestion d'erreur: {e}")
    
    def on_processing_finished(self):
        """Appel√© quand le traitement est termin√©"""
        try:
            self.progress_bar.setVisible(False)
            self.progress_status_label.setVisible(False)
            self.process_btn.setEnabled(True)
            self.stop_action.setEnabled(False)
            
            # Mise √† jour du statut selon le r√©sultat
            if self.all_results:
                self.update_status_indicator("success")
                self.statusBar().showMessage('Traitement termin√© avec succ√®s')
            else:
                self.update_status_indicator("warning")
                self.statusBar().showMessage('Traitement termin√© sans r√©sultats')
            
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.info("Traitement termin√©")
            
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de la finalisation du traitement: {e}")
            else:
                print(f"Erreur lors de la finalisation du traitement: {e}")
    
    def stop_processing(self):
        """Arr√™te le traitement en cours"""
        try:
            if self.processing_thread and self.processing_thread.isRunning():
                self.processing_thread.terminate()
                self.processing_thread.wait()
                self.on_processing_finished()
                if hasattr(self, 'app_logger') and self.app_logger:
                    self.app_logger.info("Traitement arr√™t√© par l'utilisateur")
                QMessageBox.information(self, "Information", "Traitement arr√™t√©")
        except Exception as e:
            if hasattr(self, 'app_logger') and self.app_logger:
                self.app_logger.error(f"Erreur lors de l'arr√™t du traitement: {e}")
            QMessageBox.critical(self, "Erreur", f"Erreur lors de l'arr√™t du traitement: {e}")
    
    def show_tests_tab(self):
        """Affiche l'onglet des tests automatis√©s"""
        try:
            # Basculer vers l'onglet Tests
            tests_index = self.tabs.indexOf(self.tests_tab)
            if tests_index >= 0:
                self.tabs.setCurrentIndex(tests_index)
                self.on_test_output("Onglet Tests ouvert", "INFO")
                if self.app_logger:
                    self.app_logger.info("Onglet Tests ouvert via le menu")
            else:
                QMessageBox.warning(self, "Onglet Tests introuvable", 
                                  "L'onglet Tests n'a pas √©t√© trouv√©.")
        except Exception as e:
            error_msg = f"Erreur lors de l'ouverture de l'onglet Tests: {e}"
            QMessageBox.critical(self, "Erreur", error_msg)
            if self.app_logger:
                self.app_logger.error(error_msg)
    
    def show_api_key_manager(self):
        """Affiche le gestionnaire de cl√©s API"""
        try:
            if not SECURE_STORAGE_AVAILABLE:
                QMessageBox.warning(
                    self, 
                    "Stockage S√©curis√© Non Disponible",
                    "Le module de stockage s√©curis√© n'est pas disponible.\n\n"
                    "Pour activer cette fonctionnalit√©, installez la d√©pendance 'cryptography' :\n"
                    "pip install cryptography"
                )
                return
            
            # Ouvrir le dialogue de gestion des cl√©s API
            dialog = ApiKeyManagerDialog(self)
            dialog.exec()
            
            # Recharger la cl√© API depuis le stockage s√©curis√© si n√©cessaire
            self.load_api_key_from_secure_storage()
            
            if self.app_logger:
                self.app_logger.info("Gestionnaire de cl√©s API affich√©")
                
        except Exception as e:
            error_msg = f"Erreur lors de l'affichage du gestionnaire de cl√©s API: {str(e)}"
            self.handle_error(error_msg)
    
    def load_api_key_from_secure_storage(self):
        """Charge la cl√© API OpenRouter depuis le stockage s√©curis√©"""
        try:
            if not SECURE_STORAGE_AVAILABLE:
                return
            
            # Charger la cl√© OpenRouter depuis le stockage s√©curis√©
            api_key = secure_storage.load_api_key("openrouter")
            if api_key:
                self.api_key_input.setText(api_key)
                if self.app_logger:
                    self.app_logger.info("Cl√© API OpenRouter charg√©e depuis le stockage s√©curis√©")
            else:
                if self.app_logger:
                    self.app_logger.debug("Aucune cl√© API OpenRouter trouv√©e dans le stockage s√©curis√©")
                    
        except Exception as e:
            if self.app_logger:
                self.app_logger.error(f"Erreur lors du chargement de la cl√© API depuis le stockage s√©curis√©: {str(e)}")
    
    def show_help_guide(self):
        """Affiche le guide d'aide complet dans une fen√™tre d√©di√©e, incluant l'aide sur les tests automatis√©s"""
        help_text = """
        <h1>Guide d'Utilisation Complet - Matelas Processor</h1>
        
        <div class="info-box">
            <strong>Bienvenue dans Matelas Processor</strong><br>
            Cette application professionnelle vous permet de traiter automatiquement les commandes PDF de matelas, 
            d'extraire les donn√©es, de cr√©er des configurations et de g√©n√©rer des fichiers Excel pour l'import.
        </div>

        <h2>üìã Table des Mati√®res</h2>
        <ul>
            <li><a href="#installation">Installation et D√©marrage</a></li>
            <li><a href="#interface">Interface Utilisateur</a></li>
            <li><a href="#onglets">Guide des Onglets</a></li>
            <li><a href="#json">Utilisation des Fichiers JSON</a></li>
            <li><a href="#traitement">Traitement des Commandes PDF</a></li>
            <li><a href="#configuration">Configuration et Param√®tres</a></li>
            <li><a href="#llm">Int√©gration des LLM (Ollama & OpenRouter)</a></li>
            <li><a href="#resultats">Gestion des R√©sultats</a></li>
            <li><a href="#tests">Tests Automatis√©s</a></li>
            <li><a href="#cout">Gestion des Co√ªts OpenRouter</a></li>
            <li><a href="#api-keys">Gestionnaire de Cl√©s API S√©curis√©</a></li>
            <li><a href="#depannage">D√©pannage et Support</a></li>
        </ul>

        <h2 id="installation">üöÄ Installation et D√©marrage</h2>
        
        <h3>Premi√®re Utilisation</h3>
        <ul>
            <li><strong>Contrat d'utilisation :</strong> Lors du premier lancement, vous devrez accepter le contrat d'utilisation (EULA)</li>
            <li><strong>Licence :</strong> L'application v√©rifie automatiquement votre cl√© de licence</li>
            <li><strong>Splash screen :</strong> Un √©cran de chargement s'affiche pendant l'initialisation</li>
        </ul>

        <h3>D√©marrage de l'Application</h3>
        <ul>
            <li>Double-cliquez sur <code>run_gui.py</code> ou <code>launch.py</code></li>
            <li>L'interface principale se charge avec tous les onglets disponibles</li>
            <li>La barre de statut indique l'√©tat de l'application</li>
        </ul>

        <h2 id="interface">üñ•Ô∏è Interface Utilisateur</h2>

        <h3>Structure de l'Interface</h3>
        <div class="highlight">
            <strong>Panneau de Gauche :</strong> Configuration et param√®tres de traitement<br>
            <strong>Panneau de Droite :</strong> Affichage des r√©sultats et logs<br>
            <strong>Onglets :</strong> Traitement, R√©sultats, Pr√©-import, Tests, Logs
        </div>

        <h3>Menu Principal</h3>
        <ul>
            <li><strong>Fichier :</strong> Sauvegarde des logs, export des r√©sultats</li>
            <li><strong>Traitement :</strong> D√©marrer/arr√™ter le traitement</li>
            <li><strong>Aide :</strong> Guide d'aide, tests automatis√©s, contrat d'utilisation, √† propos</li>
        </ul>

        <h3>Barre de Statut Avanc√©e</h3>
        <ul>
            <li><strong>Indicateur de statut :</strong> Pr√™t, Traitement, Erreur</li>
            <li><strong>Informations syst√®me :</strong> M√©moire, CPU, espace disque</li>
            <li><strong>Messages de log :</strong> Derniers √©v√©nements de l'application</li>
        </ul>

        <h2 id="onglets">üìë Guide des Onglets</h2>

        <div class="info-box">
            <strong>Navigation entre les onglets :</strong><br>
            L'interface utilise un syst√®me d'onglets pour organiser les diff√©rentes fonctionnalit√©s. 
            Chaque onglet a un r√¥le sp√©cifique dans le processus de traitement des commandes.
        </div>

        <h3>üìã Onglet "Traitement"</h3>
        
        <h4>R√¥le et Fonction</h4>
        <ul>
            <li><strong>Onglet principal :</strong> Point d'entr√©e pour le traitement des commandes</li>
            <li><strong>S√©lection des fichiers :</strong> Interface pour choisir les PDF √† traiter</li>
            <li><strong>Configuration :</strong> Param√®tres de production et LLM</li>
            <li><strong>Lancement :</strong> Bouton pour d√©marrer le traitement</li>
            <li><strong>Suivi :</strong> Barre de progression et statut en temps r√©el</li>
        </ul>

        <h4>Utilisation D√©taill√©e</h4>
        <div class="highlight">
            <strong>√âtapes d'utilisation :</strong>
            <ol>
                <li><strong>S√©lection :</strong> Cliquez sur "S√©lectionner des fichiers PDF"</li>
                <li><strong>Configuration :</strong> Remplissez semaine/ann√©e de production</li>
                <li><strong>LLM :</strong> Activez l'enrichissement et choisissez le fournisseur</li>
                <li><strong>Lancement :</strong> Cliquez sur "Traiter les fichiers"</li>
                <li><strong>Suivi :</strong> Surveillez la progression dans la barre</li>
            </ol>
        </div>

        <h4>√âl√©ments de l'Interface</h4>
        <ul>
            <li><strong>Liste des fichiers :</strong> Affichage des PDF s√©lectionn√©s</li>
            <li><strong>Param√®tres de production :</strong> Semaine, ann√©e, commande client</li>
            <li><strong>Configuration LLM :</strong> Case √† cocher et s√©lection du fournisseur</li>
            <li><strong>Champ API :</strong> Saisie de la cl√© OpenRouter si n√©cessaire</li>
            <li><strong>Boutons d'action :</strong> Traiter, Arr√™ter, Effacer</li>
        </ul>

        <h3>üìä Onglet "R√©sultats"</h3>

        <h4>R√¥le et Fonction</h4>
        <ul>
            <li><strong>Affichage des donn√©es :</strong> R√©sultats de l'extraction PDF</li>
            <li><strong>Validation :</strong> V√©rification des informations extraites</li>
            <li><strong>Navigation :</strong> Parcours des diff√©rents r√©sultats</li>
            <li><strong>Export :</strong> Sauvegarde des donn√©es trait√©es</li>
        </ul>

        <h4>Structure des R√©sultats</h4>
        <div class="success-box">
            <strong>Donn√©es affich√©es :</strong>
            <ul>
                <li><strong>Informations client :</strong> Nom, adresse, contact</li>
                <li><strong>D√©tails matelas :</strong> Type, dimensions, mat√©riaux</li>
                <li><strong>Sp√©cifications :</strong> Housse, fermet√©, options</li>
                <li><strong>Prix et conditions :</strong> Montants, d√©lais, garanties</li>
                <li><strong>M√©tadonn√©es :</strong> Date, num√©ro de commande, statut</li>
            </ul>
        </div>

        <h4>Actions Disponibles</h4>
        <ul>
            <li><strong>Navigation :</strong> Boutons pr√©c√©dent/suivant entre les r√©sultats</li>
            <li><strong>Validation :</strong> V√©rification visuelle des donn√©es</li>
            <li><strong>Correction :</strong> Modification manuelle si n√©cessaire</li>
            <li><strong>Export :</strong> Sauvegarde en format JSON ou Excel</li>
        </ul>

        <h3>üìà Onglet "Pr√©-import"</h3>

        <h4>R√¥le et Fonction</h4>
        <ul>
            <li><strong>Formatage Excel :</strong> Pr√©paration des donn√©es pour import</li>
            <li><strong>Validation :</strong> V√©rification de la conformit√© des donn√©es</li>
            <li><strong>Optimisation :</strong> Structuration pour syst√®mes ERP</li>
            <li><strong>Pr√©visualisation :</strong> Aper√ßu avant export final</li>
        </ul>

        <h4>Donn√©es Pr√©-import</h4>
        <div class="info-box">
            <strong>Structure des donn√©es pr√©-import :</strong>
            <ul>
                <li><strong>Colonnes standardis√©es :</strong> Format compatible ERP</li>
                <li><strong>Donn√©es calcul√©es :</strong> Dimensions, surfaces, volumes</li>
                <li><strong>Codes produits :</strong> R√©f√©rences normalis√©es</li>
                <li><strong>Prix calcul√©s :</strong> Montants avec taxes et remises</li>
                <li><strong>M√©tadonn√©es :</strong> Informations de tra√ßabilit√©</li>
            </ul>
        </div>

        <h4>Utilisation du Pr√©-import</h4>
        <ul>
            <li><strong>V√©rification :</strong> Contr√¥le de la coh√©rence des donn√©es</li>
            <li><strong>Modification :</strong> Ajustement des valeurs si n√©cessaire</li>
            <li><strong>Validation :</strong> Confirmation avant export Excel</li>
            <li><strong>Export :</strong> G√©n√©ration du fichier final</li>
        </ul>

        <h3>üß™ Onglet "Tests"</h3>

        <h4>R√¥le et Fonction</h4>
        <ul>
            <li><strong>Tests automatis√©s :</strong> Validation du fonctionnement</li>
            <li><strong>Diagnostic :</strong> D√©tection des probl√®mes</li>
            <li><strong>Performance :</strong> Mesure des temps de traitement</li>
            <li><strong>Qualit√© :</strong> V√©rification de la pr√©cision</li>
        </ul>

        <h4>Types de Tests Disponibles</h4>
        <ul>
            <li><strong>Tests unitaires :</strong> V√©rification des fonctions individuelles</li>
            <li><strong>Tests d'int√©gration :</strong> Validation des interactions</li>
            <li><strong>Tests de performance :</strong> Mesure des performances</li>
            <li><strong>Tests de r√©gression :</strong> V√©rification de la stabilit√©</li>
        </ul>

        <h4>Interface des Tests</h4>
        <ul>
            <li><strong>Boutons de test :</strong> Lancement des diff√©rents types</li>
            <li><strong>Options :</strong> Mode verbeux, couverture de code</li>
            <li><strong>Progression :</strong> Barre de progression en temps r√©el</li>
            <li><strong>R√©sultats :</strong> Affichage color√© des r√©sultats</li>
            <li><strong>Export :</strong> Sauvegarde des rapports de test</li>
        </ul>

        <h3>üí∞ Onglet "Co√ªt OpenRouter"</h3>

        <h4>R√¥le et Fonction</h4>
        <ul>
            <li><strong>Surveillance des co√ªts :</strong> Suivi des d√©penses OpenRouter</li>
            <li><strong>Calcul de co√ªts :</strong> Estimation du co√ªt par devis</li>
            <li><strong>Gestion du solde :</strong> V√©rification du cr√©dit disponible</li>
            <li><strong>Historique :</strong> Tra√ßabilit√© des d√©penses</li>
        </ul>

        <h4>Fonctionnalit√©s Principales</h4>
        <div class="info-box">
            <strong>Configuration et Connexion :</strong>
            <ul>
                <li><strong>Cl√© API :</strong> Saisie s√©curis√©e de la cl√© OpenRouter</li>
                <li><strong>Actualisation :</strong> R√©cup√©ration en temps r√©el du solde</li>
                <li><strong>Synchronisation :</strong> Chargement automatique depuis la configuration</li>
            </ul>
        </div>

        <h4>Informations du Solde</h4>
        <ul>
            <li><strong>Limites de la Cl√© API :</strong> Limites restantes et utilisation de votre cl√© API</li>
            <li><strong>Solde R√©el :</strong> Acc√®s direct au portefeuille OpenRouter via le bouton "üè¶ Voir Mon Portefeuille"</li>
            <li><strong>Recharge :</strong> Acc√®s √† la page de recharge via le bouton "üí≥ Recharger"</li>
            <li><strong>Note importante :</strong> Les limites affich√©es repr√©sentent les restrictions de votre cl√© API, pas votre solde r√©el</li>
        </ul>
        
        <h4>Acc√®s au Portefeuille</h4>
        <div class="info-box">
            <strong>Pour voir votre vrai solde :</strong>
            <ul>
                <li><strong>Bouton "üè¶ Voir Mon Portefeuille" :</strong> Ouvre directement votre compte OpenRouter dans le navigateur</li>
                <li><strong>Bouton "üí≥ Recharger" :</strong> Acc√®s √† la page de paiement pour ajouter des fonds</li>
                <li><strong>Lien direct :</strong> <a href="https://openrouter.ai/account" target="_blank">openrouter.ai/account</a></li>
                <li><strong>S√©curit√© :</strong> Le solde r√©el n'est pas accessible via l'API pour des raisons de s√©curit√©</li>
            </ul>
        </div>

        <h4>Calcul de Co√ªt par Devis</h4>
        <div class="success-box">
            <strong>Mod√®les support√©s :</strong>
            <ul>
                <li><strong>Claude 3.5 Sonnet :</strong> $3.0/M tokens input, $15.0/M tokens output</li>
                <li><strong>Claude 3 Opus :</strong> $15.0/M tokens input, $75.0/M tokens output</li>
                <li><strong>GPT-4o :</strong> $5.0/M tokens input, $15.0/M tokens output</li>
                <li><strong>GPT-4o Mini :</strong> $0.15/M tokens input, $0.6/M tokens output</li>
                <li><strong>Llama 3.1 8B :</strong> $0.2/M tokens input/output</li>
                <li><strong>Llama 3.1 70B :</strong> $0.8/M tokens input/output</li>
            </ul>
        </div>

        <h4>Interface de Calcul</h4>
        <ul>
            <li><strong>S√©lection du mod√®le :</strong> Choix dans la liste d√©roulante</li>
            <li><strong>Estimation des tokens :</strong> Saisie du nombre de tokens attendus</li>
            <li><strong>Calcul automatique :</strong> Estimation 70% input / 30% output</li>
            <li><strong>R√©sultat d√©taill√© :</strong> Co√ªt total en dollars</li>
        </ul>

        <h4>Historique des Co√ªts</h4>
        <ul>
            <li><strong>Tableau interactif :</strong> Affichage chronologique des calculs</li>
            <li><strong>Colonnes :</strong> Date, Mod√®le, Tokens, Co√ªt, Total cumul√©</li>
            <li><strong>Import/Export :</strong> Sauvegarde et chargement CSV</li>
            <li><strong>Gestion :</strong> Effacement s√©lectif ou complet</li>
        </ul>

        <h4>Utilisation Recommand√©e</h4>
        <div class="highlight">
            <strong>Workflow optimal :</strong>
            <ol>
                <li><strong>Configuration :</strong> Entrez votre cl√© API OpenRouter</li>
                <li><strong>V√©rification :</strong> Actualisez votre solde</li>
                <li><strong>Estimation :</strong> Calculez le co√ªt avant traitement</li>
                <li><strong>Surveillance :</strong> Suivez vos d√©penses dans l'historique</li>
                <li><strong>Optimisation :</strong> Ajustez les param√®tres selon le budget</li>
            </ol>
        </div>

        <h4>Conseils d'Optimisation</h4>
        <ul>
            <li><strong>Mod√®les √©conomiques :</strong> Utilisez GPT-4o Mini pour les tests</li>
            <li><strong>Estimation pr√©cise :</strong> Ajustez le nombre de tokens selon vos PDF</li>
            <li><strong>Surveillance r√©guli√®re :</strong> V√©rifiez votre solde avant chaque lot</li>
            <li><strong>Historique :</strong> Gardez une trace pour optimiser les co√ªts</li>
        </ul>

        <h3>üìù Onglet "Logs"</h3>

        <h4>R√¥le et Fonction</h4>
        <ul>
            <li><strong>Tra√ßabilit√© :</strong> Historique complet des op√©rations</li>
            <li><strong>Debugging :</strong> Diagnostic des probl√®mes</li>
            <li><strong>Surveillance :</strong> Suivi de l'activit√© de l'application</li>
            <li><strong>Audit :</strong> Tra√ßabilit√© pour la conformit√©</li>
        </ul>

        <h4>Types de Logs</h4>
        <div class="warning-box">
            <strong>Niveaux de log :</strong>
            <ul>
                <li><strong>INFO :</strong> Informations g√©n√©rales (vert)</li>
                <li><strong>WARNING :</strong> Avertissements (jaune)</li>
                <li><strong>ERROR :</strong> Erreurs (rouge)</li>
                <li><strong>DEBUG :</strong> Informations de d√©bogage (gris)</li>
            </ul>
        </div>

        <h4>Fonctionnalit√©s des Logs</h4>
        <ul>
            <li><strong>Filtrage :</strong> Par niveau de log (INFO, WARNING, ERROR)</li>
            <li><strong>Recherche :</strong> Recherche textuelle dans les logs</li>
            <li><strong>Export :</strong> Sauvegarde des logs en fichier texte</li>
            <li><strong>Rotation :</strong> Gestion automatique de l'espace disque</li>
            <li><strong>Temps r√©el :</strong> Affichage en direct des √©v√©nements</li>
        </ul>

        <h2 id="json">üìÑ Utilisation des Fichiers JSON</h2>

        <div class="info-box">
            <strong>Qu'est-ce que JSON ?</strong><br>
            JSON (JavaScript Object Notation) est un format de donn√©es l√©ger et lisible utilis√© pour 
            stocker et √©changer des informations structur√©es. Dans Matelas Processor, les fichiers JSON 
            servent de r√©f√©rentiels et de configuration.
        </div>

        <h3>üóÇÔ∏è Structure des Fichiers JSON</h3>

        <h4>R√©f√©rentiels de Dimensions</h4>
        <ul>
            <li><strong>Fichier :</strong> <code>backend/R√©f√©rentiels/dimensions_matelas.json</code></li>
            <li><strong>Contenu :</strong> Dimensions standardis√©es par type de matelas</li>
            <li><strong>Utilisation :</strong> Validation et calcul automatique des dimensions</li>
        </ul>

        <h4>R√©f√©rentiels de Longueurs</h4>
        <ul>
            <li><strong>Fichier :</strong> <code>backend/R√©f√©rentiels/longueurs_matelas.json</code></li>
            <li><strong>Contenu :</strong> Longueurs disponibles par type de matelas</li>
            <li><strong>Utilisation :</strong> Calcul des housses et mat√©riaux</li>
        </ul>

        <h4>R√©f√©rentiels Sp√©cialis√©s</h4>
        <div class="success-box">
            <strong>Fichiers par type de matelas :</strong>
            <ul>
                <li><strong>Latex Mixte 7 Zones :</strong> <code>latex_mixte7zones_*.json</code></li>
                <li><strong>Latex Naturel :</strong> <code>latex_naturel_*.json</code></li>
                <li><strong>Latex Renforc√© :</strong> <code>latex_renforce_*.json</code></li>
                <li><strong>Mousse Visco√©lastique :</strong> <code>mousse_visco_*.json</code></li>
                <li><strong>Mousse Rainur√©e 7 Zones :</strong> <code>mousse_rainuree7zones_*.json</code></li>
                <li><strong>Select 43 :</strong> <code>select43_*.json</code></li>
            </ul>
        </div>

        <h3>üìã Structure d'un Fichier JSON</h3>

        <h4>Exemple de R√©f√©rentiel</h4>
        <pre style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
{
    "type_matelas": "latex_mixte_7zones",
    "version": "1.0",
    "description": "R√©f√©rentiel pour matelas latex mixte 7 zones",
    "dimensions": {
        "largeur": [80, 90, 100, 120, 140, 160, 180, 200],
        "longueur": [190, 200, 210, 220],
        "hauteur": [18, 20, 22, 24, 26, 28, 30]
    },
    "materiaux": {
        "housse": ["Tencel", "Luxe3D", "Tencel Polyester"],
        "densite": [65, 75, 85, 95],
        "fermete": ["Doux", "Moyen", "Ferme", "Tr√®s ferme"]
    },
    "calculs": {
        "surface_formule": "largeur * longueur / 10000",
        "volume_formule": "largeur * longueur * hauteur / 1000000",
        "poids_formule": "volume * densite / 1000"
    }
}</pre>

        <h3>üîß Utilisation des JSON dans l'Application</h3>

        <h4>Chargement Automatique</h4>
        <ul>
            <li><strong>D√©tection du type :</strong> L'application identifie automatiquement le type de matelas</li>
            <li><strong>Chargement du r√©f√©rentiel :</strong> Le fichier JSON correspondant est charg√©</li>
            <li><strong>Validation :</strong> Les donn√©es extraites sont valid√©es contre le r√©f√©rentiel</li>
            <li><strong>Calculs :</strong> Les formules du JSON sont appliqu√©es automatiquement</li>
        </ul>

        <h4>Validation des Donn√©es</h4>
        <div class="highlight">
            <strong>Processus de validation :</strong>
            <ol>
                <li><strong>Extraction :</strong> Donn√©es extraites du PDF</li>
                <li><strong>R√©f√©rencement :</strong> Chargement du JSON correspondant</li>
                <li><strong>Validation :</strong> V√©rification des valeurs autoris√©es</li>
                <li><strong>Correction :</strong> Ajustement automatique si n√©cessaire</li>
                <li><strong>Calculs :</strong> Application des formules de calcul</li>
            </ol>
        </div>

        <h4>Calculs Automatiques</h4>
        <ul>
            <li><strong>Surface :</strong> Calcul automatique en m¬≤</li>
            <li><strong>Volume :</strong> Calcul automatique en m¬≥</li>
            <li><strong>Poids :</strong> Estimation bas√©e sur la densit√©</li>
            <li><strong>Prix :</strong> Calcul selon les tarifs de r√©f√©rence</li>
        </ul>

        <h3>üìù Modification des Fichiers JSON</h3>

        <h4>Quand Modifier</h4>
        <ul>
            <li><strong>Nouveaux produits :</strong> Ajout de nouveaux types de matelas</li>
            <li><strong>√âvolution des gammes :</strong> Modification des dimensions disponibles</li>
            <li><strong>Changement de tarifs :</strong> Mise √† jour des prix</li>
            <li><strong>Nouvelles options :</strong> Ajout de mat√©riaux ou finitions</li>
        </ul>

        <h4>Comment Modifier</h4>
        <div class="warning-box">
            <strong>Pr√©cautions importantes :</strong>
            <ul>
                <li><strong>Sauvegarde :</strong> Toujours faire une copie avant modification</li>
                <li><strong>Syntaxe :</strong> Respecter strictement la syntaxe JSON</li>
                <li><strong>Validation :</strong> Tester les modifications avec des fichiers de test</li>
                <li><strong>Versioning :</strong> Documenter les changements apport√©s</li>
            </ul>
        </div>

        <h4>Structure Recommand√©e</h4>
        <ul>
            <li><strong>En-t√™te :</strong> Type, version, description</li>
            <li><strong>Donn√©es :</strong> Valeurs autoris√©es et contraintes</li>
            <li><strong>Formules :</strong> Calculs automatiques</li>
            <li><strong>M√©tadonn√©es :</strong> Informations de tra√ßabilit√©</li>
        </ul>

        <h3>üîç Outils de Gestion JSON</h3>

        <h4>√âditeurs Recommand√©s</h4>
        <ul>
            <li><strong>Visual Studio Code :</strong> √âditeur gratuit avec support JSON</li>
            <li><strong>Notepad++ :</strong> √âditeur simple et efficace</li>
            <li><strong>√âditeurs en ligne :</strong> JSONLint, JSON Editor Online</li>
        </ul>

        <h4>Validation JSON</h4>
        <ul>
            <li><strong>V√©rification syntaxe :</strong> Utilisation d'outils de validation</li>
            <li><strong>Tests fonctionnels :</strong> V√©rification avec l'application</li>
            <li><strong>Tests de r√©gression :</strong> Validation des calculs</li>
        </ul>

        <h3>üìä Export et Import JSON</h3>

        <h4>Export des Donn√©es</h4>
        <ul>
            <li><strong>Format JSON :</strong> Export des r√©sultats en JSON</li>
            <li><strong>Structure :</strong> Donn√©es organis√©es et valid√©es</li>
            <li><strong>M√©tadonn√©es :</strong> Informations de tra√ßabilit√© incluses</li>
        </ul>

        <h4>Import de Donn√©es</h4>
        <ul>
            <li><strong>Validation :</strong> V√©rification de la structure JSON</li>
            <li><strong>Int√©gration :</strong> Fusion avec les donn√©es existantes</li>
            <li><strong>Calculs :</strong> Application des formules de r√©f√©rence</li>
        </ul>

        <h2 id="traitement">üìÑ Traitement des Commandes PDF</h2>

        <h3>√âtape 1 : S√©lection des Fichiers</h3>
        <ul>
            <li>Cliquez sur <strong>"S√©lectionner des fichiers PDF"</strong></li>
            <li>S√©lectionnez un ou plusieurs fichiers PDF de commandes</li>
            <li>Les fichiers s√©lectionn√©s apparaissent dans la liste</li>
            <li>Utilisez <strong>"Effacer la liste"</strong> pour recommencer</li>
        </ul>

        <h3>√âtape 2 : Configuration des Param√®tres</h3>
        
        <h4>Param√®tres de Production</h4>
        <ul>
            <li><strong>Semaine de production :</strong> Num√©ro de semaine (1-53)</li>
            <li><strong>Ann√©e de production :</strong> Ann√©e en cours ou future</li>
            <li><strong>Commande client :</strong> Num√©ro de commande personnalis√©</li>
        </ul>

        <h4>Configuration LLM</h4>
        <ul>
            <li><strong>Enrichissement LLM :</strong> Active l'analyse intelligente des PDF</li>
            <li><strong>Fournisseur LLM :</strong> Ollama (local) ou OpenRouter (cloud)</li>
            <li><strong>Cl√© API OpenRouter :</strong> Requise si OpenRouter est s√©lectionn√©</li>
        </ul>

        <h3>√âtape 3 : Lancement du Traitement</h3>
        <ul>
            <li>V√©rifiez que tous les param√®tres sont corrects</li>
            <li>Cliquez sur <strong>"Traiter les fichiers"</strong></li>
            <li>La barre de progression indique l'avancement</li>
            <li>Les logs s'affichent en temps r√©el</li>
        </ul>

        <h3>Types de Matelas Support√©s</h3>
        <div class="success-box">
            <strong>Matelas Trait√©s Automatiquement :</strong>
            <ul>
                <li><strong>Latex Mixte 7 Zones :</strong> Calcul automatique des dimensions et housses</li>
                <li><strong>Latex Naturel :</strong> Traitement sp√©cialis√© avec r√©f√©rentiels</li>
                <li><strong>Latex Renforc√© :</strong> Gestion des renforts et dimensions</li>
                <li><strong>Mousse Visco√©lastique :</strong> Calculs de densit√© et dimensions</li>
                <li><strong>Mousse Rainur√©e 7 Zones :</strong> Gestion des rainures et zones</li>
                <li><strong>Select 43 :</strong> Traitement sp√©cialis√© avec housses</li>
            </ul>
        </div>

        <h2 id="configuration">‚öôÔ∏è Configuration et Param√®tres</h2>

        <h3>Param√®tres Avanc√©s</h3>
        <ul>
            <li><strong>Mode enrichissement :</strong> Am√©liore la pr√©cision de l'extraction</li>
            <li><strong>Fournisseur LLM :</strong> Choix entre traitement local et cloud</li>
            <li><strong>Gestion des erreurs :</strong> Traitement robuste des cas particuliers</li>
        </ul>

        <h3>Fichiers de Configuration</h3>
        <ul>
            <li><strong>R√©f√©rentiels :</strong> Stock√©s dans <code>backend/R√©f√©rentiels/</code></li>
            <li><strong>Templates Excel :</strong> Dans <code>template/</code></li>
            <li><strong>Logs :</strong> Rotation automatique dans <code>logs/</code></li>
        </ul>

        <h2 id="llm">ü§ñ Int√©gration des LLM (Large Language Models)</h2>

        <div class="info-box">
            <strong>Qu'est-ce qu'un LLM ?</strong><br>
            Les Large Language Models (LLM) sont des mod√®les d'intelligence artificielle qui permettent 
            d'analyser et de comprendre le contenu textuel des PDF de commandes avec une pr√©cision √©lev√©e. 
            Ils am√©liorent significativement l'extraction automatique des donn√©es par rapport aux m√©thodes traditionnelles.
        </div>

        <h3>Fonctionnement de l'Enrichissement LLM</h3>
        <ul>
            <li><strong>Analyse intelligente :</strong> Le LLM lit et comprend le contenu des PDF comme un humain</li>
            <li><strong>Extraction contextuelle :</strong> Reconnaissance des dimensions, mat√©riaux, et sp√©cifications</li>
            <li><strong>Gestion des ambigu√Øt√©s :</strong> R√©solution automatique des cas particuliers et exceptions</li>
            <li><strong>Validation des donn√©es :</strong> V√©rification de la coh√©rence des informations extraites</li>
            <li><strong>Am√©lioration continue :</strong> Apprentissage √† partir des corrections utilisateur</li>
        </ul>

        <h3>Activation de l'Enrichissement LLM</h3>
        <div class="highlight">
            <strong>√âtapes pour activer l'enrichissement LLM :</strong>
            <ol>
                <li>Cochez la case <strong>"Enrichissement LLM"</strong> dans l'interface</li>
                <li>S√©lectionnez votre fournisseur LLM (Ollama ou OpenRouter)</li>
                <li>Configurez les param√®tres sp√©cifiques au fournisseur choisi</li>
                <li>Lancez le traitement - l'analyse LLM se fait automatiquement</li>
            </ol>
        </div>

        <h3>üñ•Ô∏è Ollama - Traitement Local</h3>
        
        <div class="success-box">
            <strong>Avantages d'Ollama :</strong>
            <ul>
                <li><strong>Gratuit :</strong> Aucun co√ªt par devis ou par utilisation</li>
                <li><strong>Confidentialit√© totale :</strong> Donn√©es trait√©es localement, jamais envoy√©es sur internet</li>
                <li><strong>Performance :</strong> Traitement rapide sans latence r√©seau</li>
                <li><strong>Disponibilit√© :</strong> Fonctionne m√™me sans connexion internet</li>
                <li><strong>Contr√¥le total :</strong> Mod√®les personnalisables selon vos besoins</li>
            </ul>
        </div>

        <h4>Installation et Configuration d'Ollama</h4>
        <ul>
            <li><strong>T√©l√©chargement :</strong> Rendez-vous sur <a href="https://ollama.ai" target="_blank">ollama.ai</a></li>
            <li><strong>Installation :</strong> Suivez les instructions pour votre syst√®me d'exploitation</li>
            <li><strong>T√©l√©chargement du mod√®le :</strong> <code>ollama pull llama2:7b</code> (recommand√©)</li>
            <li><strong>D√©marrage :</strong> Lancez Ollama en arri√®re-plan</li>
            <li><strong>V√©rification :</strong> L'application d√©tecte automatiquement Ollama</li>
        </ul>

        <h4>Mod√®les Recommand√©s pour Ollama</h4>
        <ul>
            <li><strong>llama2:7b :</strong> √âquilibr√© performance/ressources (recommand√©)</li>
            <li><strong>llama2:13b :</strong> Plus pr√©cis, n√©cessite plus de RAM</li>
            <li><strong>codellama:7b :</strong> Sp√©cialis√© dans l'analyse de documents</li>
            <li><strong>mistral:7b :</strong> Bon compromis vitesse/pr√©cision</li>
        </ul>

        <h4>Exigences Syst√®me pour Ollama</h4>
        <ul>
            <li><strong>RAM :</strong> Minimum 8GB, recommand√© 16GB+</li>
            <li><strong>Stockage :</strong> 4-8GB pour les mod√®les</li>
            <li><strong>CPU :</strong> Processeur moderne (Intel i5/AMD Ryzen 5+)</li>
            <li><strong>GPU :</strong> Optionnel mais am√©liore les performances</li>
        </ul>

        <h3>‚òÅÔ∏è OpenRouter - Traitement Cloud</h3>

        <div class="warning-box">
            <strong>Avantages d'OpenRouter :</strong>
            <ul>
                <li><strong>Mod√®les avanc√©s :</strong> Acc√®s aux derniers mod√®les (GPT-4, Claude, etc.)</li>
                <li><strong>Pas d'installation :</strong> Utilisation imm√©diate sans configuration locale</li>
                <li><strong>Performance garantie :</strong> Infrastructure cloud optimis√©e</li>
                <li><strong>Mise √† jour automatique :</strong> Toujours les derni√®res versions des mod√®les</li>
                <li><strong>Scalabilit√© :</strong> Gestion automatique de la charge</li>
            </ul>
        </div>

        <h4>Configuration d'OpenRouter</h4>
        <ol>
            <li><strong>Cr√©ation de compte :</strong> Inscrivez-vous sur <a href="https://openrouter.ai" target="_blank">openrouter.ai</a></li>
            <li><strong>G√©n√©ration de cl√© API :</strong> Cr√©ez une cl√© API dans votre dashboard</li>
            <li><strong>Saisie de la cl√© :</strong> Entrez votre cl√© API dans l'application</li>
            <li><strong>Test de connexion :</strong> L'application v√©rifie automatiquement la validit√©</li>
        </ol>

        <h4>Mod√®les Disponibles sur OpenRouter</h4>
        <ul>
            <li><strong>GPT-4 :</strong> Le plus pr√©cis, co√ªt √©lev√©</li>
            <li><strong>GPT-3.5-turbo :</strong> Bon rapport qualit√©/prix</li>
            <li><strong>Claude-3 :</strong> Excellente compr√©hension de documents</li>
            <li><strong>Llama-2 :</strong> Alternative √©conomique</li>
        </ul>

        <h3>üí∞ Comparaison des Co√ªts</h3>

        <h4>Ollama - Co√ªts</h4>
        <div class="success-box">
            <strong>Co√ªt par devis : GRATUIT</strong>
            <ul>
                <li><strong>Installation :</strong> Gratuit</li>
                <li><strong>Utilisation :</strong> Gratuit</li>
                <li><strong>Mod√®les :</strong> Gratuits</li>
                <li><strong>Co√ªt total :</strong> 0‚Ç¨ par devis</li>
            </ul>
        </div>

        <h4>OpenRouter - Co√ªts</h4>
        <div class="info-box">
            <strong>Co√ªts par devis (estimations) :</strong>
            <ul>
                <li><strong>GPT-4 :</strong> ~0.15-0.30‚Ç¨ par devis (tr√®s pr√©cis)</li>
                <li><strong>GPT-3.5-turbo :</strong> ~0.02-0.05‚Ç¨ par devis (recommand√©)</li>
                <li><strong>Claude-3 :</strong> ~0.10-0.20‚Ç¨ par devis (excellent)</li>
                <li><strong>Llama-2 :</strong> ~0.01-0.03‚Ç¨ par devis (√©conomique)</li>
            </ul>
            <em>Note : Les co√ªts varient selon la complexit√© du devis et la longueur du texte analys√©</em>
        </div>

        <h4>Recommandations de Choix</h4>
        <ul>
            <li><strong>D√©butant / Petit volume :</strong> Ollama (gratuit, simple)</li>
            <li><strong>Volume moyen :</strong> OpenRouter avec GPT-3.5-turbo</li>
            <li><strong>Haute pr√©cision requise :</strong> OpenRouter avec GPT-4 ou Claude-3</li>
            <li><strong>Budget limit√© :</strong> Ollama ou OpenRouter avec Llama-2</li>
        </ul>

        <h3>üîÑ Comparaison Technique</h3>

        <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
            <tr style="background-color: #f8f9fa;">
                <th style="border: 1px solid #dee2e6; padding: 12px; text-align: left;">Crit√®re</th>
                <th style="border: 1px solid #dee2e6; padding: 12px; text-align: center;">Ollama</th>
                <th style="border: 1px solid #dee2e6; padding: 12px; text-align: center;">OpenRouter</th>
            </tr>
            <tr>
                <td style="border: 1px solid #dee2e6; padding: 12px;"><strong>Co√ªt</strong></td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #28a745;">Gratuit</td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #dc3545;">Payant</td>
            </tr>
            <tr>
                <td style="border: 1px solid #dee2e6; padding: 12px;"><strong>Confidentialit√©</strong></td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #28a745;">Totale</td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #ffc107;">Partielle</td>
            </tr>
            <tr>
                <td style="border: 1px solid #dee2e6; padding: 12px;"><strong>Vitesse</strong></td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #28a745;">Rapide</td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #17a2b8;">Variable</td>
            </tr>
            <tr>
                <td style="border: 1px solid #dee2e6; padding: 12px;"><strong>Pr√©cision</strong></td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #17a2b8;">Bonne</td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #28a745;">Excellente</td>
            </tr>
            <tr>
                <td style="border: 1px solid #dee2e6; padding: 12px;"><strong>Installation</strong></td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #ffc107;">Requis</td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #28a745;">Aucune</td>
            </tr>
            <tr>
                <td style="border: 1px solid #dee2e6; padding: 12px;"><strong>Internet</strong></td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #28a745;">Optionnel</td>
                <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; color: #dc3545;">Requis</td>
            </tr>
        </table>

        <h3>üéØ Conseils d'Optimisation</h3>

        <h4>Pour Ollama</h4>
        <ul>
            <li><strong>Choisissez le bon mod√®le :</strong> llama2:7b pour la plupart des cas</li>
            <li><strong>Optimisez la RAM :</strong> Fermez les applications inutiles</li>
            <li><strong>Utilisez un SSD :</strong> Am√©liore les temps de chargement des mod√®les</li>
            <li><strong>GPU optionnel :</strong> Acc√©l√®re significativement le traitement</li>
        </ul>

        <h4>Pour OpenRouter</h4>
        <ul>
            <li><strong>Testez diff√©rents mod√®les :</strong> Trouvez le meilleur rapport qualit√©/prix</li>
            <li><strong>Surveillez les co√ªts :</strong> Utilisez le dashboard OpenRouter</li>
            <li><strong>Optimisez les prompts :</strong> Des prompts clairs r√©duisent les co√ªts</li>
            <li><strong>Planifiez l'utilisation :</strong> Traitez les devis par lots</li>
        </ul>

        <h3>üîß D√©pannage LLM</h3>

        <h4>Probl√®mes avec Ollama</h4>
        <div class="warning-box">
            <strong>Solutions courantes :</strong>
            <ul>
                <li><strong>Mod√®le non trouv√© :</strong> <code>ollama pull llama2:7b</code></li>
                <li><strong>M√©moire insuffisante :</strong> Utilisez un mod√®le plus petit</li>
                <li><strong>Ollama ne d√©marre pas :</strong> V√©rifiez l'installation et les permissions</li>
                <li><strong>Traitement lent :</strong> V√©rifiez l'utilisation CPU/RAM</li>
            </ul>
        </div>

        <h4>Probl√®mes avec OpenRouter</h4>
        <div class="warning-box">
            <strong>Solutions courantes :</strong>
            <ul>
                <li><strong>Cl√© API invalide :</strong> V√©rifiez la cl√© dans le dashboard OpenRouter</li>
                <li><strong>Quota d√©pass√© :</strong> Surveillez votre consommation</li>
                <li><strong>Erreur de connexion :</strong> V√©rifiez votre connexion internet</li>
                <li><strong>Mod√®le indisponible :</strong> Choisissez un mod√®le alternatif</li>
            </ul>
        </div>

        <h2 id="resultats">üìä Gestion des R√©sultats</h2>

        <h3>Onglet R√©sultats</h3>
        <ul>
            <li><strong>Donn√©es extraites :</strong> Affichage structur√© des informations</li>
            <li><strong>Configurations :</strong> Param√®tres calcul√©s automatiquement</li>
            <li><strong>Pr√©-import :</strong> Donn√©es format√©es pour Excel</li>
        </ul>

        <h3>Export et Sauvegarde</h3>
        <ul>
            <li><strong>Fichiers Excel :</strong> G√©n√©r√©s automatiquement dans <code>output/</code></li>
            <li><strong>Logs :</strong> Sauvegarde via menu Fichier > Sauvegarder les logs</li>
            <li><strong>R√©sultats :</strong> Export possible des donn√©es trait√©es</li>
        </ul>

        <h3>Format des Fichiers de Sortie</h3>
        <div class="info-box">
            <strong>Structure des fichiers Excel g√©n√©r√©s :</strong>
            <ul>
                <li>Onglet <strong>Donn√©es :</strong> Informations extraites du PDF</li>
                <li>Onglet <strong>Configuration :</strong> Param√®tres calcul√©s</li>
                <li>Onglet <strong>Pr√©-import :</strong> Donn√©es format√©es pour import</li>
                <li>Nommage : <code>Matelas_[Type]_[R√©f√©rence]_[Num√©ro].xlsx</code></li>
            </ul>
        </div>

        <h3>üéØ Centrage des Cellules Excel</h3>
        <div class="success-box">
            <strong>Fonctionnalit√© automatique :</strong> L'application centre automatiquement les valeurs dans les cellules Excel pour une pr√©sentation professionnelle.
        </div>
        
        <h4>Modes de Centrage Disponibles</h4>
        <ul>
            <li><strong>Mode Intelligent (par d√©faut) :</strong> Alignement sp√©cifique par type de donn√©es</li>
            <li><strong>Mode Global :</strong> Centrage de toutes les cellules</li>
            <li><strong>Mode None :</strong> Respect du formatage du template</li>
        </ul>

        <h4>Types de Donn√©es Centr√©es</h4>
        <ul>
            <li><strong>En-t√™tes :</strong> Client, adresse, num√©ro de commande</li>
            <li><strong>Dates :</strong> Semaine, lundi, vendredi</li>
            <li><strong>Dimensions :</strong> Hauteur, longueur, dimensions housse</li>
            <li><strong>Quantit√©s :</strong> Jumeaux, 1 pi√®ce</li>
            <li><strong>Types :</strong> Housse, noyau, fermet√©</li>
            <li><strong>Op√©rations :</strong> D√©tection, surmatelas, transport</li>
        </ul>

        <h4>Avantages du Centrage</h4>
        <ul>
            <li><strong>Lisibilit√© :</strong> Pr√©sentation claire et organis√©e</li>
            <li><strong>Professionnalisme :</strong> Aspect soign√© et coh√©rent</li>
            <li><strong>Standards Excel :</strong> Respect des conventions d'affichage</li>
            <li><strong>Efficacit√© :</strong> Lecture rapide des informations</li>
        </ul>

        <h2 id="tests">üß™ Tests Automatis√©s</h2>

        <h3>Acc√®s aux Tests</h3>
        <ul>
            <li>Menu <strong>Aide > Tests automatis√©s</strong> ou raccourci <strong>F2</strong></li>
            <li>Onglet d√©di√© <strong>üß™ Tests</strong> dans l'interface principale</li>
        </ul>

        <h3>Types de Tests Disponibles</h3>
        <ul>
            <li><strong>Tests Unitaires :</strong> V√©rification des fonctions individuelles</li>
            <li><strong>Tests d'Int√©gration :</strong> Validation des interactions entre modules</li>
            <li><strong>Tests de Performance :</strong> Mesure des temps de traitement</li>
            <li><strong>Tests de R√©gression :</strong> V√©rification de la stabilit√©</li>
            <li><strong>Tous les Tests :</strong> Ex√©cution compl√®te de la suite de tests</li>
        </ul>

        <h3>Options de Test</h3>
        <ul>
            <li><strong>Mode verbeux :</strong> Affichage d√©taill√© des r√©sultats</li>
            <li><strong>Rapport de couverture :</strong> Analyse de la couverture de code</li>
            <li><strong>Progression en temps r√©el :</strong> Suivi de l'avancement</li>
        </ul>

        <h3>R√©sultats des Tests</h3>
        <ul>
            <li><strong>Affichage color√© :</strong> Vert (succ√®s), Rouge (√©chec), Jaune (avertissement)</li>
            <li><strong>Export des r√©sultats :</strong> Sauvegarde des rapports de test</li>
            <li><strong>Logs d√©taill√©s :</strong> Tra√ßabilit√© compl√®te des ex√©cutions</li>
        </ul>

        <h2 id="cout">üí∞ Gestion des Co√ªts OpenRouter</h2>

        <div class="info-box">
            <strong>Surveillance des d√©penses :</strong><br>
            L'onglet "Co√ªt OpenRouter" vous permet de surveiller vos d√©penses, calculer les co√ªts estim√©s 
            et g√©rer votre budget pour l'utilisation des mod√®les LLM via OpenRouter.
        </div>

        <h3>Acc√®s √† l'Onglet Co√ªt</h3>
        <ul>
            <li><strong>Onglet d√©di√© :</strong> "üí∞ Co√ªt OpenRouter" dans l'interface principale</li>
            <li><strong>Navigation :</strong> Clic sur l'onglet dans le panneau de droite</li>
            <li><strong>Int√©gration :</strong> Synchronisation automatique avec la configuration LLM</li>
        </ul>

        <h3>Configuration et Connexion</h3>
        
        <h4>Saisie de la Cl√© API</h4>
        <ul>
            <li><strong>Champ s√©curis√© :</strong> Saisie masqu√©e de la cl√© OpenRouter</li>
            <li><strong>Chargement automatique :</strong> R√©cup√©ration depuis la configuration LLM</li>
            <li><strong>Validation :</strong> V√©rification de la validit√© de la cl√©</li>
        </ul>

        <h4>Actualisation du Solde</h4>
        <div class="highlight">
            <strong>Processus d'actualisation :</strong>
            <ol>
                <li>Entrez votre cl√© API OpenRouter</li>
                <li>Cliquez sur "üîÑ Actualiser le solde"</li>
                <li>L'application r√©cup√®re les informations en temps r√©el</li>
                <li>Les donn√©es sont affich√©es dans l'interface</li>
            </ol>
        </div>

        <h3>Informations du Solde</h3>
        
        <h4>Donn√©es Affich√©es</h4>
        <ul>
            <li><strong>Solde actuel :</strong> Montant disponible en dollars (pr√©cision 4 d√©cimales)</li>
            <li><strong>Cr√©dits restants :</strong> Nombre de cr√©dits disponibles</li>
            <li><strong>Total d√©pens√© :</strong> Historique cumul√© des d√©penses</li>
            <li><strong>Statut de connexion :</strong> Indicateur visuel de l'√©tat</li>
        </ul>

        <h4>Interpr√©tation des Donn√©es</h4>
        <div class="success-box">
            <strong>Guide d'interpr√©tation :</strong>
            <ul>
                <li><strong>Solde √©lev√© :</strong> Vous pouvez traiter de nombreux devis</li>
                <li><strong>Solde faible :</strong> Surveillez vos d√©penses ou rechargez</li>
                <li><strong>Total d√©pens√© :</strong> Aide √† planifier le budget mensuel</li>
                <li><strong>Cr√©dits :</strong> Certains mod√®les utilisent des cr√©dits plut√¥t que des dollars</li>
            </ul>
        </div>

        <h3>Calcul de Co√ªt par Devis</h3>

        <h4>Mod√®les Support√©s et Tarifs</h4>
        <div class="info-box">
            <strong>Tarifs par million de tokens (approximatifs) :</strong>
            <ul>
                <li><strong>Claude 3.5 Sonnet :</strong> $3.0 input / $15.0 output</li>
                <li><strong>Claude 3 Opus :</strong> $15.0 input / $75.0 output</li>
                <li><strong>GPT-4o :</strong> $5.0 input / $15.0 output</li>
                <li><strong>GPT-4o Mini :</strong> $0.15 input / $0.6 output</li>
                <li><strong>Llama 3.1 8B :</strong> $0.2 input/output</li>
                <li><strong>Llama 3.1 70B :</strong> $0.8 input/output</li>
            </ul>
            <em>Note : Les tarifs peuvent varier selon OpenRouter et les conditions du march√©</em>
        </div>

        <h4>Processus de Calcul</h4>
        <ul>
            <li><strong>S√©lection du mod√®le :</strong> Choix dans la liste d√©roulante</li>
            <li><strong>Estimation des tokens :</strong> Saisie du nombre de tokens attendus</li>
            <li><strong>R√©partition automatique :</strong> 70% input / 30% output (standard)</li>
            <li><strong>Calcul en temps r√©el :</strong> Affichage imm√©diat du co√ªt estim√©</li>
        </ul>

        <h4>Optimisation des Co√ªts</h4>
        <div class="warning-box">
            <strong>Conseils pour r√©duire les co√ªts :</strong>
            <ul>
                <li><strong>Mod√®les √©conomiques :</strong> GPT-4o Mini ou Llama pour les tests</li>
                <li><strong>Estimation pr√©cise :</strong> Ajustez selon la complexit√© de vos PDF</li>
                <li><strong>Traitement par lots :</strong> Optimisez le nombre de tokens par requ√™te</li>
                <li><strong>Surveillance r√©guli√®re :</strong> V√©rifiez les co√ªts avant chaque lot</li>
            </ul>
        </div>

        <h3>Historique des Co√ªts</h3>

        <h4>Fonctionnalit√©s de l'Historique</h4>
        <ul>
            <li><strong>Tableau interactif :</strong> Affichage chronologique des calculs</li>
            <li><strong>Colonnes d√©taill√©es :</strong> Date, Mod√®le, Tokens, Co√ªt, Total cumul√©</li>
            <li><strong>Calcul automatique :</strong> Total cumul√© mis √† jour en temps r√©el</li>
            <li><strong>Tri et filtrage :</strong> Organisation des donn√©es par crit√®res</li>
        </ul>

        <h4>Gestion de l'Historique</h4>
        <div class="highlight">
            <strong>Actions disponibles :</strong>
            <ul>
                <li><strong>Chargement CSV :</strong> Import d'historique depuis un fichier</li>
                <li><strong>Sauvegarde :</strong> Export des donn√©es en format CSV</li>
                <li><strong>Effacement :</strong> Suppression s√©lective ou compl√®te</li>
                <li><strong>Analyse :</strong> Visualisation des tendances de co√ªts</li>
            </ul>
        </div>

        <h3>Workflow Recommand√©</h3>
        
        <h4>Processus Optimal</h4>
        <ol>
            <li><strong>Configuration initiale :</strong> Entrez votre cl√© API OpenRouter</li>
            <li><strong>V√©rification du solde :</strong> Actualisez pour conna√Ætre votre budget</li>
            <li><strong>Estimation pr√©alable :</strong> Calculez le co√ªt avant le traitement</li>
            <li><strong>Traitement :</strong> Lancez le traitement des PDF</li>
            <li><strong>Surveillance :</strong> Suivez les d√©penses dans l'historique</li>
            <li><strong>Optimisation :</strong> Ajustez les param√®tres selon les r√©sultats</li>
        </ol>

        <h4>Alertes et Recommandations</h4>
        <ul>
            <li><strong>Solde faible :</strong> L'application vous avertit si le solde est insuffisant</li>
            <li><strong>Co√ªts √©lev√©s :</strong> Suggestions de mod√®les plus √©conomiques</li>
            <li><strong>Optimisation :</strong> Conseils pour r√©duire les d√©penses</li>
            <li><strong>Planification :</strong> Aide √† la budg√©tisation mensuelle</li>
        </ul>

        <h3>Int√©gration avec le Traitement</h3>
        
        <h4>Synchronisation Automatique</h4>
        <ul>
            <li><strong>Cl√© API partag√©e :</strong> Utilisation de la m√™me cl√© que le traitement LLM</li>
            <li><strong>Mod√®les coh√©rents :</strong> S√©lection des m√™mes mod√®les</li>
            <li><strong>Suivi en temps r√©el :</strong> Mise √† jour automatique des co√ªts</li>
        </ul>

        <h4>Optimisation du Workflow</h4>
        <div class="success-box">
            <strong>Bonnes pratiques :</strong>
            <ul>
                <li><strong>Test avec Ollama :</strong> Utilisez Ollama pour les tests (gratuit)</li>
                <li><strong>Production avec OpenRouter :</strong> Utilisez OpenRouter pour la production</li>
                <li><strong>Surveillance continue :</strong> V√©rifiez r√©guli√®rement vos d√©penses</li>
                <li><strong>Archivage :</strong> Sauvegardez l'historique pour analyse</li>
            </ul>
        </div>

        <h2 id="api-keys">üîë Gestionnaire de Cl√©s API S√©curis√©</h2>

        <div class="info-box">
            <strong>Fonctionnalit√© avanc√©e de s√©curit√©</strong><br>
            Le gestionnaire de cl√©s API s√©curis√© vous permet de stocker et g√©rer vos cl√©s API de mani√®re 
            chiffr√©e et s√©curis√©e, √©vitant ainsi de les saisir √† chaque utilisation.
        </div>

        <h3>üîê Acc√®s au Gestionnaire</h3>
        <ul>
            <li><strong>Menu Aide :</strong> Aide ‚Üí Gestionnaire de Cl√©s API</li>
            <li><strong>Raccourci clavier :</strong> F3</li>
            <li><strong>Interface d√©di√©e :</strong> Fen√™tre modale s√©curis√©e</li>
        </ul>

        <h3>üõ°Ô∏è Fonctionnalit√©s de S√©curit√©</h3>
        
        <h4>Chiffrement Avanc√©</h4>
        <div class="success-box">
            <strong>Protection des donn√©es :</strong>
            <ul>
                <li><strong>Chiffrement AES-256 :</strong> Algorithme de chiffrement militaire</li>
                <li><strong>D√©rivation de cl√© PBKDF2 :</strong> Protection contre les attaques par force brute</li>
                <li><strong>Stockage local :</strong> Aucune transmission r√©seau des cl√©s</li>
                <li><strong>Mot de passe ma√Ætre :</strong> Protection par mot de passe configurable</li>
            </ul>
        </div>

        <h4>Services Support√©s</h4>
        <ul>
            <li><strong>OpenRouter :</strong> Acc√®s aux mod√®les LLM payants</li>
            <li><strong>Ollama :</strong> Mod√®les locaux gratuits</li>
            <li><strong>Anthropic :</strong> Claude et autres mod√®les</li>
            <li><strong>OpenAI :</strong> GPT-4, GPT-3.5 et autres</li>
            <li><strong>Google :</strong> Gemini et autres mod√®les Google</li>
            <li><strong>Custom :</strong> Services personnalis√©s</li>
        </ul>

        <h3>üìã Interface du Gestionnaire</h3>

        <h4>Tableau des Cl√©s</h4>
        <div class="highlight">
            <strong>Colonnes disponibles :</strong>
            <ul>
                <li><strong>Service :</strong> Nom du service (OpenRouter, Ollama, etc.)</li>
                <li><strong>Description :</strong> Description optionnelle de la cl√©</li>
                <li><strong>Cr√©√©e le :</strong> Date et heure de cr√©ation</li>
                <li><strong>Actions :</strong> Boutons de modification et suppression</li>
            </ul>
        </div>

        <h4>Boutons d'Action</h4>
        <ul>
            <li><strong>‚ûï Ajouter une Cl√© :</strong> Cr√©ation d'une nouvelle cl√© API</li>
            <li><strong>üîÑ Actualiser :</strong> Rechargement de la liste</li>
            <li><strong>üß™ Tester Chiffrement :</strong> V√©rification du syst√®me de s√©curit√©</li>
            <li><strong>Fermer :</strong> Fermeture du gestionnaire</li>
        </ul>

        <h3>‚ûï Ajout d'une Cl√© API</h3>

        <h4>Dialogue d'√âdition</h4>
        <ul>
            <li><strong>Service :</strong> S√©lection dans la liste ou saisie personnalis√©e</li>
            <li><strong>Description :</strong> Description optionnelle pour identifier la cl√©</li>
            <li><strong>Cl√© API :</strong> Saisie de la cl√© (masqu√©e par d√©faut)</li>
            <li><strong>üëÅÔ∏è Afficher :</strong> Bouton pour afficher/masquer la cl√©</li>
        </ul>

        <h4>Processus de Sauvegarde</h4>
        <div class="info-box">
            <strong>√âtapes de chiffrement :</strong>
            <ol>
                <li><strong>Validation :</strong> V√©rification du format de la cl√©</li>
                <li><strong>Chiffrement :</strong> Application du chiffrement AES-256</li>
                <li><strong>Stockage :</strong> Sauvegarde dans le fichier s√©curis√©</li>
                <li><strong>Confirmation :</strong> Message de succ√®s</li>
            </ol>
        </div>

        <h3>‚úèÔ∏è Modification et Suppression</h3>

        <h4>Modification d'une Cl√©</h4>
        <ul>
            <li><strong>Bouton ‚úèÔ∏è :</strong> Ouverture du dialogue d'√©dition</li>
            <li><strong>Pr√©-remplissage :</strong> Donn√©es existantes charg√©es</li>
            <li><strong>Modification :</strong> Changement de la cl√© ou description</li>
            <li><strong>Sauvegarde :</strong> Mise √† jour s√©curis√©e</li>
        </ul>

        <h4>Suppression d'une Cl√©</h4>
        <div class="warning-box">
            <strong>Processus de suppression :</strong>
            <ul>
                <li><strong>Confirmation :</strong> Dialogue de confirmation obligatoire</li>
                <li><strong>Suppression s√©curis√©e :</strong> √âcrasement des donn√©es chiffr√©es</li>
                <li><strong>Irr√©versible :</strong> Action d√©finitive</li>
                <li><strong>Actualisation :</strong> Mise √† jour imm√©diate de l'interface</li>
            </ul>
        </div>

        <h3>üß™ Test de Chiffrement</h3>

        <h4>Fonction de Test</h4>
        <ul>
            <li><strong>V√©rification :</strong> Test du syst√®me de chiffrement</li>
            <li><strong>Validation :</strong> Contr√¥le de l'int√©grit√© des donn√©es</li>
            <li><strong>Rapport :</strong> Affichage du statut de s√©curit√©</li>
        </ul>

        <h4>Messages de Test</h4>
        <div class="success-box">
            <strong>Test r√©ussi :</strong> "‚úÖ Le syst√®me de chiffrement fonctionne correctement. Vos cl√©s API sont prot√©g√©es de mani√®re s√©curis√©e."
        </div>
        <div class="warning-box">
            <strong>Test √©chou√© :</strong> "‚ùå Le test de chiffrement a √©chou√©. V√©rifiez la configuration du stockage s√©curis√©."
        </div>

        <h3>üîß Configuration Avanc√©e</h3>

        <h4>Mot de Passe Ma√Ætre</h4>
        <ul>
            <li><strong>Variable d'environnement :</strong> MATELAS_MASTER_PASSWORD</li>
            <li><strong>Mot de passe par d√©faut :</strong> Utilis√© si non configur√©</li>
            <li><strong>S√©curit√© renforc√©e :</strong> Recommand√© en production</li>
        </ul>

        <h4>Int√©gration Automatique</h4>
        <div class="info-box">
            <strong>Chargement automatique :</strong>
            <ul>
                <li><strong>Au d√©marrage :</strong> Chargement des cl√©s depuis le stockage s√©curis√©</li>
                <li><strong>Fallback :</strong> Utilisation de la configuration classique si n√©cessaire</li>
                <li><strong>Transparence :</strong> Aucune modification du workflow utilisateur</li>
            </ul>
        </div>

        <h3>‚ö†Ô∏è Bonnes Pratiques</h3>

        <h4>S√©curit√©</h4>
        <ul>
            <li><strong>Mot de passe fort :</strong> Utilisez un mot de passe ma√Ætre complexe</li>
            <li><strong>Sauvegarde :</strong> Sauvegardez le fichier de stockage s√©curis√©</li>
            <li><strong>Acc√®s limit√© :</strong> Restreignez l'acc√®s au dossier de l'application</li>
            <li><strong>Rotation :</strong> Changez r√©guli√®rement vos cl√©s API</li>
        </ul>

        <h4>Utilisation</h4>
        <ul>
            <li><strong>Test r√©gulier :</strong> V√©rifiez le syst√®me de chiffrement</li>
            <li><strong>Descriptions claires :</strong> Utilisez des descriptions explicites</li>
            <li><strong>Organisation :</strong> Gardez une liste √† jour de vos cl√©s</li>
            <li><strong>Nettoyage :</strong> Supprimez les cl√©s obsol√®tes</li>
        </ul>

        <h3>üö® D√©pannage</h3>

        <h4>Probl√®mes Courants</h4>
        <div class="warning-box">
            <strong>Solutions :</strong>
            <ul>
                <li><strong>Erreur de chiffrement :</strong> V√©rifiez le mot de passe ma√Ætre</li>
                <li><strong>Cl√© non trouv√©e :</strong> V√©rifiez que la cl√© est bien sauvegard√©e</li>
                <li><strong>Acc√®s refus√© :</strong> V√©rifiez les permissions du dossier</li>
                <li><strong>Corruption :</strong> Restaurez depuis une sauvegarde</li>
            </ul>
        </div>

        <h2 id="depannage">üîß D√©pannage et Support</h2>

        <h3>Probl√®mes Courants</h3>
        
        <h4>Erreurs de Traitement</h4>
        <div class="warning-box">
            <strong>Solutions :</strong>
            <ul>
                <li>V√©rifiez que les fichiers PDF sont lisibles et non corrompus</li>
                <li>Assurez-vous que la cl√© API OpenRouter est valide (si utilis√©e)</li>
                <li>Consultez les logs d√©taill√©s dans l'onglet Logs</li>
                <li>Red√©marrez l'application si n√©cessaire</li>
            </ul>
        </div>

        <h4>Probl√®mes de Performance</h4>
        <ul>
            <li><strong>Traitement lent :</strong> Utilisez Ollama en local pour de meilleures performances</li>
            <li><strong>M√©moire insuffisante :</strong> Fermez d'autres applications</li>
            <li><strong>Espace disque :</strong> V√©rifiez l'espace disponible dans le dossier output</li>
        </ul>

        <h3>Logs et Diagnostic</h3>
        <ul>
            <li><strong>Onglet Logs :</strong> Affichage en temps r√©el des √©v√©nements</li>
            <li><strong>Filtrage :</strong> Par niveau (INFO, WARNING, ERROR)</li>
            <li><strong>Sauvegarde :</strong> Export des logs pour analyse</li>
            <li><strong>Rotation automatique :</strong> Gestion de l'espace disque</li>
        </ul>

        <h3>Support Technique</h3>
        <div class="info-box">
            <strong>En cas de probl√®me :</strong>
            <ul>
                <li>Consultez d'abord ce guide d'aide</li>
                <li>Ex√©cutez les tests automatis√©s pour diagnostiquer</li>
                <li>Sauvegardez les logs et r√©sultats d'erreur</li>
                <li>Contactez le support technique avec les informations collect√©es</li>
            </ul>
        </div>

        <h2>üìû Raccourcis Clavier</h2>
        <ul>
            <li><strong>F1 :</strong> Guide d'aide complet</li>
            <li><strong>F2 :</strong> Tests automatis√©s</li>
            <li><strong>F3 :</strong> Gestionnaire de Cl√©s API S√©curis√©</li>
            <li><strong>Ctrl+O :</strong> Ouvrir des fichiers PDF</li>
            <li><strong>Ctrl+S :</strong> Sauvegarder les logs</li>
            <li><strong>Ctrl+Q :</strong> Quitter l'application</li>
        </ul>

        <h2>üìÅ Structure des Dossiers</h2>
        <ul>
            <li><strong>backend/ :</strong> Modules de traitement et logique m√©tier</li>
            <li><strong>output/ :</strong> Fichiers Excel g√©n√©r√©s</li>
            <li><strong>logs/ :</strong> Fichiers de logs avec rotation</li>
            <li><strong>template/ :</strong> Templates Excel de r√©f√©rence</li>
            <li><strong>tests/ :</strong> Suite de tests automatis√©s</li>
            <li><strong>Commandes/ :</strong> Fichiers PDF de commandes</li>
        </ul>

        <div class="success-box">
            <strong>üéâ Vous √™tes maintenant pr√™t √† utiliser Matelas Processor efficacement !</strong><br>
            Cette application vous accompagne dans le traitement automatis√© de vos commandes de matelas 
            avec pr√©cision et fiabilit√©.
        </div>
        """
        self.show_help_in_window(help_text)
    
    def show_help_in_window(self, help_content):
        """Affiche le guide d'aide dans le navigateur web"""
        try:
            # Cr√©er un fichier HTML temporaire avec le contenu d'aide
            html_content = f"""
            <!DOCTYPE html>
            <html lang="fr">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Guide d'Aide - Matelas Processor</title>
                <style>
                    body {{
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        line-height: 1.6;
                        margin: 0;
                        padding: 20px;
                        background-color: #f5f5f5;
                    }}
                    .container {{
                        max-width: 1000px;
                        margin: 0 auto;
                        background-color: white;
                        padding: 30px;
                        border-radius: 10px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }}
                    h1, h2, h3 {{
                        color: #2c3e50;
                        border-bottom: 2px solid #3498db;
                        padding-bottom: 10px;
                    }}
                    h1 {{
                        text-align: center;
                        color: #2980b9;
                        font-size: 2.5em;
                        margin-bottom: 30px;
                    }}
                    h2 {{
                        color: #34495e;
                        font-size: 1.8em;
                        margin-top: 30px;
                    }}
                    ul, ol {{
                        margin-left: 20px;
                    }}
                    li {{
                        margin-bottom: 8px;
                    }}
                    b {{
                        color: #2980b9;
                    }}
                    code {{
                        background-color: #ecf0f1;
                        padding: 2px 6px;
                        border-radius: 4px;
                        font-family: 'Courier New', monospace;
                    }}
                    .highlight {{
                        background-color: #fff3cd;
                        border: 1px solid #ffeaa7;
                        padding: 15px;
                        border-radius: 5px;
                        margin: 15px 0;
                    }}
                    .info-box {{
                        background-color: #d1ecf1;
                        border: 1px solid #bee5eb;
                        padding: 15px;
                        border-radius: 5px;
                        margin: 15px 0;
                    }}
                    .warning-box {{
                        background-color: #fff3cd;
                        border: 1px solid #ffeaa7;
                        padding: 15px;
                        border-radius: 5px;
                        margin: 15px 0;
                    }}
                    .success-box {{
                        background-color: #d4edda;
                        border: 1px solid #c3e6cb;
                        padding: 15px;
                        border-radius: 5px;
                        margin: 15px 0;
                    }}
                    a {{
                        color: #3498db;
                        text-decoration: none;
                        transition: color 0.3s ease;
                    }}
                    a:hover {{
                        color: #2980b9;
                        text-decoration: underline;
                    }}
                    .nav-link {{
                        cursor: pointer;
                        color: #3498db;
                        text-decoration: none;
                        transition: color 0.3s ease;
                    }}
                    .nav-link:hover {{
                        color: #2980b9;
                        text-decoration: underline;
                    }}
                    .back-to-top {{
                        position: fixed;
                        bottom: 20px;
                        right: 20px;
                        background-color: #3498db;
                        color: white;
                        padding: 10px 15px;
                        border-radius: 5px;
                        text-decoration: none;
                        cursor: pointer;
                        display: none;
                        z-index: 1000;
                    }}
                    .back-to-top:hover {{
                        background-color: #2980b9;
                    }}
                </style>
                <script>
                    // Gestion de la navigation interne
                    document.addEventListener('DOMContentLoaded', function() {{
                        // Gestion des liens de navigation
                        const navLinks = document.querySelectorAll('a[href^="#"]');
                        navLinks.forEach(link => {{
                            link.addEventListener('click', function(e) {{
                                e.preventDefault();
                                const targetId = this.getAttribute('href').substring(1);
                                const targetElement = document.getElementById(targetId);
                                if (targetElement) {{
                                    targetElement.scrollIntoView({{
                                        behavior: 'smooth',
                                        block: 'start'
                                    }});
                                }}
                            }});
                        }});

                        // Bouton "Retour en haut"
                        const backToTop = document.createElement('a');
                        backToTop.href = '#';
                        backToTop.className = 'back-to-top';
                        backToTop.textContent = '‚Üë Retour en haut';
                        backToTop.addEventListener('click', function(e) {{
                            e.preventDefault();
                            window.scrollTo({{
                                top: 0,
                                behavior: 'smooth'
                            }});
                        }});
                        document.body.appendChild(backToTop);

                        // Affichage/masquage du bouton "Retour en haut"
                        window.addEventListener('scroll', function() {{
                            if (window.pageYOffset > 300) {{
                                backToTop.style.display = 'block';
                            }} else {{
                                backToTop.style.display = 'none';
                            }}
                        }});

                        // Ajout d'un effet de surbrillance pour les sections
                        const sections = document.querySelectorAll('h2[id], h3[id]');
                        sections.forEach(section => {{
                            section.addEventListener('mouseenter', function() {{
                                this.style.backgroundColor = '#f8f9fa';
                                this.style.transition = 'background-color 0.3s ease';
                            }});
                            section.addEventListener('mouseleave', function() {{
                                this.style.backgroundColor = '';
                            }});
                        }});
                    }});
                </script>
            </head>
            <body>
                <div class="container">
                    {help_content}
                </div>
            </body>
            </html>
            """
            
            # Cr√©er un fichier temporaire
            import tempfile
            with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
                f.write(html_content)
                temp_file_path = f.name
            
            # Ouvrir le fichier dans le navigateur par d√©faut
            webbrowser.open(f'file://{temp_file_path}')
            
            # Nettoyer le fichier temporaire apr√®s un d√©lai
            import threading
            import time
            def cleanup_temp_file():
                time.sleep(5)  # Attendre 5 secondes
                try:
                    os.unlink(temp_file_path)
                except:
                    pass  # Ignorer les erreurs de suppression
            
            cleanup_thread = threading.Thread(target=cleanup_temp_file, daemon=True)
            cleanup_thread.start()
            
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Impossible d'ouvrir le guide d'aide : {str(e)}")
    
    def show_about(self):
        """Affiche la bo√Æte de dialogue √Ä propos"""
        about_text = """
        <h2>Matelas Processor</h2>
        <p><b>Version :</b> 1.0.0</p>
        <p><b>Description :</b> Application de traitement automatis√© de commandes de matelas</p>
        <p><b>Fonctionnalit√©s :</b></p>
        <ul>
            <li>Extraction automatique des donn√©es PDF</li>
            <li>Analyse LLM pour extraction pr√©cise</li>
            <li>Calculs automatiques des dimensions</li>
            <li>Gestion des donn√©es clients</li>
            <li>Pr√©-import Excel</li>
            <li>Export des r√©sultats</li>
        </ul>
        <p><b>Types de matelas support√©s :</b></p>
        <ul>
            <li>Latex Mixte 7 Zones</li>
            <li>Latex Naturel</li>
            <li>Latex Renforc√©</li>
            <li>Mousse Visco√©lastique</li>
            <li>Mousse Rainur√©e 7 Zones</li>
            <li>Select 43</li>
        </ul>
        <p><b>Support :</b> Consultez le guide d'aide complet (F1)</p>
        """
        
        QMessageBox.about(self, "√Ä propos de Matelas Processor", about_text)

    def show_eula(self):
        """Affiche le contrat d'utilisation (EULA)"""
        eula_file = "EULA.txt"
        if not os.path.exists(eula_file):
            QMessageBox.warning(self, "Fichier manquant", "Le contrat d'utilisation (EULA.txt) est introuvable.")
            return
        try:
            with open(eula_file, 'r', encoding='utf-8') as f:
                eula_content = f.read()
            # Affichage dans une bo√Æte de dialogue
            dlg = QMessageBox(self)
            dlg.setWindowTitle("Contrat d'utilisation (EULA)")
            dlg.setTextFormat(Qt.TextFormat.PlainText)
            dlg.setText(eula_content)
            dlg.setStandardButtons(QMessageBox.StandardButton.Ok)
            dlg.setIcon(QMessageBox.Icon.Information)
            dlg.exec()
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Impossible d'ouvrir le contrat d'utilisation : {str(e)}")

    def check_eula_acceptance(self):
        """V√©rifie si l'utilisateur a accept√© le contrat d'utilisation, sinon l'affiche et bloque l'acc√®s."""
        if os.path.exists(self.eula_accepted_file):
            return
        eula_file = "EULA.txt"
        if not os.path.exists(eula_file):
            QMessageBox.critical(self, "Fichier manquant", "Le contrat d'utilisation (EULA.txt) est introuvable. L'application va se fermer.")
            sys.exit(1)
        try:
            with open(eula_file, 'r', encoding='utf-8') as f:
                eula_content = f.read()
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Impossible de lire le contrat d'utilisation : {str(e)}")
            sys.exit(1)
        from PyQt6.QtWidgets import QDialog, QVBoxLayout, QTextEdit, QCheckBox, QPushButton, QLabel
        dlg = QDialog(self)
        dlg.setWindowTitle("Contrat d'utilisation (EULA)")
        dlg.setModal(True)
        layout = QVBoxLayout(dlg)
        label = QLabel("Veuillez lire et accepter le contrat d'utilisation pour continuer :")
        layout.addWidget(label)
        text = QTextBrowser()
        text.setReadOnly(True)
        text.setPlainText(eula_content)
        layout.addWidget(text)
        accept_box = QCheckBox("J'accepte le contrat d'utilisation")
        layout.addWidget(accept_box)
        btn = QPushButton("Continuer")
        btn.setEnabled(False)
        layout.addWidget(btn)
        accept_box.stateChanged.connect(lambda state: btn.setEnabled(state == 2))
        btn.clicked.connect(dlg.accept)
        dlg.setMinimumSize(600, 500)
        if dlg.exec() == QDialog.DialogCode.Accepted and accept_box.isChecked():
            with open(self.eula_accepted_file, 'w') as f:
                f.write('accepted')
        else:
            QMessageBox.critical(self, "Refus du contrat", "Vous devez accepter le contrat d'utilisation pour utiliser l'application.")
            sys.exit(1)

    def log_message_to_text_browser(self, message, level):
        """Affiche un message de log dans la fen√™tre de texte et met √† jour le statut"""
        try:
            if not hasattr(self, 'app_logger') or self.app_logger is None:
                print(f"[{level}] {message}")
                return
                
            if level == "INFO":
                self.app_logger.info(message)
                self.update_status_indicator("ready")
                self.statusBar().showMessage(f"Info: {message}", 3000)
            elif level == "WARNING":
                self.app_logger.warning(message)
                self.update_status_indicator("warning")
                self.statusBar().showMessage(f"Attention: {message}", 5000)
            elif level == "ERROR":
                self.app_logger.error(message)
                self.update_status_indicator("error")
                self.statusBar().showMessage(f"Erreur: {message}", 8000)
            else:
                self.app_logger.debug(message)
                
        except Exception as e:
            print(f"Erreur dans log_message_to_text_browser: {e}")
    
    def update_status_bar(self):
        """Met √† jour la barre de statut avec le message de log le plus r√©cent"""
        # Cette m√©thode n'est plus n√©cessaire car les messages sont d√©j√† affich√©s dans la fen√™tre de texte
        # Elle est conserv√©e pour √©viter de casser le code existant, mais peut √™tre retir√©e si elle n'est pas utilis√©e.
        pass

    def show_noyau_order_dialog(self):
        """Ouvre la fen√™tre de classement des noyaux (modale drag&drop)"""
        # R√©cup√©rer tous les noyaux distincts rencontr√©s dans les r√©sultats ou dans la config
        noyaux = set(config.get_noyau_order())
        for result in self.all_results:
            for conf in result.get('configurations_matelas', []):
                noyau = conf.get('Noyau') or conf.get('Type')
                if noyau:
                    noyaux.add(noyau)
        noyaux = list(noyaux)
        # Si aucun noyau trouv√©, proposer une liste par d√©faut
        if not noyaux:
            noyaux = [
                "MOUSSE VISCO",
                "LATEX NATUREL",
                "LATEX MIXTE 7 ZONES",
                "MOUSSE RAINUREE 7 ZONES",
                "LATEX RENFORC√â",
                "SELECT 43"
            ]
        
        dialog = NoyauOrderDialog(noyaux, self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            ordered_noyaux = dialog.get_ordered_noyaux()
            config.set_noyau_order(ordered_noyaux)
            QMessageBox.information(self, "Succ√®s", "Ordre des noyaux sauvegard√©!")

    def show_api_keys_dialog(self):
        """Ouvre la fen√™tre de gestion des cl√©s API"""
        dialog = LLMProviderDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.update_provider_status()
            pass

    def show_general_settings_dialog(self):
        """Ouvre la fen√™tre des param√®tres g√©n√©raux"""
        dialog = GeneralSettingsDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            # Mettre √† jour l'affichage du r√©pertoire Excel dans la barre de statut
            self.update_excel_output_status()
    
    def show_tests_dialog(self):
        """Affiche le dialogue des tests automatis√©s"""
        dialog = TestsDialog(self)
        dialog.exec()
    
    def show_cost_dialog(self):
        """Affiche le dialogue de co√ªt OpenRouter"""
        dialog = CostDialog(self)
        dialog.exec()
    
    def show_maintenance_dialog(self):
        """Affiche le dialogue de maintenance avec les fichiers Markdown"""
        dialog = MaintenanceDialog(self)
        dialog.exec()
    
    def show_mapping_config_dialog(self):
        """Affiche le dialogue de configuration des mappings Excel"""
        try:
            # Import du dialogue de configuration des mappings PyQt6
            from mapping_config_dialog_qt import MappingConfigDialog
            dialog = MappingConfigDialog(self)
            dialog.exec()
        except ImportError as e:
            QMessageBox.warning(self, "Erreur", f"Module de configuration des mappings non disponible: {e}")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors de l'ouverture du dialogue de configuration: {e}")
    
    def show_update_manager(self):
        """Affiche le gestionnaire de mises √† jour"""
        try:
            from update_manager_gui import UpdateManagerGUI
            dialog = UpdateManagerGUI()
            dialog.show()
        except ImportError as e:
            QMessageBox.warning(self, "Erreur", f"Gestionnaire de mises √† jour non disponible: {e}")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors du lancement du gestionnaire de mises √† jour: {e}")




class TestsDialog(QDialog):
    """Dialogue pour les tests automatis√©s"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Tests automatis√©s")
        self.setModal(True)
        self.resize(800, 600)
        self.test_thread = None
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Titre de la section tests
        tests_title = QLabel("Syst√®me de Tests Automatis√©s")
        tests_title.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        tests_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(tests_title)
        
        # Description
        description = QLabel("Ex√©cutez les tests pour v√©rifier la qualit√© et les performances de l'application")
        description.setAlignment(Qt.AlignmentFlag.AlignCenter)
        description.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(description)
        
        # Groupe de configuration des tests
        config_group = QGroupBox("Configuration des Tests")
        config_layout = QGridLayout(config_group)
        
        # Options de test
        self.verbose_checkbox = QCheckBox("Mode verbeux")
        self.coverage_checkbox = QCheckBox("G√©n√©rer rapport de couverture")
        config_layout.addWidget(self.verbose_checkbox, 0, 0)
        config_layout.addWidget(self.coverage_checkbox, 0, 1)
        
        layout.addWidget(config_group)
        
        # Groupe des boutons de test
        buttons_group = QGroupBox("Types de Tests")
        buttons_layout = QGridLayout(buttons_group)
        
        # Boutons pour diff√©rents types de tests
        self.install_deps_btn = QPushButton("üì¶ Installer D√©pendances")
        self.install_deps_btn.clicked.connect(lambda: self.run_tests("install_deps"))
        buttons_layout.addWidget(self.install_deps_btn, 0, 0)
        
        self.all_tests_btn = QPushButton("üß™ Tous les Tests")
        self.all_tests_btn.clicked.connect(lambda: self.run_tests("all"))
        buttons_layout.addWidget(self.all_tests_btn, 0, 1)
        
        self.unit_tests_btn = QPushButton("üîß Tests Unitaires")
        self.unit_tests_btn.clicked.connect(lambda: self.run_tests("unit"))
        buttons_layout.addWidget(self.unit_tests_btn, 1, 0)
        
        self.integration_tests_btn = QPushButton("üîó Tests d'Int√©gration")
        self.integration_tests_btn.clicked.connect(lambda: self.run_tests("integration"))
        buttons_layout.addWidget(self.integration_tests_btn, 1, 1)
        
        self.performance_tests_btn = QPushButton("‚ö° Tests de Performance")
        self.performance_tests_btn.clicked.connect(lambda: self.run_tests("performance"))
        buttons_layout.addWidget(self.performance_tests_btn, 2, 0)
        
        self.regression_tests_btn = QPushButton("üîÑ Tests de R√©gression")
        self.regression_tests_btn.clicked.connect(lambda: self.run_tests("regression"))
        buttons_layout.addWidget(self.regression_tests_btn, 2, 1)
        
        layout.addWidget(buttons_group)
        
        # Barre de progression pour les tests
        self.test_progress_bar = QProgressBar()
        self.test_progress_bar.setVisible(False)
        layout.addWidget(self.test_progress_bar)
        
        # Zone de sortie des tests
        output_group = QGroupBox("Sortie des Tests")
        output_layout = QVBoxLayout(output_group)
        
        # Boutons pour la zone de sortie
        output_buttons_layout = QHBoxLayout()
        
        self.clear_tests_btn = QPushButton("üóëÔ∏è Effacer")
        self.clear_tests_btn.clicked.connect(self.clear_tests_output)
        output_buttons_layout.addWidget(self.clear_tests_btn)
        
        self.save_tests_btn = QPushButton("üíæ Sauvegarder")
        self.save_tests_btn.clicked.connect(self.save_tests_output)
        output_buttons_layout.addWidget(self.save_tests_btn)
        
        output_layout.addLayout(output_buttons_layout)
        
        # Zone de texte pour la sortie des tests
        self.tests_output = QTextEdit()
        self.tests_output.setReadOnly(True)
        self.tests_output.setMaximumHeight(300)
        output_layout.addWidget(self.tests_output)
        
        layout.addWidget(output_group)
        
        # Statut des tests
        self.tests_status_label = QLabel("Pr√™t √† ex√©cuter les tests")
        self.tests_status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.tests_status_label.setStyleSheet("color: green; font-weight: bold;")
        layout.addWidget(self.tests_status_label)
        
        # Boutons de dialogue
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Close)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def run_tests(self, test_type):
        """Lance l'ex√©cution des tests"""
        try:
            if self.test_thread and self.test_thread.isRunning():
                QMessageBox.warning(self, "Tests en cours", "Des tests sont d√©j√† en cours d'ex√©cution")
                return
            
            # R√©cup√©ration des options
            verbose = self.verbose_checkbox.isChecked()
            coverage = self.coverage_checkbox.isChecked()
            
            # Mise √† jour de l'interface
            self.test_progress_bar.setVisible(True)
            self.test_progress_bar.setValue(0)
            self.tests_status_label.setText("Tests en cours d'ex√©cution...")
            self.tests_status_label.setStyleSheet("color: orange; font-weight: bold;")
            
            # D√©sactiver les boutons
            self._set_test_buttons_enabled(False)
            
            # Cr√©er et lancer le thread de test
            self.test_thread = TestThread(test_type, verbose, coverage)
            self.test_thread.test_progress.connect(self.on_test_progress)
            self.test_thread.test_output.connect(self.on_test_output)
            self.test_thread.test_finished.connect(self.on_test_finished)
            self.test_thread.test_error.connect(self.on_test_error)
            
            self.test_thread.start()
                
        except Exception as e:
            error_msg = f"Erreur lors du lancement des tests: {e}"
            self.tests_output.append(f"‚ùå {error_msg}")
            self.tests_status_label.setText("Erreur lors du lancement")
            self.tests_status_label.setStyleSheet("color: red; font-weight: bold;")
            self._set_test_buttons_enabled(True)
    
    def on_test_progress(self, value):
        """G√®re la mise √† jour de la progression des tests"""
        self.test_progress_bar.setValue(value)
    
    def on_test_output(self, message, level):
        """G√®re la sortie des tests"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Couleurs selon le niveau
        color_map = {
            "INFO": "black",
            "WARNING": "orange",
            "ERROR": "red",
            "SUCCESS": "green"
        }
        color = color_map.get(level, "black")
        
        # Formatage du message
        formatted_message = f'<span style="color: {color}">[{timestamp}] {message}</span>'
        self.tests_output.append(formatted_message)
        
        # Auto-scroll vers le bas
        scrollbar = self.tests_output.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def on_test_finished(self, results):
        """G√®re la fin des tests"""
        self.test_progress_bar.setVisible(False)
        self._set_test_buttons_enabled(True)
        
        # Analyser les r√©sultats
        total_tests = len(results)
        successful_tests = sum(1 for r in results.values() if r.get('success', False))
        failed_tests = total_tests - successful_tests
        
        if failed_tests == 0:
            self.tests_status_label.setText(f"‚úÖ Tests termin√©s: {successful_tests}/{total_tests} r√©ussis")
            self.tests_status_label.setStyleSheet("color: green; font-weight: bold;")
            self.on_test_output("üéâ Tous les tests ont r√©ussi !", "SUCCESS")
        else:
            self.tests_status_label.setText(f"‚ö†Ô∏è Tests termin√©s: {successful_tests}/{total_tests} r√©ussis, {failed_tests} √©checs")
            self.tests_status_label.setStyleSheet("color: orange; font-weight: bold;")
            self.on_test_output(f"‚ö†Ô∏è {failed_tests} test(s) ont √©chou√©", "WARNING")
        
        # Afficher un r√©sum√© des r√©sultats
        self.on_test_output("", "INFO")
        self.on_test_output("=== R√âSUM√â DES TESTS ===", "INFO")
        for test_name, result in results.items():
            status = "‚úÖ" if result.get('success', False) else "‚ùå"
            self.on_test_output(f"{status} {test_name}", "INFO")
    
    def on_test_error(self, error_msg):
        """G√®re les erreurs des tests"""
        self.test_progress_bar.setVisible(False)
        self._set_test_buttons_enabled(True)
        self.tests_status_label.setText("‚ùå Erreur lors des tests")
        self.tests_status_label.setStyleSheet("color: red; font-weight: bold;")
        self.on_test_output(f"‚ùå Erreur: {error_msg}", "ERROR")
    
    def _set_test_buttons_enabled(self, enabled):
        """Active/d√©sactive les boutons de test"""
        self.install_deps_btn.setEnabled(enabled)
        self.all_tests_btn.setEnabled(enabled)
        self.unit_tests_btn.setEnabled(enabled)
        self.integration_tests_btn.setEnabled(enabled)
        self.performance_tests_btn.setEnabled(enabled)
        self.regression_tests_btn.setEnabled(enabled)
    
    def clear_tests_output(self):
        """Efface la sortie des tests"""
        self.tests_output.clear()
    
    def save_tests_output(self):
        """Sauvegarde la sortie des tests dans un fichier"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Sauvegarder la sortie des tests", 
                f"tests_output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "Fichiers texte (*.txt);;Tous les fichiers (*)"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.tests_output.toPlainText())
                QMessageBox.information(self, "Succ√®s", f"Sortie des tests sauvegard√©e dans {filename}")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la sauvegarde: {e}")


class CostDialog(QDialog):
    """Dialogue pour le co√ªt OpenRouter"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Co√ªt OpenRouter")
        self.setModal(True)
        self.resize(700, 500)
        self.balance_thread = None
        self.init_ui()
        self.load_api_key_from_config()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Titre de la section co√ªt
        cost_title = QLabel("Surveillance OpenRouter")
        cost_title.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        cost_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(cost_title)
        
        # Description
        description = QLabel("Surveillez les limites de votre cl√© API et calculez le co√ªt de vos requ√™tes")
        description.setAlignment(Qt.AlignmentFlag.AlignCenter)
        description.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(description)
        
        # Groupe de configuration
        config_group = QGroupBox("Configuration")
        config_layout = QGridLayout(config_group)
        
        # Cl√© API OpenRouter
        self.api_key_label = QLabel("Cl√© API OpenRouter:")
        self.api_key_input = QLineEdit()
        self.api_key_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_key_input.setPlaceholderText("Entrez votre cl√© API OpenRouter")
        config_layout.addWidget(self.api_key_label, 0, 0)
        config_layout.addWidget(self.api_key_input, 0, 1)
        
        # Bouton pour r√©cup√©rer le solde
        self.refresh_balance_btn = QPushButton("üîÑ Actualiser le solde")
        self.refresh_balance_btn.clicked.connect(self.refresh_openrouter_balance)
        config_layout.addWidget(self.refresh_balance_btn, 1, 0, 1, 2)
        
        layout.addWidget(config_group)
        
        # Groupe d'informations du solde
        balance_group = QGroupBox("Limites de la Cl√© API")
        balance_layout = QGridLayout(balance_group)
        
        # Labels pour afficher les informations
        self.balance_label = QLabel("Limite restante:")
        self.balance_value = QLabel("Non disponible")
        self.balance_value.setStyleSheet("font-weight: bold; color: blue;")
        balance_layout.addWidget(self.balance_label, 0, 0)
        balance_layout.addWidget(self.balance_value, 0, 1)
        
        self.credits_label = QLabel("Utilisation actuelle:")
        self.credits_value = QLabel("Non disponible")
        self.credits_value.setStyleSheet("font-weight: bold; color: green;")
        balance_layout.addWidget(self.credits_label, 1, 0)
        balance_layout.addWidget(self.credits_value, 1, 1)
        
        self.total_spent_label = QLabel("Limite totale:")
        self.total_spent_value = QLabel("Non disponible")
        self.total_spent_value.setStyleSheet("font-weight: bold; color: red;")
        balance_layout.addWidget(self.total_spent_label, 2, 0)
        balance_layout.addWidget(self.total_spent_value, 2, 1)
        
        # Note explicative
        note_label = QLabel("üí° Note: Ces valeurs repr√©sentent les limites de votre cl√© API, pas le solde de votre compte.")
        note_label.setStyleSheet("color: gray; font-style: italic; font-size: 10px;")
        note_label.setWordWrap(True)
        balance_layout.addWidget(note_label, 3, 0, 1, 2)
        
        # Boutons d'acc√®s au portefeuille
        wallet_buttons_layout = QHBoxLayout()
        
        self.wallet_btn = QPushButton("üè¶ Voir Mon Portefeuille")
        self.wallet_btn.clicked.connect(self.open_wallet)
        self.wallet_btn.setStyleSheet("background-color: #4CAF50; color: white; padding: 8px; border-radius: 4px;")
        wallet_buttons_layout.addWidget(self.wallet_btn)
        
        self.recharge_btn = QPushButton("üí≥ Recharger")
        self.recharge_btn.clicked.connect(self.open_recharge)
        self.recharge_btn.setStyleSheet("background-color: #2196F3; color: white; padding: 8px; border-radius: 4px;")
        wallet_buttons_layout.addWidget(self.recharge_btn)
        
        balance_layout.addLayout(wallet_buttons_layout, 4, 0, 1, 2)
        
        layout.addWidget(balance_group)
        
        # Groupe d'informations sur le solde r√©el
        real_balance_group = QGroupBox("Solde R√©el du Compte")
        real_balance_layout = QVBoxLayout(real_balance_group)
        
        # Message explicatif
        real_balance_info = QLabel(
            "üîç <strong>Pour voir votre vrai solde :</strong><br>"
            "‚Ä¢ Cliquez sur 'üè¶ Voir Mon Portefeuille' pour acc√©der √† votre compte OpenRouter<br>"
            "‚Ä¢ Ou connectez-vous directement sur <a href='https://openrouter.ai/account'>openrouter.ai/account</a><br>"
            "‚Ä¢ Le solde r√©el n'est pas accessible via l'API pour des raisons de s√©curit√©"
        )
        real_balance_info.setOpenExternalLinks(True)
        real_balance_info.setWordWrap(True)
        real_balance_info.setStyleSheet("color: #666; padding: 10px; background-color: #f9f9f9; border-radius: 5px;")
        real_balance_layout.addWidget(real_balance_info)
        
        layout.addWidget(real_balance_group)
        
        # Groupe de calcul de co√ªt
        calc_group = QGroupBox("Calcul de Co√ªt par Devis")
        calc_layout = QGridLayout(calc_group)
        
        # Mod√®le s√©lectionn√©
        self.model_label = QLabel("Mod√®le:")
        self.model_combo = QComboBox()
        self.model_combo.addItems([
            "anthropic/claude-3.5-sonnet",
            "anthropic/claude-3-opus",
            "openai/gpt-4o",
            "openai/gpt-4o-mini",
            "meta-llama/llama-3.1-8b-instruct",
            "meta-llama/llama-3.1-70b-instruct"
        ])
        calc_layout.addWidget(self.model_label, 0, 0)
        calc_layout.addWidget(self.model_combo, 0, 1)
        
        # Nombre de tokens estim√©s
        self.tokens_label = QLabel("Tokens estim√©s:")
        self.tokens_input = QSpinBox()
        self.tokens_input.setRange(100, 100000)
        self.tokens_input.setValue(2000)
        self.tokens_input.setSuffix(" tokens")
        calc_layout.addWidget(self.tokens_label, 1, 0)
        calc_layout.addWidget(self.tokens_input, 1, 1)
        
        # Bouton de calcul
        self.calculate_cost_btn = QPushButton("üßÆ Calculer le co√ªt")
        self.calculate_cost_btn.clicked.connect(self.calculate_cost)
        calc_layout.addWidget(self.calculate_cost_btn, 2, 0, 1, 2)
        
        # R√©sultat du calcul
        self.cost_result_label = QLabel("Co√ªt estim√©:")
        self.cost_result_value = QLabel("Cliquez sur 'Calculer'")
        self.cost_result_value.setStyleSheet("font-weight: bold; color: purple;")
        calc_layout.addWidget(self.cost_result_label, 3, 0)
        calc_layout.addWidget(self.cost_result_value, 3, 1)
        
        layout.addWidget(calc_group)
        
        # Groupe d'historique
        history_group = QGroupBox("Historique des Co√ªts")
        history_layout = QVBoxLayout(history_group)
        
        # Boutons pour l'historique
        history_buttons_layout = QHBoxLayout()
        
        self.load_history_btn = QPushButton("üìä Charger l'historique")
        self.load_history_btn.clicked.connect(self.load_cost_history)
        history_buttons_layout.addWidget(self.load_history_btn)
        
        self.clear_history_btn = QPushButton("üóëÔ∏è Effacer l'historique")
        self.clear_history_btn.clicked.connect(self.clear_cost_history)
        history_buttons_layout.addWidget(self.clear_history_btn)
        
        history_layout.addLayout(history_buttons_layout)
        
        # Tableau d'historique
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(5)
        self.history_table.setHorizontalHeaderLabels([
            "Date", "Mod√®le", "Tokens", "Co√ªt ($)", "Total"
        ])
        history_layout.addWidget(self.history_table)
        
        layout.addWidget(history_group)
        
        # Statut
        self.cost_status_label = QLabel("Pr√™t √† calculer les co√ªts")
        self.cost_status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.cost_status_label.setStyleSheet("color: green; font-weight: bold;")
        layout.addWidget(self.cost_status_label)
        
        # Boutons de dialogue
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Close)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def load_api_key_from_config(self):
        """Charge la cl√© API depuis la configuration"""
        try:
            from config import config
            api_key = config.get_openrouter_api_key()
            if api_key:
                self.api_key_input.setText(api_key)
        except Exception as e:
            print(f"Erreur lors du chargement de la cl√© API: {e}")
    
    def refresh_openrouter_balance(self):
        """R√©cup√®re le solde OpenRouter"""
        try:
            api_key = self.api_key_input.text().strip()
            if not api_key:
                QMessageBox.warning(self, "Cl√© API manquante", "Veuillez entrer votre cl√© API OpenRouter")
                return
            
            # D√©sactiver le bouton pendant la requ√™te
            self.refresh_balance_btn.setEnabled(False)
            self.refresh_balance_btn.setText("üîÑ R√©cup√©ration...")
            self.cost_status_label.setText("R√©cup√©ration du solde...")
            self.cost_status_label.setStyleSheet("color: orange; font-weight: bold;")
            
            # Cr√©er et lancer le thread de r√©cup√©ration
            self.balance_thread = BalanceThread(api_key)
            self.balance_thread.balance_ready.connect(self.on_balance_ready)
            self.balance_thread.balance_error.connect(self.on_balance_error)
            self.balance_thread.start()
            
        except Exception as e:
            error_msg = f"Erreur lors de la r√©cup√©ration du solde: {e}"
            self.cost_status_label.setText("Erreur lors de la r√©cup√©ration")
            self.cost_status_label.setStyleSheet("color: red; font-weight: bold;")
            self.refresh_balance_btn.setEnabled(True)
            self.refresh_balance_btn.setText("üîÑ Actualiser le solde")
            QMessageBox.warning(self, "Erreur", error_msg)
    
    def on_balance_ready(self, balance_data):
        """G√®re la r√©ception des donn√©es de solde"""
        try:
            # Mettre √† jour l'interface
            self.refresh_balance_btn.setEnabled(True)
            self.refresh_balance_btn.setText("üîÑ Actualiser le solde")
            self.cost_status_label.setText("Solde r√©cup√©r√© avec succ√®s")
            self.cost_status_label.setStyleSheet("color: green; font-weight: bold;")
            
            # Afficher les donn√©es
            if 'remaining' in balance_data:
                self.balance_value.setText(f"${balance_data['remaining']:.2f}")
            else:
                self.balance_value.setText("Non disponible")
            
            if 'used' in balance_data:
                self.credits_value.setText(f"${balance_data['used']:.2f}")
            else:
                self.credits_value.setText("Non disponible")
            
            if 'total' in balance_data:
                self.total_spent_value.setText(f"${balance_data['total']:.2f}")
            else:
                self.total_spent_value.setText("Non disponible")
            
        except Exception as e:
            error_msg = f"Erreur lors de l'affichage du solde: {e}"
            self.cost_status_label.setText("Erreur d'affichage")
            self.cost_status_label.setStyleSheet("color: red; font-weight: bold;")
            QMessageBox.warning(self, "Erreur", error_msg)
    
    def on_balance_error(self, error_msg):
        """G√®re les erreurs de r√©cup√©ration du solde"""
        self.refresh_balance_btn.setEnabled(True)
        self.refresh_balance_btn.setText("üîÑ Actualiser le solde")
        self.cost_status_label.setText("Erreur lors de la r√©cup√©ration")
        self.cost_status_label.setStyleSheet("color: red; font-weight: bold;")
        QMessageBox.warning(self, "Erreur", error_msg)
    
    def calculate_cost(self):
        """Calcule le co√ªt estim√© pour un mod√®le et un nombre de tokens"""
        try:
            model = self.model_combo.currentText()
            tokens = self.tokens_input.value()
            
            # Tarifs OpenRouter (en $ par 1M tokens)
            rates = {
                "anthropic/claude-3.5-sonnet": 3.0,
                "anthropic/claude-3-opus": 15.0,
                "openai/gpt-4o": 5.0,
                "openai/gpt-4o-mini": 0.15,
                "meta-llama/llama-3.1-8b-instruct": 0.2,
                "meta-llama/llama-3.1-70b-instruct": 0.8
            }
            
            if model in rates:
                rate = rates[model]
                cost = (tokens / 1000000) * rate
                self.cost_result_value.setText(f"${cost:.6f}")
                
                # Ajouter √† l'historique
                self.add_to_history(model, tokens, cost)
            else:
                self.cost_result_value.setText("Mod√®le non reconnu")
                
        except Exception as e:
            error_msg = f"Erreur lors du calcul: {e}"
            self.cost_result_value.setText("Erreur")
            QMessageBox.warning(self, "Erreur", error_msg)
    
    def add_to_history(self, model, tokens, cost):
        """Ajoute un calcul √† l'historique"""
        try:
            # Charger l'historique existant
            history_file = "cost_history.json"
            history = []
            
            if os.path.exists(history_file):
                with open(history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
            
            # Ajouter le nouveau calcul
            new_entry = {
                "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "model": model,
                "tokens": tokens,
                "cost": cost
            }
            history.append(new_entry)
            
            # Sauvegarder l'historique
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, indent=2, ensure_ascii=False)
            
            # Mettre √† jour l'affichage
            self.load_cost_history()
            
        except Exception as e:
            print(f"Erreur lors de l'ajout √† l'historique: {e}")
    
    def load_cost_history(self):
        """Charge et affiche l'historique des co√ªts"""
        try:
            history_file = "cost_history.json"
            if not os.path.exists(history_file):
                self.history_table.setRowCount(0)
                return
            
            with open(history_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
            
            # Afficher dans le tableau
            self.history_table.setRowCount(len(history))
            
            total_cost = 0
            for i, entry in enumerate(history):
                self.history_table.setItem(i, 0, QTableWidgetItem(entry.get('date', '')))
                self.history_table.setItem(i, 1, QTableWidgetItem(entry.get('model', '')))
                self.history_table.setItem(i, 2, QTableWidgetItem(str(entry.get('tokens', 0))))
                cost = entry.get('cost', 0)
                self.history_table.setItem(i, 3, QTableWidgetItem(f"${cost:.6f}"))
                total_cost += cost
            
            # Afficher le total
            if history:
                self.history_table.setItem(len(history)-1, 4, QTableWidgetItem(f"${total_cost:.6f}"))
            
            # Ajuster la largeur des colonnes
            self.history_table.resizeColumnsToContents()
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors du chargement de l'historique: {e}")
    
    def clear_cost_history(self):
        """Efface l'historique des co√ªts"""
        try:
            reply = QMessageBox.question(
                self, "Confirmation", 
                "√ätes-vous s√ªr de vouloir effacer tout l'historique des co√ªts ?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                history_file = "cost_history.json"
                if os.path.exists(history_file):
                    os.remove(history_file)
                self.history_table.setRowCount(0)
                QMessageBox.information(self, "Succ√®s", "Historique des co√ªts effac√©")
                
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de l'effacement: {e}")
    
    def open_wallet(self):
        """Ouvre le portefeuille OpenRouter dans le navigateur"""
        try:
            webbrowser.open("https://openrouter.ai/account")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Impossible d'ouvrir le navigateur: {e}")
    
    def open_recharge(self):
        """Ouvre la page de recharge OpenRouter dans le navigateur"""
        try:
            webbrowser.open("https://openrouter.ai/account/billing")
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Impossible d'ouvrir le navigateur: {e}")


class GeneralSettingsDialog(QDialog):
    """Dialogue pour les param√®tres g√©n√©raux de l'application"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Param√®tres g√©n√©raux")
        self.setModal(True)
        self.resize(600, 400)
        self.init_ui()
        self.load_current_settings()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # R√©pertoire de sortie Excel
        excel_group = QGroupBox("R√©pertoire de sortie Excel")
        excel_layout = QFormLayout(excel_group)
        
        self.excel_output_dir = QLineEdit()
        self.excel_output_dir.setPlaceholderText("Chemin vers le r√©pertoire de sortie des fichiers Excel")
        
        browse_btn = QPushButton("Parcourir...")
        browse_btn.clicked.connect(self.browse_excel_directory)
        
        excel_dir_layout = QHBoxLayout()
        excel_dir_layout.addWidget(self.excel_output_dir)
        excel_dir_layout.addWidget(browse_btn)
        
        excel_layout.addRow("R√©pertoire de sortie:", excel_dir_layout)
        layout.addWidget(excel_group)
        
        # Informations sur le r√©pertoire
        self.dir_info = QLabel()
        self.dir_info.setWordWrap(True)
        self.dir_info.setStyleSheet("color: gray; font-size: 10px;")
        layout.addWidget(self.dir_info)
        
        # Boutons de dialogue
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def browse_excel_directory(self):
        """Ouvre un dialogue pour s√©lectionner le r√©pertoire de sortie Excel"""
        current_dir = self.excel_output_dir.text()
        if not current_dir:
            current_dir = os.getcwd()
        
        directory = QFileDialog.getExistingDirectory(
            self, 
            "S√©lectionner le r√©pertoire de sortie Excel",
            current_dir
        )
        
        if directory:
            self.excel_output_dir.setText(directory)
            self.update_directory_info()
    
    def update_directory_info(self):
        """Met √† jour les informations sur le r√©pertoire s√©lectionn√©"""
        directory = self.excel_output_dir.text()
        if directory:
            if os.path.exists(directory):
                if os.path.isdir(directory):
                    # Compter les fichiers Excel existants
                    excel_files = [f for f in os.listdir(directory) if f.endswith('.xlsx')]
                    self.dir_info.setText(
                        f"‚úÖ R√©pertoire valide\n"
                        f"üìÅ {len(excel_files)} fichier(s) Excel existant(s)\n"
                        f"üìÇ Chemin: {directory}"
                    )
                else:
                    self.dir_info.setText("‚ùå Le chemin sp√©cifi√© n'est pas un r√©pertoire")
            else:
                self.dir_info.setText("‚ö†Ô∏è Le r√©pertoire sera cr√©√© automatiquement lors de la premi√®re utilisation")
        else:
            self.dir_info.setText("‚ÑπÔ∏è Utilisation du r√©pertoire par d√©faut (output/)")
    
    def load_current_settings(self):
        """Charge les param√®tres actuels"""
        try:
            from config import config
            current_dir = config.get_excel_output_directory()
            self.excel_output_dir.setText(current_dir)
            self.update_directory_info()
        except Exception as e:
            print(f"Erreur lors du chargement des param√®tres: {e}")
    
    def accept(self):
        """Sauvegarde les param√®tres et ferme le dialogue"""
        try:
            from config import config
            directory = self.excel_output_dir.text().strip()
            
            if directory:
                # Normaliser le chemin
                directory = os.path.abspath(directory)
                config.set_excel_output_directory(directory)
            
            super().accept()
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Erreur lors de la sauvegarde des param√®tres: {e}")


class MaintenanceDialog(QDialog):
    """Dialog pour afficher les fichiers de maintenance (Markdown)"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üìö Maintenance - Documentation")
        self.setModal(True)
        self.resize(1000, 700)
        self.md_files = []
        self.init_ui()
        self.scan_md_files()
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        layout = QVBoxLayout()
        
        # En-t√™te avec titre et bouton de rafra√Æchissement
        header_layout = QHBoxLayout()
        
        title_label = QLabel("üìö Documentation de Maintenance")
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        # Bouton de rafra√Æchissement
        refresh_btn = QPushButton("üîÑ Actualiser")
        refresh_btn.setToolTip("Actualiser la liste des fichiers de documentation")
        refresh_btn.clicked.connect(self.scan_md_files)
        header_layout.addWidget(refresh_btn)
        
        layout.addLayout(header_layout)
        
        # S√©parateur
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        layout.addWidget(separator)
        
        # Zone principale avec liste et aper√ßu
        main_layout = QHBoxLayout()
        
        # Panneau gauche : liste des fichiers
        left_panel = QVBoxLayout()
        
        list_label = QLabel("üìÑ Fichiers de documentation disponibles :")
        list_label.setStyleSheet("font-weight: bold; margin-bottom: 5px;")
        left_panel.addWidget(list_label)
        
        # Liste des fichiers
        self.file_list = QListWidget()
        self.file_list.setMaximumWidth(400)
        self.file_list.itemClicked.connect(self.on_file_selected)
        left_panel.addWidget(self.file_list)
        
        # Informations sur le fichier s√©lectionn√©
        self.file_info_label = QLabel("S√©lectionnez un fichier pour voir son contenu")
        self.file_info_label.setStyleSheet("color: gray; font-style: italic; padding: 5px;")
        self.file_info_label.setWordWrap(True)
        left_panel.addWidget(self.file_info_label)
        
        main_layout.addLayout(left_panel)
        
        # S√©parateur vertical
        v_separator = QFrame()
        v_separator.setFrameShape(QFrame.Shape.VLine)
        v_separator.setFrameShadow(QFrame.Shadow.Sunken)
        main_layout.addWidget(v_separator)
        
        # Panneau droit : aper√ßu du contenu
        right_panel = QVBoxLayout()
        
        preview_label = QLabel("üìñ Aper√ßu du contenu :")
        preview_label.setStyleSheet("font-weight: bold; margin-bottom: 5px;")
        right_panel.addWidget(preview_label)
        
        # Zone d'aper√ßu avec scroll
        self.preview_area = QTextBrowser()
        self.preview_area.setOpenExternalLinks(True)
        self.preview_area.setStyleSheet("""
            QTextBrowser {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                padding: 10px;
                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                font-size: 12px;
                line-height: 1.4;
            }
        """)
        right_panel.addWidget(self.preview_area)
        
        # Boutons d'action
        action_layout = QHBoxLayout()
        
        self.open_file_btn = QPushButton("üìÇ Ouvrir le fichier")
        self.open_file_btn.setEnabled(False)
        self.open_file_btn.clicked.connect(self.open_selected_file)
        action_layout.addWidget(self.open_file_btn)
        
        self.copy_path_btn = QPushButton("üìã Copier le chemin")
        self.copy_path_btn.setEnabled(False)
        self.copy_path_btn.clicked.connect(self.copy_file_path)
        action_layout.addWidget(self.copy_path_btn)
        
        action_layout.addStretch()
        
        # Bouton fermer
        close_btn = QPushButton("Fermer")
        close_btn.clicked.connect(self.accept)
        action_layout.addWidget(close_btn)
        
        right_panel.addLayout(action_layout)
        main_layout.addLayout(right_panel)
        
        layout.addLayout(main_layout)
        
        # Barre de statut
        self.status_label = QLabel("Pr√™t")
        self.status_label.setStyleSheet("color: gray; font-style: italic; padding: 5px; border-top: 1px solid #dee2e6;")
        layout.addWidget(self.status_label)
        
        self.setLayout(layout)
    
    def scan_md_files(self):
        """Scanne et charge tous les fichiers Markdown du projet"""
        try:
            self.status_label.setText("Scan en cours...")
            self.md_files = []
            self.file_list.clear()
            
            # Scanner le r√©pertoire racine et les sous-r√©pertoires
            for root, dirs, files in os.walk('.'):
                # Ignorer les r√©pertoires syst√®me
                dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules', 'venv', 'env']]
                
                for file in files:
                    if file.lower().endswith('.md'):
                        file_path = os.path.join(root, file)
                        # Chemin relatif pour l'affichage
                        rel_path = os.path.relpath(file_path, '.')
                        
                        # Obtenir les informations du fichier
                        try:
                            stat = os.stat(file_path)
                            size = stat.st_size
                            modified = datetime.fromtimestamp(stat.st_mtime)
                            
                            # Lire les premi√®res lignes pour extraire le titre
                            title = self.extract_title_from_md(file_path)
                            
                            file_info = {
                                'path': file_path,
                                'rel_path': rel_path,
                                'title': title,
                                'size': size,
                                'modified': modified
                            }
                            
                            self.md_files.append(file_info)
                            
                        except Exception as e:
                            logger.warning(f"Erreur lors de la lecture du fichier {file_path}: {e}")
            
            # Trier par date de modification (plus r√©cent en premier)
            self.md_files.sort(key=lambda x: x['modified'], reverse=True)
            
            # Ajouter les fichiers √† la liste
            for file_info in self.md_files:
                item = QListWidgetItem()
                
                # Cr√©er le texte d'affichage
                display_text = f"{file_info['title']}\n"
                display_text += f"üìÅ {file_info['rel_path']}\n"
                display_text += f"üìÖ {file_info['modified'].strftime('%d/%m/%Y %H:%M')} ‚Ä¢ "
                display_text += f"üìè {self.format_file_size(file_info['size'])}"
                
                item.setText(display_text)
                item.setData(Qt.ItemDataRole.UserRole, file_info)
                
                self.file_list.addItem(item)
            
            self.status_label.setText(f"Scan termin√© : {len(self.md_files)} fichiers trouv√©s")
            
        except Exception as e:
            error_msg = f"Erreur lors du scan des fichiers : {str(e)}"
            self.status_label.setText(error_msg)
            logger.error(error_msg)
    
    def extract_title_from_md(self, file_path):
        """Extrait le titre d'un fichier Markdown"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
                # Chercher le premier titre (# ou ##)
                for line in lines[:10]:  # Limiter aux 10 premi√®res lignes
                    line = line.strip()
                    if line.startswith('# '):
                        return line[2:].strip()
                    elif line.startswith('## '):
                        return line[3:].strip()
                
                # Si pas de titre trouv√©, utiliser le nom du fichier
                return os.path.splitext(os.path.basename(file_path))[0]
                
        except Exception:
            return os.path.splitext(os.path.basename(file_path))[0]
    
    def format_file_size(self, size_bytes):
        """Formate la taille d'un fichier en format lisible"""
        if size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes / 1024:.1f} KB"
        else:
            return f"{size_bytes / (1024 * 1024):.1f} MB"
    
    def on_file_selected(self, item):
        """Appel√© quand un fichier est s√©lectionn√© dans la liste"""
        file_info = item.data(Qt.ItemDataRole.UserRole)
        if file_info:
            self.display_file_content(file_info)
            self.open_file_btn.setEnabled(True)
            self.copy_path_btn.setEnabled(True)
    
    def display_file_content(self, file_info):
        """Affiche le contenu d'un fichier Markdown"""
        try:
            self.status_label.setText(f"Chargement de {file_info['rel_path']}...")
            
            with open(file_info['path'], 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Convertir le Markdown en HTML pour un meilleur affichage
            html_content = self.markdown_to_html(content)
            
            # Ajouter des m√©tadonn√©es
            html_header = f"""
            <div style="background-color: #e9ecef; padding: 10px; border-radius: 4px; margin-bottom: 15px;">
                <h3 style="margin: 0 0 10px 0; color: #495057;">{file_info['title']}</h3>
                <p style="margin: 5px 0; color: #6c757d; font-size: 12px;">
                    üìÅ <strong>Chemin :</strong> {file_info['rel_path']}<br>
                    üìÖ <strong>Modifi√© :</strong> {file_info['modified'].strftime('%d/%m/%Y √† %H:%M')}<br>
                    üìè <strong>Taille :</strong> {self.format_file_size(file_info['size'])}
                </p>
            </div>
            <hr style="margin: 20px 0;">
            """
            
            self.preview_area.setHtml(html_header + html_content)
            self.file_info_label.setText(f"Fichier s√©lectionn√© : {file_info['rel_path']}")
            self.status_label.setText("Contenu charg√© avec succ√®s")
            
        except Exception as e:
            error_msg = f"Erreur lors de la lecture du fichier : {str(e)}"
            self.preview_area.setPlainText(error_msg)
            self.status_label.setText(error_msg)
            logger.error(error_msg)
    
    def markdown_to_html(self, markdown_text):
        """Convertit le Markdown en HTML basique"""
        try:
            # Import de markdown si disponible
            try:
                import markdown
                return markdown.markdown(markdown_text, extensions=['fenced_code', 'tables', 'codehilite'])
            except ImportError:
                # Conversion basique si markdown n'est pas disponible
                return self.simple_markdown_to_html(markdown_text)
        except Exception:
            # Fallback : afficher le texte brut
            return f"<pre>{markdown_text}</pre>"
    
    def simple_markdown_to_html(self, text):
        """Conversion Markdown vers HTML basique"""
        import re
        
        # √âchapper les caract√®res sp√©ciaux HTML
        text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        
        # Titres
        text = re.sub(r'^### (.*$)', r'<h3>\1</h3>', text, flags=re.MULTILINE)
        text = re.sub(r'^## (.*$)', r'<h2>\1</h2>', text, flags=re.MULTILINE)
        text = re.sub(r'^# (.*$)', r'<h1>\1</h1>', text, flags=re.MULTILINE)
        
        # Code inline
        text = re.sub(r'`([^`]+)`', r'<code>\1</code>', text)
        
        # Code blocks
        text = re.sub(r'```(\w+)?\n(.*?)```', r'<pre><code>\2</code></pre>', text, flags=re.DOTALL)
        
        # Liens
        text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', text)
        
        # Gras
        text = re.sub(r'\*\*([^*]+)\*\*', r'<strong>\1</strong>', text)
        
        # Italique
        text = re.sub(r'\*([^*]+)\*', r'<em>\1</em>', text)
        
        # Listes
        text = re.sub(r'^\* (.*$)', r'<li>\1</li>', text, flags=re.MULTILINE)
        text = re.sub(r'^- (.*$)', r'<li>\1</li>', text, flags=re.MULTILINE)
        
        # Paragraphes
        text = re.sub(r'\n\n', r'</p><p>', text)
        text = f'<p>{text}</p>'
        
        return text
    
    def open_selected_file(self):
        """Ouvre le fichier s√©lectionn√© avec l'application par d√©faut"""
        current_item = self.file_list.currentItem()
        if current_item:
            file_info = current_item.data(Qt.ItemDataRole.UserRole)
            if file_info:
                try:
                    import subprocess
                    import platform
                    
                    if platform.system() == 'Darwin':  # macOS
                        subprocess.run(['open', file_info['path']])
                    elif platform.system() == 'Windows':
                        subprocess.run(['start', file_info['path']], shell=True)
                    else:  # Linux
                        subprocess.run(['xdg-open', file_info['path']])
                    
                    self.status_label.setText(f"Fichier ouvert : {file_info['rel_path']}")
                    
                except Exception as e:
                    error_msg = f"Erreur lors de l'ouverture du fichier : {str(e)}"
                    self.status_label.setText(error_msg)
                    logger.error(error_msg)
    
    def copy_file_path(self):
        """Copie le chemin du fichier dans le presse-papiers"""
        current_item = self.file_list.currentItem()
        if current_item:
            file_info = current_item.data(Qt.ItemDataRole.UserRole)
            if file_info:
                try:
                    clipboard = QApplication.clipboard()
                    clipboard.setText(file_info['path'])
                    self.status_label.setText("Chemin copi√© dans le presse-papiers")
                    
                except Exception as e:
                    error_msg = f"Erreur lors de la copie : {str(e)}"
                    self.status_label.setText(error_msg)
                    logger.error(error_msg)


class NoyauOrderDialog(QDialog):
    """Dialogue pour classer l'ordre des noyaux par glisser-d√©poser"""
    def __init__(self, noyaux, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Classement des noyaux")
        self.setModal(True)
        self.resize(400, 500)
        layout = QVBoxLayout(self)
        label = QLabel("Classez les noyaux par glisser-d√©poser :")
        layout.addWidget(label)
        self.list_widget = QListWidget()
        self.list_widget.setDragDropMode(QListWidget.DragDropMode.InternalMove)
        for noyau in noyaux:
            item = QListWidgetItem(noyau)
            self.list_widget.addItem(item)
        layout.addWidget(self.list_widget)
        buttons = QHBoxLayout()
        ok_button = QPushButton("OK")
        cancel_button = QPushButton("Annuler")
        ok_button.clicked.connect(self.accept)
        cancel_button.clicked.connect(self.reject)
        buttons.addWidget(ok_button)
        buttons.addWidget(cancel_button)
        layout.addLayout(buttons)
    
    def get_ordered_noyaux(self):
        """Retourne la liste des noyaux dans l'ordre choisi"""
        return [self.list_widget.item(i).text() for i in range(self.list_widget.count())]


def main():
    """Point d'entr√©e de l'application"""
    from PyQt6.QtWidgets import QSplashScreen
    from PyQt6.QtCore import Qt
    from PyQt6.QtGui import QPixmap
    import time

    app = QApplication(sys.argv)
    
    # Splash screen avec le logo
    try:
        splash_pix = QPixmap("assets/lit-double.png").scaledToHeight(200, Qt.TransformationMode.SmoothTransformation)
        splash = QSplashScreen(splash_pix)
        splash.show()
        app.processEvents()
        time.sleep(2)  # Affiche le splash pendant 2 secondes
    except Exception as e:
        print(f"Erreur lors de l'affichage du splash screen: {e}")

    # Style global
    app.setStyle('Fusion')
    
    # Cr√©ation et affichage de la fen√™tre principale
    try:
        window = MatelasApp()
        window.show()
        if 'splash' in locals():
            splash.finish(window)
    except Exception as e:
        print(f"Erreur lors de la cr√©ation de la fen√™tre principale: {e}")
        sys.exit(1)
    
    # Lancement de l'application
    sys.exit(app.exec())


if __name__ == "__main__":
    main() 