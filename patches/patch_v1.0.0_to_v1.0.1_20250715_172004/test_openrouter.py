#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'int√©gration d'OpenRouter
"""

import asyncio
import httpx
import json
import os

async def test_openrouter_integration():
    """Test l'int√©gration d'OpenRouter avec un exemple simple"""
    
    # V√©rifier si la cl√© API est disponible
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå Erreur: Cl√© API OpenRouter manquante")
        print("D√©finissez la variable d'environnement OPENROUTER_API_KEY")
        return False
    
    # Exemple de texte de devis
    test_text = """
    DEVIS N¬∞ 2024-001
    
    Client: Jean Dupont
    Adresse: 123 Rue de la Paix, 75001 Paris
    
    Literie: 160/200
    
    MATELAS JUMEAUX - LATEX 100% NATUREL - 160x200cm    2,00
    HOUSSE DE MATELAS - COTON 100% - 160x200cm          2,00
    SOMMIER √Ä LATTES - BOIS MASSIF - 160x200cm          1,00
    PACK DE 4 PIEDS - CH√äNE MASSIF                       1,00
    
    Remise: 5% enl√®vement par vos soins
    """
    
    # Prompt sp√©cialis√© (m√™me que dans l'application)
    prompt = f"""Tu es un assistant charg√© d'analyser le texte brut d'un devis et d'en extraire uniquement les √©l√©ments suivants :

0. Tu identifies les dimensions du projet dans la ligne qui commence par "Literie" ou contenant un format de type "XXX / XXX".
1. Pour chaque matelas : la description compl√®te (sans rien omettre) et la quantit√©. Si plusieurs matelas sont regroup√©s sur une ligne, identifie correctement la quantit√© m√™me si elle est √©crite sous forme "2x", "x2", "2,00", ou "2.00". Si deux matelas diff√©rents apparaissent dans deux lignes s√©par√©es, d√©tecte-les individuellement.
Important : parfois, la quantit√© est indiqu√©e dans une colonne s√©par√©e, en d√©but ou fin de ligne, par exemple :
698,50     2,00   MATELAS JUMEAUX - LATEX 100% NATUREL ...
Dans ce cas, tu dois associer la valeur `2,00` √† cette ligne de description comme la quantit√©, m√™me si le nombre est sur une ligne au-dessus ou d√©cal√©e.
2. Pour chaque housse : la description compl√®te (sans rien omettre) et la quantit√©.
3. Pour les pieds : la description compl√®te (en tenant compte des packs, ex: "pack de 4 pieds") et la quantit√©.
4. Pour chaque sommier : la description compl√®te (sans rien omettre) et la quantit√©. **Un sommier commence toujours par le mot "SOMMIER" ou "SOMMIERS".** Ne consid√®re jamais un "LIT MOTORIS√â" comme un sommier, m√™me s'il contient "motoris√©" ou "moteur".
5. Toutes les informations client (nom, adresse, email, t√©l√©phone, etc.).
6. Tous les autres articles non list√©s ci-dessus doivent √™tre regroup√©s dans une cat√©gorie **"Autres"**, avec leur description compl√®te et quantit√©. **N'inclus pas les lignes contenant uniquement une remise, une mention administrative, ou des informations contractuelles.**
‚ö†Ô∏è IMPORTANT : Ne supprime jamais une ligne contenant le mot "remise" si elle contient √©galement les mots "enl√®vement", "livraison" ou "exp√©dition".
Dans ce cas, conserve cette ligne dans "Autres" avec sa description compl√®te, et d√©tecte la valeur "mode de mise √† disposition" selon les r√®gles suivantes :
- Si elle contient "enl√®vement" ou "par vos soins" ‚Üí "ENL√àVEMENT CLIENT"
- Si elle contient "livraison", "livrer" ou "livr√©" ‚Üí "LIVRAISON"
- Si elle contient "exp√©dition" ou "exp√©di√©" ‚Üí "EXP√âDITION"
6bis. Si une ligne contient une remise ET une mention de livraison, d'enl√®vement ou d'exp√©dition (ex : "remise : 5% enl√®vement par vos soins"), utilise cette ligne pour d√©terminer le champ `"mode de mise √† disposition"` avec les valeurs suivantes :
- Si elle contient "enl√®vement" ou "par vos soins" ‚Üí `"ENL√àVEMENT CLIENT"`
- Si elle contient "livraison", "livrer" ou "livr√©" ‚Üí `"LIVRAISON"`
- Si elle contient "exp√©dition" ou "exp√©di√©" ‚Üí `"EXP√âDITION"`
7. Tu identifies si tu trouves des articles DOSSERET ou TETE (attention : majuscules ou minuscules, avec ou sans accents) et tu indiques `"dosseret / tete"` en fonction de ce que tu trouves.
8. Pour chaque matelas, tu identifies s'il s'agit de `"jumeaux"` ou de `"1 pi√®ce"` dans un champ `"jumeau ou 1 pi√®ce"`.
9. Si une taille au format `XX/XXX` est pr√©sente √† la fin de la ligne de description (ex : `69/ 189` ou `69 / 189`), transforme-la en `"XX x XXX"` et place-la dans un champ `"dimension_housse"`.
10. Si la description du matelas contient un motif de type `XX/XXX"/` (avec ou sans guillemets, slash, ou espaces), transforme-le en `"XX x XXX"` et stocke cette valeur dans le champ `"dimension_housse"`.
11. Si une taille au format `XX/XXX"` ou `XX / XXX"` ou similaire (avec ou sans slash, espace ou guillemet) est pr√©sente dans la description du matelas, transforme-la en `"XX x XXX"` et place-la dans le champ `"dimension_housse"`.

Tu dois toujours inclure le champ `"dimension_housse"` dans les matelas si une telle information est d√©tect√©e.

Tu ne dois **jamais inclure de prix, montants, remises ou d√©lais.**

Renvoie le r√©sultat sous forme JSON **exactement** dans ce format :

```json
{{
  "Matelas": [
    {{
      "description": "...",
      "quantit√©": ...,
      "jumeau ou 1 pi√®ce": "...",
      "dosseret / tete": "...",
      "dimension_housse": "..."
    }}
  ],
  "Housse": [
    {{
      "description": "...",
      "quantit√©": ...
    }}
  ],
  "Pieds": [
    {{
      "description": "...",
      "quantit√©": ...
    }}
  ],
  "Sommier": [
    {{
      "description": "...",
      "quantit√©": ...
    }}
  ],
  "Autres": [
    {{
      "description": "...",
      "quantit√©": ...
    }}
  ],
  "Client": {{
    "nom": "...",
    "adresse": "...",
    "Dimension projet": "..."
  }}
}}
```

le texte est: {test_text}"""
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "openai/gpt-4-turbo",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.1
    }
    
    try:
        print("üöÄ Test de l'int√©gration OpenRouter...")
        print(f"üìù Texte de test: {len(test_text)} caract√®res")
        
        async with httpx.AsyncClient() as client:
            print("üì° Envoi de la requ√™te √† OpenRouter...")
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions", 
                headers=headers, 
                json=payload, 
                timeout=60
            )
            
            print(f"üì• R√©ponse re√ßue - Status: {response.status_code}")
            
            if response.status_code != 200:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                print(f"R√©ponse: {response.text}")
                return False
            
            data = response.json()
            raw_response = data["choices"][0]["message"]["content"]
            
            print("‚úÖ R√©ponse OpenRouter re√ßue avec succ√®s")
            print(f"üìÑ Longueur de la r√©ponse: {len(raw_response)} caract√®res")
            
            # Test du parsing JSON
            try:
                # Nettoyage basique (comme dans l'application)
                import re
                cleaned = re.sub(r'^[\s\S]*?```json', '', raw_response, flags=re.IGNORECASE)
                cleaned = re.sub(r'```[\s\S]*$', '', cleaned)
                cleaned = cleaned.strip()
                
                parsed = json.loads(cleaned)
                print("‚úÖ JSON pars√© avec succ√®s")
                
                # Affichage du r√©sultat
                print("\nüìä R√©sultat de l'analyse:")
                print(f"  - Matelas: {len(parsed.get('Matelas', []))}")
                print(f"  - Housses: {len(parsed.get('Housse', []))}")
                print(f"  - Sommiers: {len(parsed.get('Sommier', []))}")
                print(f"  - Pieds: {len(parsed.get('Pieds', []))}")
                print(f"  - Autres: {len(parsed.get('Autres', []))}")
                
                if parsed.get('Client'):
                    print(f"  - Client: {parsed['Client'].get('nom', 'N/A')}")
                
                print("\nüìã D√©tails:")
                print(json.dumps(parsed, indent=2, ensure_ascii=False))
                
                return True
                
            except json.JSONDecodeError as e:
                print(f"‚ùå Erreur parsing JSON: {e}")
                print(f"üìÑ R√©ponse brute: {raw_response}")
                return False
                
    except httpx.ConnectError as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    except httpx.TimeoutException as e:
        print(f"‚ùå Timeout: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Test d'int√©gration OpenRouter")
    print("=" * 50)
    
    success = asyncio.run(test_openrouter_integration())
    
    if success:
        print("\n‚úÖ Test r√©ussi! L'int√©gration OpenRouter fonctionne correctement.")
    else:
        print("\n‚ùå Test √©chou√©. V√©rifiez la configuration d'OpenRouter.") 