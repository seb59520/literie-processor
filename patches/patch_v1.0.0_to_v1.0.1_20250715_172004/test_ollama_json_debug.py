#!/usr/bin/env python3
"""
Test de diagnostic pour le probl√®me JSON avec Ollama
"""

import asyncio
import httpx
import json
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_ollama_json():
    """Test simple pour diagnostiquer le probl√®me JSON avec Ollama"""
    
    # Texte de test simple
    test_text = """DEVIS LITERIE
Client: Mr et Me YVOZ DAVID ET MARIE-PIERRE
Adresse: 1780 CHEMIN DE ZERMEZEELE, 59470 WORMHOUT
Date: 15/12/2024

MATELAS LATEX 100% NATUREL PERFOR√â 7 ZONES DIFF√âRENCI√âES FERME - HOUSSE MATELASS√âE TENCEL LUXE 3D LAVABLE A 40¬∞
139/189/22
1
1213,00‚Ç¨
1213,00‚Ç¨"""

    prompt = f"""Tu es un assistant expert en extraction de donn√©es structur√©es √† partir de documents PDF commerciaux.

Analyse le texte suivant : 

{test_text}

Extrais uniquement les informations sous forme de **JSON**.  
Respecte exactement cette structure :

{{
  "societe": {{
    "nom": "...",
    "capital": "...",
    "adresse": "...",
    "telephone": "...",
    "fax": "...",
    "email": "...",
    "siret": "...",
    "APE": "...",
    "CEE": "...",
    "banque": "...",
    "IBAN": "..."
  }},
  "client": {{
    "nom": "...",
    "adresse": "...",
    "code_client": "..."
  }},
  "commande": {{
    "numero": "...",
    "date": "...",
    "date_validite": "...",
    "commercial": "...",
    "origine": "..."
  }},
  "articles": [
    {{
      "quantite": ...,
      "description": "...",
      "dimensions": "...",
      "pu_ttc": ...,
      "eco_part": ...,
      "pu_ht": ...
    }}
  ],
  "paiement": {{
    "conditions": "...",
    "port_ht": ...,
    "base_ht": ...,
    "taux_tva": ...,
    "total_ttc": ...,
    "acompte": ...,
    "net_a_payer": ...
  }}
}}

N'invente aucune donn√©e manquante, laisse la valeur `null` si tu ne la trouves pas.  
R√©ponds uniquement avec le JSON valide, sans explication ni phrase autour."""

    try:
        print("ü§ñ Test de diagnostic Ollama JSON...")
        print("üìù Envoi de la requ√™te √† Ollama...")
        
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                "http://localhost:11434/api/generate",
                json={
                    "model": "mistral:latest",
                    "prompt": prompt,
                    "stream": False
                }
            )
            response.raise_for_status()
            result = response.json()
            
            print(f"‚úÖ R√©ponse HTTP re√ßue: {response.status_code}")
            print(f"üìã Structure de la r√©ponse: {list(result.keys())}")
            
            # V√©rification de la structure de la r√©ponse
            if "response" not in result:
                print(f"‚ùå Champ 'response' manquant dans la r√©ponse")
                print(f"üìÑ R√©ponse compl√®te: {result}")
                return False
            
            llm_response = result.get("response", "")
            print(f"üìè Longueur de la r√©ponse: {len(llm_response)}")
            
            if not llm_response or llm_response.strip() == "":
                print("‚ùå R√©ponse Ollama vide")
                return False
            
            print(f"üìÑ R√©ponse Ollama (premiers 500 caract√®res):")
            print("-" * 50)
            print(llm_response[:500])
            print("-" * 50)
            
            # Test de parsing JSON
            try:
                parsed_json = json.loads(llm_response)
                print("‚úÖ JSON valide !")
                print(f"üìä Structure JSON: {list(parsed_json.keys())}")
                return True
            except json.JSONDecodeError as e:
                print(f"‚ùå Erreur parsing JSON: {e}")
                print(f"üìÑ Contenu probl√©matique: {llm_response}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur lors de l'appel √† Ollama: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_ollama_json())
    if success:
        print("\nüéâ Test r√©ussi !")
    else:
        print("\nüí• Test √©chou√© !") 