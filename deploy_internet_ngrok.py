#!/usr/bin/env python3
"""
Script de d√©ploiement rapide sur Internet avec ngrok
"""

import os
import subprocess
import sys
import time
import requests
import json
from pathlib import Path

def check_ngrok_installed():
    """V√©rifier si ngrok est install√©"""
    try:
        result = subprocess.run(['ngrok', 'version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ ngrok d√©j√† install√©: {result.stdout.strip()}")
            return True
        else:
            return False
    except FileNotFoundError:
        return False

def install_ngrok_mac():
    """Installer ngrok sur macOS"""
    print("üì¶ Installation de ngrok sur macOS...")
    
    try:
        # V√©rifier si Homebrew est disponible
        subprocess.run(['brew', '--version'], capture_output=True, check=True)
        print("üç∫ Installation via Homebrew...")
        subprocess.run(['brew', 'install', 'ngrok/ngrok/ngrok'], check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è Homebrew non trouv√©, installation manuelle requise")
        print("Visitez https://ngrok.com/download et suivez les instructions")
        return False

def setup_ngrok_auth():
    """Configurer l'authentification ngrok"""
    print("\\nüîë Configuration de l'authentification ngrok...")
    print("1. Visitez: https://dashboard.ngrok.com/get-started/your-authtoken")
    print("2. Copiez votre authtoken")
    
    authtoken = input("3. Collez votre authtoken ici: ").strip()
    
    if authtoken:
        try:
            subprocess.run(['ngrok', 'config', 'add-authtoken', authtoken], check=True)
            print("‚úÖ Authtoken configur√© avec succ√®s")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de la configuration: {e}")
            return False
    else:
        print("‚ùå Authtoken requis pour continuer")
        return False

def start_matelas_server():
    """D√©marrer le serveur MATELAS si pas d√©j√† en cours"""
    print("\\nüöÄ V√©rification du serveur MATELAS...")
    
    try:
        # Tester si le serveur local fonctionne
        response = requests.get("http://localhost:8091", timeout=3)
        if response.status_code == 200:
            print("‚úÖ Serveur MATELAS d√©j√† en cours")
            return True
    except:
        print("üîÑ D√©marrage du serveur MATELAS...")
        
        # D√©marrer le serveur en arri√®re-plan
        server_path = Path("online_admin_interface/enhanced_admin_with_telemetry.py")
        if server_path.exists():
            try:
                # Changer vers le bon r√©pertoire et d√©marrer le serveur
                os.chdir("online_admin_interface")
                subprocess.Popen([sys.executable, "enhanced_admin_with_telemetry.py"])
                os.chdir("..")  # Revenir au r√©pertoire parent
                
                # Attendre que le serveur d√©marre
                for i in range(10):
                    try:
                        response = requests.get("http://localhost:8091", timeout=2)
                        if response.status_code == 200:
                            print("‚úÖ Serveur MATELAS d√©marr√© avec succ√®s")
                            return True
                    except:
                        time.sleep(1)
                        print(f"   Attente du d√©marrage... {i+1}/10")
                
                print("‚ö†Ô∏è Le serveur met plus de temps que pr√©vu √† d√©marrer")
                return True  # Continuer quand m√™me
                
            except Exception as e:
                print(f"‚ùå Erreur lors du d√©marrage du serveur: {e}")
                return False
        else:
            print("‚ùå Fichier serveur non trouv√©")
            return False

def start_ngrok_tunnel():
    """D√©marrer le tunnel ngrok"""
    print("\\nüåê D√©marrage du tunnel ngrok...")
    
    try:
        # D√©marrer ngrok en arri√®re-plan
        process = subprocess.Popen(
            ['ngrok', 'http', '8091', '--log=stdout'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Attendre que ngrok d√©marre et r√©cup√©rer l'URL
        time.sleep(3)
        
        # R√©cup√©rer l'URL du tunnel via l'API locale de ngrok
        try:
            api_response = requests.get("http://127.0.0.1:4040/api/tunnels", timeout=5)
            if api_response.status_code == 200:
                data = api_response.json()
                tunnels = data.get('tunnels', [])
                
                if tunnels:
                    public_url = tunnels[0]['public_url']
                    print(f"‚úÖ Tunnel ngrok cr√©√© avec succ√®s!")
                    print(f"üåê URL publique: {public_url}")
                    
                    return public_url, process
                else:
                    print("‚ö†Ô∏è Aucun tunnel trouv√© dans l'API ngrok")
            else:
                print("‚ö†Ô∏è Impossible d'acc√©der √† l'API ngrok")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur API ngrok: {e}")
        
        print("‚ÑπÔ∏è  Consultez manuellement la sortie de ngrok pour l'URL")
        return None, process
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage de ngrok: {e}")
        return None, None

def test_public_access(public_url):
    """Tester l'acc√®s public au serveur"""
    if not public_url:
        print("‚ö†Ô∏è URL publique non disponible, test manuel requis")
        return
        
    print(f"\\nüß™ Test de l'acc√®s public √† {public_url}...")
    
    try:
        # Tester l'API de mise √† jour
        api_url = f"{public_url}/api/v1/check-updates"
        response = requests.get(api_url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API de mise √† jour accessible depuis Internet!")
            print(f"üì¶ Version disponible: {data.get('latest_version', 'Inconnue')}")
            
            # Tester l'interface admin
            admin_url = f"{public_url}/admin"
            admin_response = requests.get(admin_url, timeout=10)
            
            if admin_response.status_code in [200, 401]:  # 401 = auth requise (normal)
                print("‚úÖ Interface d'administration accessible!")
                print(f"üîß URL admin: {admin_url}")
                print("   Identifiants: admin / matelas2025")
            
        else:
            print(f"‚ö†Ô∏è R√©ponse inattendue: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")

def show_usage_instructions(public_url):
    """Afficher les instructions d'utilisation"""
    print("\\nüìã VOTRE SERVEUR EST MAINTENANT PUBLIC!")
    print("=" * 40)
    
    if public_url:
        print(f"üåê URL publique: {public_url}")
        print(f"üîß Interface admin: {public_url}/admin")
        print(f"üì° API clients: {public_url}/api/v1/check-updates")
        print(f"üë• Gestion clients: {public_url}/admin/clients")
        
    else:
        print("üåê URL publique: Consultez la fen√™tre ngrok")
        print("üîß Interface admin: https://VOTRE_URL/admin")
        print("üì° API clients: https://VOTRE_URL/api/v1/check-updates")
    
    print("\\nüîë IDENTIFIANTS ADMIN:")
    print("   Utilisateur: admin")
    print("   Mot de passe: matelas2025")
    print("   ‚ö†Ô∏è CHANGEZ CES IDENTIFIANTS EN PRODUCTION!")
    
    print("\\nüíª CONFIGURATION DES CLIENTS:")
    print("Pour que vos clients utilisent ce serveur, modifiez dans:")
    print("‚Ä¢ app_gui.py (m√©thode check_for_updates_async)")
    print("‚Ä¢ backend/auto_updater.py")
    
    if public_url:
        print(f'Remplacez "http://localhost:8091" par "{public_url}"')
    else:
        print('Remplacez "http://localhost:8091" par votre URL ngrok')
    
    print("\\n‚ö†Ô∏è LIMITATIONS NGROK GRATUIT:")
    print("‚Ä¢ URL change √† chaque red√©marrage de ngrok")
    print("‚Ä¢ Limite de 20 connexions/minute") 
    print("‚Ä¢ Session expire apr√®s 8 heures")
    print("‚Ä¢ Pour la production, utilisez un VPS")
    
    print("\\nüõë ARR√äT DU SERVICE:")
    print("‚Ä¢ Ctrl+C pour arr√™ter ngrok")
    print("‚Ä¢ Le serveur local continuera de fonctionner")

def main():
    """Fonction principale"""
    print("üöÄ D√âPLOIEMENT INTERNET RAPIDE - SERVEUR MATELAS")
    print("=" * 50)
    
    # 1. V√©rifier/installer ngrok
    if not check_ngrok_installed():
        print("üì¶ ngrok n'est pas install√©")
        if sys.platform == "darwin":  # macOS
            if not install_ngrok_mac():
                print("‚ùå Installation de ngrok √©chou√©e")
                return False
        else:
            print("‚ÑπÔ∏è  Visitez https://ngrok.com/download pour installer ngrok")
            return False
    
    # 2. Configurer l'authentification
    try:
        # Tester si l'authtoken est d√©j√† configur√©
        result = subprocess.run(['ngrok', 'config', 'check'], capture_output=True)
        if result.returncode != 0:
            if not setup_ngrok_auth():
                return False
        else:
            print("‚úÖ Authentification ngrok d√©j√† configur√©e")
    except:
        if not setup_ngrok_auth():
            return False
    
    # 3. D√©marrer le serveur MATELAS
    if not start_matelas_server():
        print("‚ùå Impossible de d√©marrer le serveur MATELAS")
        return False
    
    # 4. Cr√©er le tunnel ngrok
    public_url, ngrok_process = start_ngrok_tunnel()
    
    # 5. Tester l'acc√®s public
    test_public_access(public_url)
    
    # 6. Afficher les instructions
    show_usage_instructions(public_url)
    
    # 7. Maintenir le service actif
    print("\\nüîÑ Service actif! Appuyez sur Ctrl+C pour arr√™ter...")
    try:
        while True:
            time.sleep(60)
            # V√©rifier p√©riodiquement que les services fonctionnent
            try:
                requests.get("http://localhost:8091", timeout=3)
            except:
                print("‚ö†Ô∏è Serveur local non accessible")
                break
                
    except KeyboardInterrupt:
        print("\\nüõë Arr√™t demand√©...")
        if ngrok_process:
            ngrok_process.terminate()
        print("‚úÖ Services arr√™t√©s")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\\nüéâ D√©ploiement termin√© avec succ√®s!")
    else:
        print("\\n‚ùå √âchec du d√©ploiement")
        print("Consultez les erreurs ci-dessus et r√©essayez")