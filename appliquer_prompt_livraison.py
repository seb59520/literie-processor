#!/usr/bin/env python3
"""
Script pour appliquer le nouveau prompt de livraison dans l'application
"""

import os
import shutil
import re

def appliquer_prompt_livraison():
    """Applique le nouveau prompt de livraison dans l'application"""
    
    print("=== APPLICATION DU NOUVEAU PROMPT DE LIVRAISON ===")
    
    # 1. V√©rifier que le nouveau prompt existe
    print("\nüìù 1. V√©rification du nouveau prompt:")
    
    if not os.path.exists('prompt_ameliore_livraison.txt'):
        print("   ‚ùå Fichier prompt_ameliore_livraison.txt non trouv√©")
        return False
    
    print("   ‚úÖ Nouveau prompt trouv√©")
    
    # 2. Lire le nouveau prompt
    try:
        with open('prompt_ameliore_livraison.txt', 'r', encoding='utf-8') as f:
            nouveau_prompt = f.read()
        print("   ‚úÖ Nouveau prompt lu avec succ√®s")
    except Exception as e:
        print(f"   ‚ùå Erreur lecture prompt: {e}")
        return False
    
    # 3. Identifier les fichiers √† modifier
    print("\nüìÅ 2. Identification des fichiers √† modifier:")
    
    fichiers_candidats = [
        'backend_interface.py',
        'backend/main.py',
        'config.py'
    ]
    
    fichiers_trouves = []
    for fichier in fichiers_candidats:
        if os.path.exists(fichier):
            fichiers_trouves.append(fichier)
            print(f"   ‚úÖ {fichier} trouv√©")
        else:
            print(f"   ‚ùå {fichier} non trouv√©")
    
    if not fichiers_trouves:
        print("   ‚ùå Aucun fichier candidat trouv√©")
        return False
    
    # 4. Rechercher le prompt actuel
    print("\nüîç 3. Recherche du prompt actuel:")
    
    prompt_actuel_trouve = False
    fichier_contenant_prompt = None
    
    for fichier in fichiers_trouves:
        try:
            with open(fichier, 'r', encoding='utf-8') as f:
                contenu = f.read()
                
            # Rechercher des indices du prompt actuel
            indices_prompt = [
                "Tu es un assistant expert en extraction",
                "INSTRUCTIONS CRITIQUES POUR LES MATELAS",
                "mode_mise_a_disposition"
            ]
            
            if all(indice in contenu for indice in indices_prompt):
                print(f"   ‚úÖ Prompt actuel trouv√© dans {fichier}")
                prompt_actuel_trouve = True
                fichier_contenant_prompt = fichier
                break
                
        except Exception as e:
            print(f"   ‚ùå Erreur lecture {fichier}: {e}")
    
    if not prompt_actuel_trouve:
        print("   ‚ùå Prompt actuel non trouv√© dans les fichiers candidats")
        print("   üí° Le prompt pourrait √™tre dans un autre fichier")
        return False
    
    # 5. Cr√©er une sauvegarde
    print(f"\nüíæ 4. Cr√©ation de sauvegarde de {fichier_contenant_prompt}:")
    
    backup_file = f"{fichier_contenant_prompt}.backup"
    try:
        shutil.copy2(fichier_contenant_prompt, backup_file)
        print(f"   ‚úÖ Sauvegarde cr√©√©e: {backup_file}")
    except Exception as e:
        print(f"   ‚ùå Erreur cr√©ation sauvegarde: {e}")
        return False
    
    # 6. Remplacer le prompt
    print(f"\nüîÑ 5. Remplacement du prompt dans {fichier_contenant_prompt}:")
    
    try:
        with open(fichier_contenant_prompt, 'r', encoding='utf-8') as f:
            contenu_actuel = f.read()
        
        # Rechercher le d√©but et la fin du prompt actuel
        debut_prompt = "Tu es un assistant expert en extraction de donn√©es structur√©es √† partir de documents PDF commerciaux."
        
        # Essayer de trouver la fin du prompt (apr√®s la structure JSON)
        fin_prompt_patterns = [
            "‚ö†Ô∏è R√àGLE FINALE : Sois TR√àS ATTENTIF aux informations de livraison",
            "‚ö†Ô∏è IMPORTANT : Tu dois r√©pondre UNIQUEMENT avec du JSON valide",
            "Respecte exactement cette structure :"
        ]
        
        fin_prompt = None
        for pattern in fin_prompt_patterns:
            if pattern in contenu_actuel:
                # Chercher la fin apr√®s ce pattern
                pos = contenu_actuel.find(pattern)
                # Chercher la prochaine ligne vide ou la fin du fichier
                reste = contenu_actuel[pos:]
                lignes = reste.split('\n')
                for i, ligne in enumerate(lignes):
                    if ligne.strip() == "" or "}" in ligne:
                        fin_prompt = contenu_actuel[:pos + len('\n'.join(lignes[:i+1]))]
                        break
                if fin_prompt:
                    break
        
        if not fin_prompt:
            print("   ‚ö†Ô∏è Impossible de d√©terminer la fin exacte du prompt")
            print("   üí° Remplacement manuel recommand√©")
            return False
        
        # Remplacer le prompt
        nouveau_contenu = contenu_actuel.replace(debut_prompt, nouveau_prompt)
        
        # √âcrire le fichier modifi√©
        with open(fichier_contenant_prompt, 'w', encoding='utf-8') as f:
            f.write(nouveau_contenu)
        
        print("   ‚úÖ Prompt remplac√© avec succ√®s")
        
    except Exception as e:
        print(f"   ‚ùå Erreur remplacement: {e}")
        return False
    
    # 7. V√©rification
    print(f"\n‚úÖ 6. V√©rification du remplacement:")
    
    try:
        with open(fichier_contenant_prompt, 'r', encoding='utf-8') as f:
            contenu_verifie = f.read()
        
        if "INSTRUCTIONS CRITIQUES POUR LA LIVRAISON" in contenu_verifie:
            print("   ‚úÖ Nouveau prompt d√©tect√© dans le fichier")
        else:
            print("   ‚ùå Nouveau prompt non d√©tect√©")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur v√©rification: {e}")
        return False
    
    return True

def instructions_manuelles():
    """Donne les instructions pour un remplacement manuel"""
    
    print("\nüìã INSTRUCTIONS POUR REMPLACEMENT MANUEL:")
    print("   Si le script automatique √©choue, voici comment proc√©der manuellement:")
    
    print("\n   1. üìÅ Ouvrir le fichier backend_interface.py")
    print("   2. üîç Rechercher la fonction qui contient le prompt LLM")
    print("   3. üìù Remplacer tout le prompt actuel par le contenu de prompt_ameliore_livraison.txt")
    print("   4. üíæ Sauvegarder le fichier")
    print("   5. üöÄ Relancer l'application")
    
    print("\n   üìç Localisation probable du prompt:")
    print("      - Chercher 'Tu es un assistant expert en extraction'")
    print("      - Ou chercher 'INSTRUCTIONS CRITIQUES POUR LES MATELAS'")
    print("      - Ou chercher 'mode_mise_a_disposition'")

def test_apres_modification():
    """Instructions pour tester apr√®s modification"""
    
    print("\nüß™ INSTRUCTIONS DE TEST APR√àS MODIFICATION:")
    
    print("   1. üì± Relancer l'application MatelasApp")
    print("   2. ‚úÖ Cocher 'Utiliser l'enrichissement LLM'")
    print("   3. üîß S√©lectionner le provider LLM (Ollama ou OpenRouter)")
    print("   4. üìÅ S√©lectionner votre PDF COSTENOBLE")
    print("   5. üöÄ Cliquer sur 'Traiter les fichiers'")
    print("   6. üîç V√©rifier dans les logs:")
    print("      - Si le LLM extrait des informations de livraison")
    print("      - Si le champ fourgon_C58 est rempli")
    print("      - Si la valeur est transmise √† l'Excel")
    
    print("\n   üìä R√©sultat attendu:")
    print("      - fourgon_C58 devrait maintenant contenir une valeur")
    print("      - Au lieu de 'None' ou champ vide")

if __name__ == "__main__":
    print("üöÄ Application du nouveau prompt de livraison")
    
    # Tentative de remplacement automatique
    success = appliquer_prompt_livraison()
    
    if success:
        print("\nüéâ SUCC√àS: Nouveau prompt appliqu√© automatiquement !")
        print("üîß Le prompt de livraison est maintenant am√©lior√©")
        print("üöÄ Vous pouvez tester l'application")
        
        # Instructions de test
        test_apres_modification()
        
    else:
        print("\n‚ö†Ô∏è Le remplacement automatique a √©chou√©")
        print("üîß Remplacement manuel n√©cessaire")
        
        # Instructions manuelles
        instructions_manuelles()
        
        # Instructions de test
        test_apres_modification()
    
    print("\n=== FIN DE L'APPLICATION ===")

