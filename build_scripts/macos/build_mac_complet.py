#!/usr/bin/env python3
"""
Script de construction complet pour Mac avec package .app
Garantit que l'int√©gralit√© du dossier soit incluse dans le package
"""

import os
import sys
import subprocess
import shutil
import platform
import glob

def check_mac_environment():
    """V√©rifie que l'environnement est compatible Mac"""
    if platform.system() != "Darwin":
        print("‚ùå Ce script est destin√© √† macOS uniquement")
        return False
    
    print("‚úÖ Environnement macOS d√©tect√©")
    return True

def get_all_files_recursive(directory):
    """R√©cup√®re tous les fichiers d'un r√©pertoire de mani√®re r√©cursive"""
    files = []
    if os.path.exists(directory):
        for root, dirs, filenames in os.walk(directory):
            for filename in filenames:
                file_path = os.path.join(root, filename)
                # Exclure les fichiers temporaires
                if not any(exclude in file_path for exclude in ['__pycache__', '.pyc', '.DS_Store', 'Thumbs.db']):
                    files.append(file_path)
    return files

def build_mac_app():
    """Construit un package .app complet pour Mac"""
    
    if not check_mac_environment():
        return False
    
    print("=" * 60)
    print("üçé CONSTRUCTION PACKAGE MAC - MATELAS APP")
    print("=" * 60)
    print(f"macOS: {platform.release()}")
    print(f"Python: {sys.version}")
    print()
    
    # Nettoyer les anciens fichiers
    print("üßπ Nettoyage des anciens fichiers...")
    for dir_to_clean in ["build", "dist"]:
        if os.path.exists(dir_to_clean):
            shutil.rmtree(dir_to_clean)
            print(f"   Supprim√©: {dir_to_clean}")
    
    # Supprimer les fichiers .spec existants
    for file in os.listdir("."):
        if file.endswith(".spec"):
            os.remove(file)
            print(f"   Supprim√©: {file}")
    
    print("‚úÖ Nettoyage termin√©")
    print()
    
    # Inventaire des fichiers
    print("üìÅ Inventaire des fichiers √† inclure...")
    
    backend_files = get_all_files_recursive("backend")
    config_files = get_all_files_recursive("config")
    template_files = get_all_files_recursive("template")
    backend_template_files = get_all_files_recursive("backend/template")
    backend_templates_files = get_all_files_recursive("backend/templates")
    asset_files = get_all_files_recursive("assets")
    command_files = get_all_files_recursive("Commandes")
    
    all_template_files = template_files + backend_template_files + backend_templates_files
    
    print(f"   Backend: {len(backend_files)} fichiers")
    print(f"   Config: {len(config_files)} fichiers")
    print(f"   Templates: {len(all_template_files)} fichiers")
    print(f"   Assets: {len(asset_files)} fichiers")
    print(f"   Commandes: {len(command_files)} fichiers")
    print()
    
    # V√©rifier les fichiers critiques
    print("üîç V√©rification des fichiers critiques...")
    critical_files = [
        "backend/R√©f√©rentiels/dimensions_matelas.json",
        "backend/R√©f√©rentiels/longueurs_matelas.json",
        "backend/R√©f√©rentiels/7z_dimensions_matelas.json",
        "backend/R√©f√©rentiels/7z_longueurs_matelas.json",
        "template/template_matelas.xlsx",
        "template/template_sommier.xlsx",
        "config/mappings_matelas.json",
        "config/mappings_sommiers.json",
        "assets/lit-double.png",
        "assets/logo_westelynck.png"
    ]
    
    missing_critical = []
    for file in critical_files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file}")
            missing_critical.append(file)
    
    if missing_critical:
        print(f"\n‚ö†Ô∏è Fichiers critiques manquants: {len(missing_critical)}")
        for file in missing_critical:
            print(f"   - {file}")
        print("La compilation peut √©chouer si ces fichiers sont n√©cessaires.")
        print()
    
    # Commande PyInstaller pour Mac
    command = [
        "pyinstaller",
        "app_gui.py",
        "--onedir",  # Utiliser --onedir pour Mac pour un meilleur contr√¥le
        "--windowed",
        "--name", "MatelasApp",
        "--paths=backend",
        "--collect-all", "PyQt6",
        "--collect-all", "openpyxl",
        "--collect-all", "pandas",
        "--collect-all", "requests",
        "--collect-all", "cryptography",
        "--collect-all", "fitz",  # PyMuPDF
        "--collect-all", "httpx",
        "--collect-all", "openai",
        "--collect-all", "ollama",
    ]
    
    # Ajouter tous les dossiers de donn√©es
    data_dirs = [
        ("backend", "backend"),
        ("config", "config"),
        ("template", "template"),
        ("assets", "assets"),
        ("Commandes", "Commandes"),
    ]
    
    # Ajouter les fichiers critiques individuels
    critical_files_to_include = [
        ("EULA.txt", "."),
        ("version.py", "."),
        ("config.py", "."),
        ("backend_interface.py", "."),
    ]
    
    for src_dir, dest_dir in data_dirs:
        if os.path.exists(src_dir):
            command.extend(["--add-data", f"{src_dir}:{dest_dir}"])
            print(f"   üìÅ Ajout√©: {src_dir} ‚Üí {dest_dir}")
    
    # Ajouter les fichiers critiques individuels
    for src_file, dest_dir in critical_files_to_include:
        if os.path.exists(src_file):
            command.extend(["--add-data", f"{src_file}:{dest_dir}"])
            print(f"   üìÑ Ajout√©: {src_file} ‚Üí {dest_dir}")
        else:
            print(f"   ‚ö†Ô∏è Fichier critique manquant: {src_file}")
    
    # Ajouter tous les imports cach√©s n√©cessaires
    hidden_imports = [
        # PyQt6
        "PyQt6.QtCore",
        "PyQt6.QtWidgets", 
        "PyQt6.QtGui",
        "PyQt6.QtPrintSupport",
        "PyQt6.sip",
        
        # Backend modules
        "backend",
        "backend.article_utils",
        "backend.asset_utils",
        "backend.client_utils",
        "backend.date_utils",
        "backend.decoupe_noyau_utils",
        "backend.dimensions_sommiers",
        "backend.dimensions_utils",
        "backend.excel_import_utils",
        "backend.excel_sommier_import_utils",
        "backend.fermete_utils",
        "backend.hauteur_utils",
        "backend.housse_utils",
        "backend.latex_mixte7zones_longueur_housse_utils",
        "backend.latex_mixte7zones_referentiel",
        "backend.latex_naturel_longueur_housse_utils",
        "backend.latex_naturel_referentiel",
        "backend.latex_renforce_longueur_utils",
        "backend.latex_renforce_utils",
        "backend.llm_provider",
        "backend.mapping_manager",
        "backend.matelas_utils",
        "backend.matiere_housse_utils",
        "backend.mousse_rainuree7zones_longueur_housse_utils",
        "backend.mousse_rainuree7zones_referentiel",
        "backend.mousse_visco_longueur_utils",
        "backend.mousse_visco_utils",
        "backend.operation_utils",
        "backend.poignees_utils",
        "backend.pre_import_utils",
        "backend.select43_longueur_housse_utils",
        "backend.select43_utils",
        "backend.sommier_analytics_utils",
        "backend.sommier_utils",
        "backend.secure_storage",
        
        # Autres modules
        "backend_interface",
        "config",
        "openpyxl",
        "pandas",
        "numpy",
        "requests",
        "cryptography",
        "fitz",  # PyMuPDF
        "httpx",
        "openai",
        "ollama",
        "json",
        "logging",
        "asyncio",
        "aiohttp",
        "tempfile",
        "shutil",
        "pathlib",
        "datetime",
        "math",
        "re",
        "base64",
        "hashlib",
        "unicodedata",
        "csv",
        "openpyxl.utils",
        "openpyxl.workbook",
        "openpyxl.worksheet",
    ]
    
    for module in hidden_imports:
        command.extend(["--hidden-import", module])
    
    # Ajouter l'ic√¥ne si disponible
    icon_path = "assets/lit-double.icns"  # Format .icns pour Mac
    if os.path.exists(icon_path):
        command.extend(["--icon", icon_path])
        print(f"   üé® Ic√¥ne utilis√©e: {icon_path}")
    else:
        # Essayer avec .ico si .icns n'existe pas
        icon_path = "assets/lit-double.ico"
        if os.path.exists(icon_path):
            command.extend(["--icon", icon_path])
            print(f"   üé® Ic√¥ne utilis√©e: {icon_path}")
        else:
            print("   ‚ö†Ô∏è Ic√¥ne non trouv√©e, utilisation de l'ic√¥ne par d√©faut")
    
    command.append("--clean")
    
    print()
    print("üöÄ Commande PyInstaller:")
    print(" ".join(command))
    print()
    
    try:
        # Ex√©cuter PyInstaller
        print("‚è≥ Compilation en cours...")
        print("   (Cela peut prendre plusieurs minutes)")
        print("   (Tous les fichiers et r√©f√©rentiels sont inclus)")
        
        result = subprocess.run(command, capture_output=True, text=True, timeout=900)  # 15 minutes timeout
        
        if result.returncode == 0:
            print("‚úÖ Compilation r√©ussie!")
            
            # V√©rifier que l'app existe
            app_path = os.path.join("dist", "MatelasApp")
            
            if os.path.exists(app_path):
                # Calculer la taille du package
                total_size = 0
                file_count = 0
                for root, dirs, files in os.walk(app_path):
                    for file in files:
                        file_path = os.path.join(root, file)
                        total_size += os.path.getsize(file_path)
                        file_count += 1
                
                size_mb = total_size / (1024*1024)
                print(f"‚úÖ Package cr√©√©: {app_path}")
                print(f"   Taille: {size_mb:.1f} MB")
                print(f"   Fichiers: {file_count}")
                print(f"   Inclut: {len(backend_files) + len(config_files) + len(all_template_files) + len(asset_files) + len(command_files)} fichiers source")
                
                # Cr√©er un fichier de v√©rification
                verification_file = os.path.join("dist", "verification_fichiers_mac.txt")
                with open(verification_file, 'w', encoding='utf-8') as f:
                    f.write("FICHIERS INCLUS DANS LE PACKAGE MAC\n")
                    f.write("=" * 50 + "\n\n")
                    f.write(f"Backend: {len(backend_files)} fichiers\n")
                    f.write(f"Config: {len(config_files)} fichiers\n")
                    f.write(f"Templates: {len(all_template_files)} fichiers\n")
                    f.write(f"Assets: {len(asset_files)} fichiers\n")
                    f.write(f"Commandes: {len(command_files)} fichiers\n\n")
                    f.write("FICHIERS CRITIQUES V√âRIFI√âS:\n")
                    for file in critical_files:
                        status = "‚úÖ" if os.path.exists(file) else "‚ùå"
                        f.write(f"{status} {file}\n")
                    
                    f.write(f"\nPACKAGE FINAL:\n")
                    f.write(f"Taille: {size_mb:.1f} MB\n")
                    f.write(f"Fichiers dans le package: {file_count}\n")
                    f.write(f"Chemin: {app_path}\n")
                
                print(f"   üìã Fichier de v√©rification: {verification_file}")
                
                # Cr√©er un script de lancement
                launch_script = os.path.join("dist", "Lancer_MatelasApp.command")
                with open(launch_script, 'w') as f:
                    f.write("#!/bin/bash\n")
                    f.write("cd \"$(dirname \"$0\")\"\n")
                    f.write("open MatelasApp\n")
                
                os.chmod(launch_script, 0o755)
                print(f"   üöÄ Script de lancement: {launch_script}")
                
                # Test rapide de l'app
                print("\nüß™ Test rapide du package...")
                try:
                    test_process = subprocess.Popen(["open", app_path], 
                                                  stdout=subprocess.PIPE, 
                                                  stderr=subprocess.PIPE)
                    test_process.wait(timeout=15)
                    print("‚úÖ Package s'est lanc√© sans erreur")
                except subprocess.TimeoutExpired:
                    print("‚úÖ Package s'est lanc√© (arr√™t√© apr√®s 15s)")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors du test: {e}")
                
                print(f"\nüéâ Compilation Mac termin√©e avec succ√®s!")
                print(f"   Package: {app_path}")
                print(f"   Taille: {size_mb:.1f} MB")
                print(f"   Fichiers inclus: {len(backend_files) + len(config_files) + len(all_template_files) + len(asset_files) + len(command_files)}")
                print(f"   R√©f√©rentiels: {len([f for f in backend_files if 'R√©f√©rentiels' in f])} fichiers")
                print(f"\nüìã Pour utiliser le package:")
                print(f"   1. Double-cliquez sur: {launch_script}")
                print(f"   2. Ou glissez-d√©posez MatelasApp dans Applications")
                print(f"   3. Ou lancez directement: open {app_path}")
                
            else:
                print(f"‚ùå Package non trouv√©: {app_path}")
                print("V√©rifiez les logs de compilation ci-dessus.")
        else:
            print("‚ùå Erreur de compilation:")
            print(result.stderr)
            print("\nLogs de compilation:")
            print(result.stdout)
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout lors de la compilation (15 minutes)")
        print("La compilation peut prendre plus de temps sur certains syst√®mes.")
    except FileNotFoundError:
        print("‚ùå PyInstaller non trouv√©")
        print("Installez-le avec: pip install pyinstaller")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    return True


if __name__ == "__main__":
    build_mac_app() 