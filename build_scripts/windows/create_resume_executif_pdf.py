#!/usr/bin/env python3
"""
G√©n√©rateur de PDF du R√©sum√© Ex√©cutif - Literie Processor
Avec logo Westelynck et mise en page professionnelle
"""

import os
import sys
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import HexColor, black, white, blue, darkblue, lightgrey
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle, Image
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors

def create_resume_executif_pdf():
    """Cr√©e le PDF du r√©sum√© ex√©cutif professionnel"""
    
    # Configuration du document
    doc = SimpleDocTemplate(
        "Resume_Executif_Literie_Processor.pdf",
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # Styles personnalis√©s
    styles = getSampleStyleSheet()
    
    # Style titre principal
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=HexColor('#1f4e79'),
        fontName='Helvetica-Bold'
    )
    
    # Style sous-titre
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=18,
        spaceAfter=20,
        spaceBefore=20,
        textColor=HexColor('#2c5aa0'),
        fontName='Helvetica-Bold'
    )
    
    # Style section
    section_style = ParagraphStyle(
        'CustomSection',
        parent=styles['Heading3'],
        fontSize=14,
        spaceAfter=15,
        spaceBefore=15,
        textColor=HexColor('#1f4e79'),
        fontName='Helvetica-Bold'
    )
    
    # Style normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )
    
    # Style liste
    list_style = ParagraphStyle(
        'CustomList',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=5,
        leftIndent=20,
        fontName='Helvetica'
    )
    
    # Style highlight
    highlight_style = ParagraphStyle(
        'CustomHighlight',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        alignment=TA_JUSTIFY,
        fontName='Helvetica-Bold',
        textColor=HexColor('#2c5aa0')
    )
    
    # Style metrics
    metrics_style = ParagraphStyle(
        'CustomMetrics',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=10,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold',
        textColor=HexColor('#1f4e79'),
        backColor=HexColor('#f0f8ff'),
        borderWidth=1,
        borderColor=HexColor('#1f4e79'),
        borderPadding=10
    )
    
    # Style code
    code_style = ParagraphStyle(
        'CustomCode',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=8,
        leftIndent=20,
        fontName='Courier',
        backColor=HexColor('#f5f5f5'),
        borderWidth=1,
        borderColor=HexColor('#cccccc'),
        borderPadding=5
    )
    
    # Contenu du document
    story = []
    
    # Page de titre
    story.append(Spacer(1, 2*cm))
    
    # Logo Westelynck
    logo_path = "assets/logo_westelynck.png"
    if os.path.exists(logo_path):
        logo = Image(logo_path, width=4*cm, height=2*cm)
        logo.hAlign = 'CENTER'
        story.append(logo)
        story.append(Spacer(1, 1*cm))
    
    # Titre principal
    story.append(Paragraph("R√âSUM√â EX√âCUTIF", title_style))
    story.append(Paragraph("Literie Processor", subtitle_style))
    story.append(Paragraph("Application de Traitement Automatis√© des Devis Matelas", subtitle_style))
    story.append(Paragraph("D√©velopp√© par SCINNOVA pour SAS Literie Westelynck", normal_style))
    
    story.append(Spacer(1, 2*cm))
    
    # Informations de version
    version_info = [
        ["Projet", "Literie Processor"],
        ["Client", "SAS Literie Westelynck"],
        ["D√©veloppeur", "SCINNOVA"],
        ["Version", "3.0.1"],
        ["Date", datetime.now().strftime("%d/%m/%Y")],
        ["Contact", "sebastien.confrere@scinnova.fr"]
    ]
    
    version_table = Table(version_info, colWidths=[3*cm, 8*cm])
    version_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), HexColor('#1f4e79')),
        ('TEXTCOLOR', (0, 0), (0, -1), white),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, black)
    ]))
    story.append(version_table)
    
    story.append(PageBreak())
    
    # PROBL√âMATIQUE
    story.append(Paragraph("PROBL√âMATIQUE", subtitle_style))
    
    story.append(Paragraph("""
        La SAS Literie Westelynck traite manuellement des centaines de devis PDF par mois, 
        ce qui repr√©sente un d√©fi majeur pour la productivit√© et la qualit√© :
    """, normal_style))
    
    problemes = [
        "Temps perdu : 4-6 heures par jour de traitement manuel",
        "Erreurs humaines : 15-20% de corrections n√©cessaires",
        "Co√ªt : 2000-3000‚Ç¨/mois en temps de traitement",
        "D√©lais : Retards dans la production",
        "Standardisation : Processus difficile √† uniformiser"
    ]
    
    for probleme in problemes:
        story.append(Paragraph(f"‚Ä¢ {probleme}", list_style))
    
    story.append(Spacer(1, 1*cm))
    
    # SOLUTION
    story.append(Paragraph("SOLUTION", subtitle_style))
    
    story.append(Paragraph("""
        Application automatis√©e utilisant l'Intelligence Artificielle pour :
    """, normal_style))
    
    solutions = [
        "Analyser les devis PDF automatiquement",
        "Extraire les informations structur√©es",
        "G√©n√©rer des fichiers Excel pr√™ts pour l'inscription",
        "Standardiser le processus de traitement"
    ]
    
    for solution in solutions:
        story.append(Paragraph(f"‚Ä¢ {solution}", list_style))
    
    story.append(PageBreak())
    
    # FONCTIONNALIT√âS CL√âS
    story.append(Paragraph("FONCTIONNALIT√âS CL√âS", subtitle_style))
    
    story.append(Paragraph("‚úÖ Traitement automatique", section_style))
    
    traitement_features = [
        "Lecture des PDF avec extraction de texte",
        "Analyse LLM (GPT-4) pour comprendre le contenu",
        "Extraction structur√©e des donn√©es (client, matelas, dimensions, prix)",
        "Validation automatique des informations"
    ]
    
    for feature in traitement_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(Paragraph("‚úÖ G√©n√©ration Excel", section_style))
    
    excel_features = [
        "Templates sp√©cialis√©s par type de matelas",
        "Remplissage automatique des cellules",
        "Coloration conditionnelle selon les caract√©ristiques",
        "Support de 6 types de matelas diff√©rents"
    ]
    
    for feature in excel_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(Paragraph("‚úÖ Interface utilisateur", section_style))
    
    ui_features = [
        "Interface moderne PyQt6 avec logo Westelynck",
        "Drag & drop des fichiers PDF",
        "Suivi en temps r√©el du traitement",
        "Gestion des erreurs et corrections"
    ]
    
    for feature in ui_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(PageBreak())
    
    # TYPES DE MATELAS SUPPORT√âS
    story.append(Paragraph("TYPES DE MATELAS SUPPORT√âS", subtitle_style))
    
    matelas_types = [
        "Latex Naturel - Densit√© et √©paisseur variables",
        "Latex Mixte 7 Zones - Zones de confort diff√©renci√©es",
        "Latex Renforc√© - Structure renforc√©e",
        "Mousse Visco√©lastique - M√©moire de forme",
        "Mousse Rainur√©e 7 Zones - Structure a√©r√©e",
        "Select 43 - Mousse haute densit√©"
    ]
    
    for matelas in matelas_types:
        story.append(Paragraph(f"‚Ä¢ {matelas}", list_style))
    
    story.append(PageBreak())
    
    # AVANTAGES
    story.append(Paragraph("AVANTAGES", subtitle_style))
    
    story.append(Paragraph("üöÄ Gain de productivit√©", section_style))
    
    gains = [
        "Temps de traitement : 30 secondes vs 15 minutes manuellement",
        "Pr√©cision : 95%+ vs 80% manuellement",
        "Capacit√© : 10 devis simultan√©s vs 1 manuellement",
        "Standardisation : Processus uniforme"
    ]
    
    for gain in gains:
        story.append(Paragraph(f"‚Ä¢ {gain}", list_style))
    
    story.append(Paragraph("üí∞ Retour sur investissement", section_style))
    
    roi = [
        "√âconomies : 2000-3000‚Ç¨/mois en temps de travail",
        "ROI : Amortissement en 3-6 mois",
        "Scalabilit√© : Pas de co√ªt suppl√©mentaire pour plus de volume",
        "Qualit√© : R√©duction drastique des erreurs"
    ]
    
    for item in roi:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(Paragraph("üéØ Qualit√©", section_style))
    
    qualite = [
        "Standardisation : Processus uniforme",
        "Tra√ßabilit√© : Logs complets de toutes les op√©rations",
        "Fiabilit√© : Gestion robuste des erreurs"
    ]
    
    for item in qualite:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # TECHNOLOGIES UTILIS√âES
    story.append(Paragraph("TECHNOLOGIES UTILIS√âES", subtitle_style))
    
    technologies = [
        "Python 3.8+ : Langage principal",
        "PyQt6 : Interface graphique moderne",
        "OpenAI GPT-4 : Intelligence artificielle",
        "PyPDF2 : Lecture des PDF",
        "openpyxl : G√©n√©ration Excel",
        "Cryptographie : S√©curisation des cl√©s API"
    ]
    
    for tech in technologies:
        story.append(Paragraph(f"‚Ä¢ {tech}", list_style))
    
    story.append(Spacer(1, 1*cm))
    
    # ARCHITECTURE
    story.append(Paragraph("ARCHITECTURE", section_style))
    
    story.append(Paragraph("""
        Frontend (PyQt6) ‚Üê‚Üí Backend (Python) ‚Üê‚Üí LLM APIs (OpenAI/OpenRouter)
    """, normal_style))
    
    story.append(Paragraph("""
        L'application suit une architecture modulaire avec :
    """, normal_style))
    
    arch_features = [
        "Interface utilisateur PyQt6 moderne",
        "Modules backend sp√©cialis√©s par type de matelas",
        "Int√©gration multi-providers LLM",
        "Syst√®me de s√©curit√© et chiffrement"
    ]
    
    for feature in arch_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(PageBreak())
    
    # LIVRABLES
    story.append(Paragraph("LIVRABLES", subtitle_style))
    
    livrables = [
        "Application standalone : Ex√©cutable Windows/macOS/Linux",
        "Documentation compl√®te : Guide utilisateur et technique",
        "Templates Excel : Mod√®les pour chaque type de matelas",
        "Outils de maintenance : Diagnostic et r√©paration",
        "Formation : 2 heures pour les utilisateurs"
    ]
    
    for livrable in livrables:
        story.append(Paragraph(f"‚Ä¢ {livrable}", list_style))
    
    story.append(Spacer(1, 1*cm))
    
    # PLANNING
    story.append(Paragraph("PLANNING", section_style))
    
    story.append(Paragraph("‚úÖ Phase 1 : D√©veloppement initial (TERMIN√âE)", highlight_style))
    
    phase1 = [
        "Architecture modulaire",
        "Modules de base",
        "Interface graphique",
        "Tests fonctionnels"
    ]
    
    for item in phase1:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(Paragraph("üîÑ Phase 2 : Optimisation (EN COURS)", highlight_style))
    
    phase2 = [
        "Performance et robustesse",
        "Documentation compl√®te",
        "Packaging standalone",
        "Tests de validation"
    ]
    
    for item in phase2:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(Paragraph("üìã Phase 3 : √âvolutions futures", highlight_style))
    
    phase3 = [
        "Nouveaux types de matelas",
        "Interface web",
        "Version SaaS",
        "Application mobile"
    ]
    
    for item in phase3:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # M√âTRIQUES DE SUCC√àS
    story.append(Paragraph("M√âTRIQUES DE SUCC√àS", subtitle_style))
    
    story.append(Paragraph("""
        Les objectifs de performance et de qualit√© d√©finis pour le projet :
    """, normal_style))
    
    metrics = [
        "Temps de traitement : < 30 secondes par devis",
        "Pr√©cision d'extraction : > 95%",
        "Taux d'adoption : 100% des utilisateurs form√©s",
        "ROI : Amortissement en 6 mois maximum",
        "Satisfaction utilisateur : > 90%"
    ]
    
    for metric in metrics:
        story.append(Paragraph(f"‚Ä¢ {metric}", list_style))
    
    story.append(Spacer(1, 1*cm))
    
    # RISQUES ET MITIGATION
    story.append(Paragraph("RISQUES ET MITIGATION", section_style))
    
    story.append(Paragraph("‚ö†Ô∏è Risques techniques", highlight_style))
    
    risques_tech = [
        "√âvolution des APIs ‚Üí Monitoring et adaptation",
        "Compatibilit√© ‚Üí Tests r√©guliers",
        "Performance ‚Üí Optimisation continue"
    ]
    
    for risque in risques_tech:
        story.append(Paragraph(f"‚Ä¢ {risque}", list_style))
    
    story.append(Paragraph("‚ö†Ô∏è Risques fonctionnels", highlight_style))
    
    risques_fonctionnels = [
        "Pr√©cision LLM ‚Üí Am√©lioration des prompts",
        "√âvolution des devis ‚Üí Adaptation des mod√®les",
        "Formats ‚Üí Support de nouveaux formats"
    ]
    
    for risque in risques_fonctionnels:
        story.append(Paragraph(f"‚Ä¢ {risque}", list_style))
    
    story.append(PageBreak())
    
    # CONCLUSION
    story.append(Paragraph("CONCLUSION", subtitle_style))
    
    story.append(Paragraph("""
        Le projet Literie Processor transforme radicalement le processus de traitement 
        des devis de la SAS Literie Westelynck en :
    """, normal_style))
    
    impacts = [
        "Automatisant 95% du travail manuel",
        "R√©duisant les erreurs de 80% √† 5%",
        "Acc√©l√©rant le traitement par 30x",
        "Standardisant le processus de production"
    ]
    
    for impact in impacts:
        story.append(Paragraph(f"‚Ä¢ {impact}", list_style))
    
    story.append(Spacer(1, 1*cm))
    
    story.append(Paragraph("""
        L'investissement est rapidement amorti et l'application offre une base solide 
        pour les √©volutions futures.
    """, normal_style))
    
    # Page de fin
    story.append(PageBreak())
    
    story.append(Spacer(1, 3*cm))
    story.append(Paragraph("R√©sum√© Ex√©cutif", title_style))
    story.append(Paragraph("Literie Processor", subtitle_style))
    story.append(Paragraph("D√©velopp√© par SCINNOVA", subtitle_style))
    story.append(Paragraph("Pour SAS Literie Westelynck", subtitle_style))
    story.append(Paragraph("Merci de votre confiance", normal_style))
    
    # Informations de contact
    story.append(Spacer(1, 2*cm))
    
    contact_info = [
        ["Contact technique", "sebastien.confrere@scinnova.fr"],
        ["T√©l√©phone", "06.66.05.72.47"],
        ["√âditeur", "SCINNOVA"],
        ["Client", "SAS Literie Westelynck"]
    ]
    
    contact_table = Table(contact_info, colWidths=[4*cm, 7*cm])
    contact_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), HexColor('#1f4e79')),
        ('TEXTCOLOR', (0, 0), (0, -1), white),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, black)
    ]))
    story.append(contact_table)
    
    # G√©n√©ration du PDF
    doc.build(story)
    print("‚úÖ R√©sum√© ex√©cutif PDF g√©n√©r√© avec succ√®s : Resume_Executif_Literie_Processor.pdf")

if __name__ == "__main__":
    try:
        create_resume_executif_pdf()
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du PDF : {e}")
        sys.exit(1) 