#!/usr/bin/env python3
"""
G√©n√©rateur de PDF Complet du Cahier des Charges - Literie Processor
Combinaison du cahier des charges, r√©sum√© ex√©cutif et sp√©cifications techniques
Avec logo Westelynck et mise en page professionnelle
"""

import os
import sys
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import HexColor, black, white, blue, darkblue, lightgrey
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle, Image
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors

def create_cahier_charges_complet_pdf():
    """Cr√©e le PDF complet du cahier des charges professionnel"""
    
    # Configuration du document
    doc = SimpleDocTemplate(
        "Cahier_Charges_Complet_Literie_Processor.pdf",
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # Styles personnalis√©s
    styles = getSampleStyleSheet()
    
    # Style titre principal
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=HexColor('#1f4e79'),
        fontName='Helvetica-Bold'
    )
    
    # Style sous-titre
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=18,
        spaceAfter=20,
        spaceBefore=20,
        textColor=HexColor('#2c5aa0'),
        fontName='Helvetica-Bold'
    )
    
    # Style section
    section_style = ParagraphStyle(
        'CustomSection',
        parent=styles['Heading3'],
        fontSize=14,
        spaceAfter=15,
        spaceBefore=15,
        textColor=HexColor('#1f4e79'),
        fontName='Helvetica-Bold'
    )
    
    # Style normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )
    
    # Style liste
    list_style = ParagraphStyle(
        'CustomList',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=5,
        leftIndent=20,
        fontName='Helvetica'
    )
    
    # Style code
    code_style = ParagraphStyle(
        'CustomCode',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=8,
        leftIndent=20,
        fontName='Courier',
        backColor=HexColor('#f5f5f5'),
        borderWidth=1,
        borderColor=HexColor('#cccccc'),
        borderPadding=5
    )
    
    # Style highlight
    highlight_style = ParagraphStyle(
        'CustomHighlight',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        alignment=TA_JUSTIFY,
        fontName='Helvetica-Bold',
        textColor=HexColor('#2c5aa0')
    )
    
    # Contenu du document
    story = []
    
    # Page de titre
    story.append(Spacer(1, 2*cm))
    
    # Logo Westelynck
    logo_path = "assets/logo_westelynck.png"
    if os.path.exists(logo_path):
        logo = Image(logo_path, width=4*cm, height=2*cm)
        logo.hAlign = 'CENTER'
        story.append(logo)
        story.append(Spacer(1, 1*cm))
    
    # Titre principal
    story.append(Paragraph("CAHIER DES CHARGES COMPLET", title_style))
    story.append(Paragraph("Literie Processor", subtitle_style))
    story.append(Paragraph("Application de Traitement Automatis√© des Devis Matelas", subtitle_style))
    story.append(Paragraph("D√©velopp√© par SCINNOVA pour SAS Literie Westelynck", normal_style))
    
    story.append(Spacer(1, 2*cm))
    
    # Informations de version
    version_info = [
        ["Projet", "Literie Processor (anciennement MatelasApp)"],
        ["Client", "SAS Literie Westelynck"],
        ["D√©veloppeur", "SCINNOVA"],
        ["Version", "3.0.1"],
        ["Date", datetime.now().strftime("%d/%m/%Y")],
        ["Contact", "sebastien.confrere@scinnova.fr"]
    ]
    
    version_table = Table(version_info, colWidths=[3*cm, 8*cm])
    version_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), HexColor('#1f4e79')),
        ('TEXTCOLOR', (0, 0), (0, -1), white),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, black)
    ]))
    story.append(version_table)
    
    story.append(PageBreak())
    
    # Table des mati√®res
    story.append(Paragraph("Table des Mati√®res", title_style))
    story.append(Spacer(1, 1*cm))
    
    toc_items = [
        "PARTIE 1 : R√âSUM√â EX√âCUTIF",
        "   1. Probl√©matique et solution",
        "   2. Fonctionnalit√©s cl√©s",
        "   3. Avantages et ROI",
        "   4. Technologies et architecture",
        "   5. Planning et m√©triques",
        "",
        "PARTIE 2 : CAHIER DES CHARGES D√âTAILL√â",
        "   1. Pr√©sentation du projet",
        "   2. Sp√©cifications fonctionnelles",
        "   3. Sp√©cifications techniques",
        "   4. Contraintes et exigences",
        "   5. Livrables",
        "   6. Planning et phases",
        "   7. Tests et validation",
        "   8. Maintenance et √©volution",
        "   9. Risques et mitigation",
        "   10. Conclusion",
        "",
        "PARTIE 3 : SP√âCIFICATIONS TECHNIQUES",
        "   1. Architecture syst√®me",
        "   2. Modules d√©taill√©s",
        "   3. Structures de donn√©es",
        "   4. Performance et s√©curit√©",
        "   5. Tests et d√©ploiement"
    ]
    
    for item in toc_items:
        if item == "":
            story.append(Spacer(1, 0.5*cm))
        else:
            story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # PARTIE 1 : R√âSUM√â EX√âCUTIF
    story.append(Paragraph("PARTIE 1 : R√âSUM√â EX√âCUTIF", title_style))
    story.append(PageBreak())
    
    # Probl√©matique
    story.append(Paragraph("1. Probl√©matique et solution", subtitle_style))
    
    story.append(Paragraph("""
        La SAS Literie Westelynck traite manuellement des centaines de devis PDF par mois, 
        ce qui repr√©sente un d√©fi majeur pour la productivit√© et la qualit√© :
    """, normal_style))
    
    problemes = [
        "Temps perdu : 4-6 heures par jour de traitement manuel",
        "Erreurs humaines : 15-20% de corrections n√©cessaires",
        "Co√ªt : 2000-3000‚Ç¨/mois en temps de traitement",
        "D√©lais : Retards dans la production",
        "Standardisation : Processus difficile √† uniformiser"
    ]
    
    for probleme in problemes:
        story.append(Paragraph(f"‚Ä¢ {probleme}", list_style))
    
    story.append(Paragraph("Solution propos√©e :", highlight_style))
    
    solutions = [
        "Application automatis√©e utilisant l'Intelligence Artificielle",
        "Analyse automatique des devis PDF avec GPT-4",
        "G√©n√©ration de fichiers Excel pr√™ts pour l'inscription",
        "Standardisation compl√®te du processus"
    ]
    
    for solution in solutions:
        story.append(Paragraph(f"‚Ä¢ {solution}", list_style))
    
    story.append(PageBreak())
    
    # Fonctionnalit√©s cl√©s
    story.append(Paragraph("2. Fonctionnalit√©s cl√©s", subtitle_style))
    
    story.append(Paragraph("‚úÖ Traitement automatique", section_style))
    
    traitement_features = [
        "Lecture des PDF avec extraction de texte",
        "Analyse LLM (GPT-4) pour comprendre le contenu",
        "Extraction structur√©e des donn√©es (client, matelas, dimensions, prix)",
        "Validation automatique des informations"
    ]
    
    for feature in traitement_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(Paragraph("‚úÖ G√©n√©ration Excel", section_style))
    
    excel_features = [
        "Templates sp√©cialis√©s par type de matelas",
        "Remplissage automatique des cellules",
        "Coloration conditionnelle selon les caract√©ristiques",
        "Support de 6 types de matelas diff√©rents"
    ]
    
    for feature in excel_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(Paragraph("‚úÖ Interface utilisateur", section_style))
    
    ui_features = [
        "Interface moderne PyQt6 avec logo Westelynck",
        "Drag & drop des fichiers PDF",
        "Suivi en temps r√©el du traitement",
        "Gestion des erreurs et corrections"
    ]
    
    for feature in ui_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(PageBreak())
    
    # Avantages et ROI
    story.append(Paragraph("3. Avantages et ROI", subtitle_style))
    
    story.append(Paragraph("üöÄ Gain de productivit√©", section_style))
    
    gains = [
        "Temps de traitement : 30 secondes vs 15 minutes manuellement",
        "Pr√©cision : 95%+ vs 80% manuellement",
        "Capacit√© : 10 devis simultan√©s vs 1 manuellement",
        "Standardisation : Processus uniforme"
    ]
    
    for gain in gains:
        story.append(Paragraph(f"‚Ä¢ {gain}", list_style))
    
    story.append(Paragraph("üí∞ Retour sur investissement", section_style))
    
    roi = [
        "√âconomies : 2000-3000‚Ç¨/mois en temps de travail",
        "ROI : Amortissement en 3-6 mois",
        "Scalabilit√© : Pas de co√ªt suppl√©mentaire pour plus de volume",
        "Qualit√© : R√©duction drastique des erreurs"
    ]
    
    for item in roi:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # Technologies et architecture
    story.append(Paragraph("4. Technologies et architecture", subtitle_style))
    
    story.append(Paragraph("Technologies utilis√©es :", section_style))
    
    technologies = [
        "Python 3.8+ : Langage principal",
        "PyQt6 : Interface graphique moderne",
        "OpenAI GPT-4 : Intelligence artificielle",
        "PyPDF2 : Lecture des PDF",
        "openpyxl : G√©n√©ration Excel",
        "Cryptographie : S√©curisation des cl√©s API"
    ]
    
    for tech in technologies:
        story.append(Paragraph(f"‚Ä¢ {tech}", list_style))
    
    story.append(Paragraph("Architecture :", section_style))
    
    story.append(Paragraph("""
        Frontend (PyQt6) ‚Üê‚Üí Backend (Python) ‚Üê‚Üí LLM APIs (OpenAI/OpenRouter)
    """, code_style))
    
    arch_features = [
        "Interface utilisateur PyQt6 moderne",
        "Modules backend sp√©cialis√©s par type de matelas",
        "Int√©gration multi-providers LLM",
        "Syst√®me de s√©curit√© et chiffrement"
    ]
    
    for feature in arch_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(PageBreak())
    
    # Planning et m√©triques
    story.append(Paragraph("5. Planning et m√©triques", subtitle_style))
    
    story.append(Paragraph("Planning :", section_style))
    
    story.append(Paragraph("‚úÖ Phase 1 : D√©veloppement initial (TERMIN√âE)", highlight_style))
    story.append(Paragraph("üîÑ Phase 2 : Optimisation (EN COURS)", highlight_style))
    story.append(Paragraph("üìã Phase 3 : √âvolutions futures", highlight_style))
    
    story.append(Paragraph("M√©triques de succ√®s :", section_style))
    
    metrics = [
        "Temps de traitement : < 30 secondes par devis",
        "Pr√©cision d'extraction : > 95%",
        "Taux d'adoption : 100% des utilisateurs form√©s",
        "ROI : Amortissement en 6 mois maximum",
        "Satisfaction utilisateur : > 90%"
    ]
    
    for metric in metrics:
        story.append(Paragraph(f"‚Ä¢ {metric}", list_style))
    
    story.append(PageBreak())
    
    # PARTIE 2 : CAHIER DES CHARGES D√âTAILL√â
    story.append(Paragraph("PARTIE 2 : CAHIER DES CHARGES D√âTAILL√â", title_style))
    story.append(PageBreak())
    
    # Pr√©sentation du projet
    story.append(Paragraph("1. Pr√©sentation du projet", subtitle_style))
    
    story.append(Paragraph("1.1 Contexte et objectifs", section_style))
    
    story.append(Paragraph("""
        <b>Projet :</b> Literie Processor (anciennement MatelasApp)<br/>
        <b>Client :</b> SAS Literie Westelynck<br/>
        <b>D√©veloppeur :</b> SCINNOVA<br/>
        <b>Date de cr√©ation :</b> 2025<br/>
        <b>Version actuelle :</b> 3.0.1
    """, normal_style))
    
    story.append(Paragraph("1.2 Probl√©matique", section_style))
    
    story.append(Paragraph("""
        La SAS Literie Westelynck re√ßoit quotidiennement de nombreux devis de matelas au format PDF. 
        Le traitement manuel de ces devis pr√©sente plusieurs d√©fis majeurs :
    """, normal_style))
    
    problemes_detailed = [
        "Chronophage : Plusieurs heures par jour de traitement manuel",
        "Source d'erreurs humaines : 15-20% de corrections n√©cessaires",
        "Difficile √† standardiser : Processus non uniforme",
        "Co√ªteux en ressources humaines : 2000-3000‚Ç¨/mois",
        "D√©lais de production : Retards dus au traitement manuel"
    ]
    
    for probleme in problemes_detailed:
        story.append(Paragraph(f"‚Ä¢ {probleme}", list_style))
    
    story.append(PageBreak())
    
    # Sp√©cifications fonctionnelles
    story.append(Paragraph("2. Sp√©cifications fonctionnelles", subtitle_style))
    
    story.append(Paragraph("2.1 Fonctionnalit√©s principales", section_style))
    
    story.append(Paragraph("2.1.1 Traitement des devis PDF", section_style))
    
    pdf_features = [
        "Extraction de texte : Lecture et extraction du contenu textuel des fichiers PDF",
        "Analyse LLM : Utilisation d'intelligence artificielle pour comprendre et structurer les informations",
        "Validation : V√©rification de la coh√©rence des donn√©es extraites",
        "Gestion d'erreurs : Traitement robuste des cas particuliers et des erreurs"
    ]
    
    for feature in pdf_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(Paragraph("2.1.2 G√©n√©ration de fichiers Excel", section_style))
    
    excel_features_detailed = [
        "Templates sp√©cialis√©s : Mod√®les Excel adapt√©s aux diff√©rents types de matelas",
        "Remplissage automatique : Insertion des donn√©es dans les cellules appropri√©es",
        "Coloration conditionnelle : Mise en forme visuelle selon les caract√©ristiques",
        "Validation des donn√©es : V√©rification de la coh√©rence avant export"
    ]
    
    for feature in excel_features_detailed:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(PageBreak())
    
    # Types de matelas support√©s
    story.append(Paragraph("2.2 Types de matelas support√©s", section_style))
    
    matelas_types = [
        "Latex Naturel - Densit√© et √©paisseur variables",
        "Latex Mixte 7 Zones - Zones de confort diff√©renci√©es",
        "Latex Renforc√© - Structure renforc√©e",
        "Mousse Visco√©lastique - M√©moire de forme",
        "Mousse Rainur√©e 7 Zones - Structure a√©r√©e",
        "Select 43 - Mousse haute densit√©"
    ]
    
    for matelas in matelas_types:
        story.append(Paragraph(f"‚Ä¢ {matelas}", list_style))
    
    story.append(PageBreak())
    
    # Sp√©cifications techniques
    story.append(Paragraph("3. Sp√©cifications techniques", subtitle_style))
    
    story.append(Paragraph("3.1 Architecture g√©n√©rale", section_style))
    
    story.append(Paragraph("3.1.1 Frontend (Interface utilisateur)", section_style))
    
    frontend_specs = [
        "Framework : PyQt6",
        "Design : Interface moderne et intuitive",
        "Responsive : Adaptation √† diff√©rentes r√©solutions",
        "Th√®me : Int√©gration du logo Westelynck"
    ]
    
    for spec in frontend_specs:
        story.append(Paragraph(f"‚Ä¢ {spec}", list_style))
    
    story.append(Paragraph("3.1.2 Backend (Traitement)", section_style))
    
    backend_specs = [
        "Langage : Python 3.8+",
        "Modules sp√©cialis√©s : Un module par type de matelas",
        "API LLM : Int√©gration multi-providers",
        "Gestion des donn√©es : JSON et Excel"
    ]
    
    for spec in backend_specs:
        story.append(Paragraph(f"‚Ä¢ {spec}", list_style))
    
    story.append(PageBreak())
    
    # Contraintes et exigences
    story.append(Paragraph("4. Contraintes et exigences", subtitle_style))
    
    story.append(Paragraph("4.1 Contraintes techniques", section_style))
    
    story.append(Paragraph("4.1.1 Compatibilit√©", section_style))
    
    compatibilite = [
        "Syst√®mes d'exploitation : Windows 10+, macOS 10.15+, Linux",
        "Python : Version 3.8 ou sup√©rieure",
        "M√©moire : Minimum 4 GB RAM",
        "Espace disque : 500 MB pour l'installation"
    ]
    
    for item in compatibilite:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(Paragraph("4.1.2 S√©curit√©", section_style))
    
    securite = [
        "Chiffrement : AES-256 pour les cl√©s API",
        "Validation : V√©rification des entr√©es utilisateur",
        "Isolation : Pas d'acc√®s r√©seau non autoris√©"
    ]
    
    for item in securite:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # Livrables
    story.append(Paragraph("5. Livrables", subtitle_style))
    
    story.append(Paragraph("5.1 Application principale", section_style))
    
    app_livrables = [
        "Ex√©cutable standalone : Installation simple",
        "Interface graphique : PyQt6 moderne",
        "Documentation : Guide utilisateur complet"
    ]
    
    for livrable in app_livrables:
        story.append(Paragraph(f"‚Ä¢ {livrable}", list_style))
    
    story.append(Paragraph("5.2 Documentation technique", section_style))
    
    doc_livrables = [
        "Cahier des charges : Ce document",
        "Documentation d√©veloppeur : Guide technique",
        "API documentation : R√©f√©rence des modules"
    ]
    
    for livrable in doc_livrables:
        story.append(Paragraph(f"‚Ä¢ {livrable}", list_style))
    
    story.append(PageBreak())
    
    # Planning et phases
    story.append(Paragraph("6. Planning et phases", subtitle_style))
    
    story.append(Paragraph("6.1 Phase 1 : D√©veloppement initial (Termin√©e)", section_style))
    
    phase1 = [
        "Architecture : Structure modulaire",
        "Core modules : Modules de base",
        "Interface : GUI PyQt6",
        "Tests : Validation fonctionnelle"
    ]
    
    for item in phase1:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(Paragraph("6.2 Phase 2 : Optimisation (En cours)", section_style))
    
    phase2 = [
        "Performance : Optimisation des traitements",
        "Robustesse : Gestion d'erreurs avanc√©e",
        "Documentation : Guides complets",
        "Packaging : Distribution standalone"
    ]
    
    for item in phase2:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # Tests et validation
    story.append(Paragraph("7. Tests et validation", subtitle_style))
    
    story.append(Paragraph("7.1 Tests unitaires", section_style))
    
    tests_unitaires = [
        "Modules backend : Tests de chaque fonction",
        "Calculs : Validation des formules",
        "API : Tests des appels externes"
    ]
    
    for test in tests_unitaires:
        story.append(Paragraph(f"‚Ä¢ {test}", list_style))
    
    story.append(Paragraph("7.2 Tests d'int√©gration", section_style))
    
    tests_integration = [
        "Workflow complet : PDF ‚Üí Excel",
        "Interface : Tests utilisateur",
        "Performance : Tests de charge"
    ]
    
    for test in tests_integration:
        story.append(Paragraph(f"‚Ä¢ {test}", list_style))
    
    story.append(PageBreak())
    
    # Maintenance et √©volution
    story.append(Paragraph("8. Maintenance et √©volution", subtitle_style))
    
    story.append(Paragraph("8.1 Maintenance pr√©ventive", section_style))
    
    maintenance_preventive = [
        "Monitoring : Surveillance des performances",
        "Logs : Analyse des erreurs",
        "Mises √† jour : Corrections et am√©liorations"
    ]
    
    for item in maintenance_preventive:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(Paragraph("8.2 Maintenance corrective", section_style))
    
    maintenance_corrective = [
        "Bugs : Correction des erreurs",
        "Compatibilit√© : Adaptation aux √©volutions",
        "S√©curit√© : Corrections de vuln√©rabilit√©s"
    ]
    
    for item in maintenance_corrective:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # Risques et mitigation
    story.append(Paragraph("9. Risques et mitigation", subtitle_style))
    
    story.append(Paragraph("9.1 Risques techniques", section_style))
    
    risques_tech = [
        "√âvolution des APIs ‚Üí Monitoring et adaptation",
        "Compatibilit√© ‚Üí Tests r√©guliers",
        "Performance ‚Üí Optimisation continue"
    ]
    
    for risque in risques_tech:
        story.append(Paragraph(f"‚Ä¢ {risque}", list_style))
    
    story.append(Paragraph("9.2 Risques fonctionnels", section_style))
    
    risques_fonctionnels = [
        "Pr√©cision LLM ‚Üí Am√©lioration des prompts",
        "√âvolution des devis ‚Üí Adaptation des mod√®les",
        "Formats ‚Üí Support de nouveaux formats"
    ]
    
    for risque in risques_fonctionnels:
        story.append(Paragraph(f"‚Ä¢ {risque}", list_style))
    
    story.append(PageBreak())
    
    # Conclusion
    story.append(Paragraph("10. Conclusion", subtitle_style))
    
    story.append(Paragraph("""
        Le projet Literie Processor r√©pond parfaitement aux besoins de la SAS Literie Westelynck 
        en automatisant le traitement des devis PDF. L'application combine technologies modernes 
        (IA, interface graphique) et robustesse technique pour offrir une solution compl√®te et √©volutive.
    """, normal_style))
    
    story.append(Paragraph("Points forts :", highlight_style))
    
    points_forts = [
        "Automatisation compl√®te du processus",
        "Pr√©cision √©lev√©e gr√¢ce √† l'IA",
        "Interface utilisateur intuitive",
        "Architecture modulaire et √©volutive",
        "Documentation compl√®te"
    ]
    
    for point in points_forts:
        story.append(Paragraph(f"‚Ä¢ {point}", list_style))
    
    story.append(Paragraph("Perspectives :", highlight_style))
    
    perspectives = [
        "Extension √† d'autres types de documents",
        "Interface web pour acc√®s distant",
        "Int√©gration avec les syst√®mes existants",
        "D√©veloppement d'une version SaaS"
    ]
    
    for perspective in perspectives:
        story.append(Paragraph(f"‚Ä¢ {perspective}", list_style))
    
    story.append(PageBreak())
    
    # PARTIE 3 : SP√âCIFICATIONS TECHNIQUES
    story.append(Paragraph("PARTIE 3 : SP√âCIFICATIONS TECHNIQUES", title_style))
    story.append(PageBreak())
    
    # Architecture syst√®me
    story.append(Paragraph("1. Architecture syst√®me", subtitle_style))
    
    story.append(Paragraph("1.1 Vue d'ensemble", section_style))
    
    story.append(Paragraph("""
        L'application Literie Processor suit une architecture modulaire avec les composants suivants :
    """, normal_style))
    
    arch_components = [
        "Frontend PyQt6 : Interface utilisateur moderne",
        "Backend Python : Modules de traitement sp√©cialis√©s",
        "APIs externes : OpenAI, OpenRouter pour l'IA",
        "Syst√®me de s√©curit√© : Chiffrement des cl√©s API",
        "Gestion des donn√©es : JSON et Excel"
    ]
    
    for component in arch_components:
        story.append(Paragraph(f"‚Ä¢ {component}", list_style))
    
    story.append(Paragraph("1.2 Communication inter-modules", section_style))
    
    story.append(Paragraph("""
        La communication entre les modules s'effectue via :
    """, normal_style))
    
    communication = [
        "backend_interface.py : Interface principale",
        "JSON : Format de s√©rialisation des donn√©es",
        "Exceptions structur√©es : Gestion d'erreurs",
        "Logs d√©taill√©s : Tra√ßabilit√© compl√®te"
    ]
    
    for item in communication:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    story.append(PageBreak())
    
    # Modules d√©taill√©s
    story.append(Paragraph("2. Modules d√©taill√©s", subtitle_style))
    
    story.append(Paragraph("2.1 Module Interface (app_gui.py)", section_style))
    
    gui_features = [
        "Classe MatelasApp : Application principale PyQt6",
        "Widgets : QFileDialog, QProgressBar, QTextEdit, QTableWidget",
        "√âv√©nements : Drag & drop, s√©lection multiple, raccourcis clavier",
        "Threading : Traitement asynchrone avec QThread"
    ]
    
    for feature in gui_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(Paragraph("2.2 Module Backend Interface", section_style))
    
    backend_features = [
        "Workflow de traitement : Validation ‚Üí Extraction ‚Üí Analyse ‚Üí G√©n√©ration",
        "Gestion d'erreurs : Fichiers corrompus, APIs indisponibles, parsing √©chou√©",
        "Validation : V√©rification des donn√©es avant traitement",
        "Logs : Tra√ßabilit√© compl√®te des op√©rations"
    ]
    
    for feature in backend_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(PageBreak())
    
    # Structures de donn√©es
    story.append(Paragraph("3. Structures de donn√©es", subtitle_style))
    
    story.append(Paragraph("3.1 Format JSON d'entr√©e", section_style))
    
    story.append(Paragraph("""
        Le format JSON g√©n√©r√© par l'IA contient :
    """, normal_style))
    
    json_structure = [
        "societe : Informations de la soci√©t√©",
        "client : Donn√©es client (nom, adresse, t√©l√©phone)",
        "configurations : Liste des matelas avec caract√©ristiques",
        "total_ht, tva, total_ttc : Calculs financiers"
    ]
    
    for structure in json_structure:
        story.append(Paragraph(f"‚Ä¢ {structure}", list_style))
    
    story.append(Paragraph("3.2 Format de sortie Excel", section_style))
    
    excel_output = [
        "Feuille 1 : Donn√©es client et soci√©t√©",
        "Feuille 2 : Configurations matelas",
        "Feuille 3 : Configurations sommiers",
        "Feuille 4 : R√©sum√© et totaux"
    ]
    
    for output in excel_output:
        story.append(Paragraph(f"‚Ä¢ {output}", list_style))
    
    story.append(PageBreak())
    
    # Performance et s√©curit√©
    story.append(Paragraph("4. Performance et s√©curit√©", subtitle_style))
    
    story.append(Paragraph("4.1 M√©triques de performance", section_style))
    
    performance_metrics = [
        "Temps de traitement : < 30 secondes par devis",
        "M√©moire utilis√©e : < 500 MB",
        "CPU : < 50% d'utilisation moyenne",
        "I/O : Optimisation des lectures/√©critures"
    ]
    
    for metric in performance_metrics:
        story.append(Paragraph(f"‚Ä¢ {metric}", list_style))
    
    story.append(Paragraph("4.2 Optimisations impl√©ment√©es", section_style))
    
    optimizations = [
        "Threading : Traitement asynchrone",
        "Caching : Mise en cache des r√©f√©rentiels",
        "Lazy loading : Chargement √† la demande",
        "Compression : R√©duction de la taille des donn√©es"
    ]
    
    for optimization in optimizations:
        story.append(Paragraph(f"‚Ä¢ {optimization}", list_style))
    
    story.append(Paragraph("4.3 S√©curit√©", section_style))
    
    security_features = [
        "Chiffrement AES-256 : Pour les cl√©s API",
        "Validation : Sanitisation des entr√©es utilisateur",
        "Isolation : Contr√¥le des acc√®s r√©seau",
        "Logs d'audit : Tra√ßabilit√© compl√®te"
    ]
    
    for feature in security_features:
        story.append(Paragraph(f"‚Ä¢ {feature}", list_style))
    
    story.append(PageBreak())
    
    # Tests et d√©ploiement
    story.append(Paragraph("5. Tests et d√©ploiement", subtitle_style))
    
    story.append(Paragraph("5.1 Tests unitaires", section_style))
    
    unit_tests = [
        "Modules backend : Tests de chaque fonction",
        "Calculs : Validation des formules",
        "API : Tests des appels externes",
        "Interface : Tests des widgets"
    ]
    
    for test in unit_tests:
        story.append(Paragraph(f"‚Ä¢ {test}", list_style))
    
    story.append(Paragraph("5.2 Tests d'int√©gration", section_style))
    
    integration_tests = [
        "Workflow complet : PDF ‚Üí JSON ‚Üí Excel",
        "APIs externes : Tests des providers LLM",
        "Interface : Tests utilisateur",
        "Performance : Tests de charge"
    ]
    
    for test in integration_tests:
        story.append(Paragraph(f"‚Ä¢ {test}", list_style))
    
    story.append(Paragraph("5.3 D√©ploiement", section_style))
    
    deployment = [
        "PyInstaller : Cr√©ation d'ex√©cutables standalone",
        "Cross-platform : Windows, macOS, Linux",
        "D√©pendances : Inclusion automatique",
        "Installation : Scripts d'installation"
    ]
    
    for item in deployment:
        story.append(Paragraph(f"‚Ä¢ {item}", list_style))
    
    # Page de fin
    story.append(PageBreak())
    
    story.append(Spacer(1, 3*cm))
    story.append(Paragraph("Cahier des Charges Complet", title_style))
    story.append(Paragraph("Literie Processor", subtitle_style))
    story.append(Paragraph("D√©velopp√© par SCINNOVA", subtitle_style))
    story.append(Paragraph("Pour SAS Literie Westelynck", subtitle_style))
    story.append(Paragraph("Merci de votre confiance", normal_style))
    
    # Informations de contact
    story.append(Spacer(1, 2*cm))
    
    contact_info = [
        ["Contact technique", "sebastien.confrere@scinnova.fr"],
        ["T√©l√©phone", "06.66.05.72.47"],
        ["√âditeur", "SCINNOVA"],
        ["Client", "SAS Literie Westelynck"]
    ]
    
    contact_table = Table(contact_info, colWidths=[4*cm, 7*cm])
    contact_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), HexColor('#1f4e79')),
        ('TEXTCOLOR', (0, 0), (0, -1), white),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, black)
    ]))
    story.append(contact_table)
    
    # G√©n√©ration du PDF
    doc.build(story)
    print("‚úÖ Cahier des charges complet PDF g√©n√©r√© avec succ√®s : Cahier_Charges_Complet_Literie_Processor.pdf")

if __name__ == "__main__":
    try:
        create_cahier_charges_complet_pdf()
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du PDF : {e}")
        sys.exit(1) 