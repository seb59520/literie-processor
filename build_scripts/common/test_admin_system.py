#!/usr/bin/env python3
"""
Test du syst√®me d'administration de l'application Matelas Processor
"""

import sys
import os

# Ajouter le r√©pertoire courant au path
sys.path.append('.')

def test_admin_modules():
    """Test des modules d'administration"""
    print("=== Test des modules d'administration ===")
    
    try:
        # Test du module de mise √† jour de version
        from update_version import get_current_version, update_version_file
        current_version = get_current_version()
        print(f"‚úì Version actuelle: {current_version}")
        
        # Test du module de logging d'administration
        from admin_logger import setup_admin_logger, log_admin_operation
        logger = setup_admin_logger()
        print("‚úì Logger d'administration configur√©")
        
        # Test d'une op√©ration de log
        log_admin_operation("Test", "Test du syst√®me d'administration")
        print("‚úì Op√©ration de log test√©e")
        
        # Test du module de version
        from version import get_version_info
        version_info = get_version_info()
        print(f"‚úì Informations de version: {version_info['version']}")
        
        print("\n‚úÖ Tous les modules d'administration sont fonctionnels!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_admin_dialog_import():
    """Test de l'import du dialogue administrateur"""
    print("\n=== Test du dialogue administrateur ===")
    
    try:
        from admin_dialog import AdminDialog, show_admin_dialog
        print("‚úì Dialogue administrateur import√© avec succ√®s")
        
        # Test de la fonction utilitaire
        print("‚úì Fonction show_admin_dialog disponible")
        
        print("‚úÖ Dialogue administrateur pr√™t √† l'utilisation!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import du dialogue: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_admin_logs():
    """Test du syst√®me de logs d'administration"""
    print("\n=== Test du syst√®me de logs ===")
    
    try:
        from admin_logger import get_admin_logs, log_admin_access
        
        # Tester l'acc√®s administrateur
        log_admin_access(True)
        log_admin_access(False)
        print("‚úì Logs d'acc√®s cr√©√©s")
        
        # R√©cup√©rer les logs
        logs = get_admin_logs()
        print(f"‚úì Logs r√©cup√©r√©s (longueur: {len(logs)} caract√®res)")
        
        if "Acc√®s administrateur" in logs:
            print("‚úÖ Logs d'administration fonctionnels!")
            return True
        else:
            print("‚ùå Logs d'administration vides ou incorrects")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test des logs: {e}")
        return False

def test_version_update_system():
    """Test du syst√®me de mise √† jour de version"""
    print("\n=== Test du syst√®me de mise √† jour ===")
    
    try:
        from update_version import get_current_version, update_version_file
        
        # Sauvegarder la version actuelle
        original_version = get_current_version()
        print(f"‚úì Version originale: {original_version}")
        
        # Test de mise √† jour (simulation)
        test_version = "2.2.0"  # M√™me version pour ne pas changer
        test_date = "2025-07-16"
        test_build = "20250716"
        test_changelog = "## Version 2.2.0 (2025-07-16)\n- Test de mise √† jour"
        
        # V√©rifier que la fonction existe
        success = update_version_file(test_version, test_date, test_build, test_changelog)
        print(f"‚úì Fonction de mise √† jour test√©e: {success}")
        
        # V√©rifier que la version n'a pas chang√© (car m√™me version)
        current_version = get_current_version()
        if current_version == original_version:
            print("‚úÖ Syst√®me de mise √† jour fonctionnel!")
            return True
        else:
            print(f"‚ùå Version inattendue: {current_version}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de mise √† jour: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("Test du syst√®me d'administration - Matelas Processor")
    print("=" * 60)
    
    # Test des modules
    modules_ok = test_admin_modules()
    
    # Test du dialogue
    dialog_ok = test_admin_dialog_import()
    
    # Test des logs
    logs_ok = test_admin_logs()
    
    # Test de mise √† jour
    update_ok = test_version_update_system()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("R√âSUM√â DES TESTS:")
    print(f"‚úì Modules d'administration: {'PASS√â' if modules_ok else '√âCHOU√â'}")
    print(f"‚úì Dialogue administrateur: {'PASS√â' if dialog_ok else '√âCHOU√â'}")
    print(f"‚úì Syst√®me de logs: {'PASS√â' if logs_ok else '√âCHOU√â'}")
    print(f"‚úì Mise √† jour de version: {'PASS√â' if update_ok else '√âCHOU√â'}")
    
    if all([modules_ok, dialog_ok, logs_ok, update_ok]):
        print("\nüéâ Tous les tests d'administration sont pass√©s avec succ√®s!")
        print("\nüìã Fonctionnalit√©s disponibles:")
        print("  ‚Ä¢ Menu R√©glages ‚Üí Administration (mot de passe: 1981)")
        print("  ‚Ä¢ Gestion des versions avec mise √† jour automatique")
        print("  ‚Ä¢ Cr√©ation et application de patches")
        print("  ‚Ä¢ Logs d'administration complets")
        print("  ‚Ä¢ Interface graphique s√©curis√©e")
        return 0
    else:
        print("\n‚ùå Certains tests ont √©chou√©.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 