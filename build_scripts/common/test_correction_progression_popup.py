#!/usr/bin/env python3
"""
Script de test pour v√©rifier la correction de la barre de progression
et de l'alerte "Traitement termin√©" lors de l'affichage de la popup de confirmation
"""

import sys
import os
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QPushButton, QLabel, QWidget, QProgressBar
from PyQt6.QtCore import QTimer, QThread, pyqtSignal
from PyQt6.QtGui import QFont

# Import de l'application principale
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class TestProcessingThread(QThread):
    """Thread de test pour simuler le traitement"""
    progress_updated = pyqtSignal(int)
    recommendations_ready = pyqtSignal(dict)
    
    def run(self):
        """Simule le traitement avec analyse pr√©liminaire"""
        print("üß™ D√©but du test de traitement")
        
        # Simulation de l'analyse pr√©liminaire
        for i in range(5, 31, 5):
            self.progress_updated.emit(i)
            import time
            time.sleep(0.2)
        
        print("üìä Analyse pr√©liminaire termin√©e - envoi des recommandations")
        
        # Simuler les recommandations de production
        recommendations = {
            "test_file.pdf": {
                'has_matelas': True,
                'has_sommiers': False,
                'matelas_count': 2,
                'sommier_count': 0,
                'semaine_actuelle': 31,
                'annee_actuelle': 2025,
                'recommendation': "Seulement matelas d√©tect√©s - production S+1",
                'semaine_matelas': 32,
                'annee_matelas': 2025,
                'semaine_sommiers': 32,
                'annee_sommiers': 2025
            }
        }
        
        # Envoyer les recommandations (ce qui d√©clenche la popup)
        self.recommendations_ready.emit(recommendations)
        
        print("‚úÖ Recommandations envoy√©es - thread se termine")

def test_correction_progression_popup():
    """Test de la correction de la barre de progression"""
    print("üß™ Test de correction de la barre de progression")
    
    app = QApplication(sys.argv)
    
    try:
        # Importer et cr√©er l'application principale
        from app_gui import MatelasApp
        
        # Cr√©er l'application
        main_app = MatelasApp()
        main_app.show()
        
        print("‚úÖ Application cr√©√©e avec succ√®s")
        
        # V√©rifier que la barre de progression est initialement masqu√©e
        progress_bar = main_app.progress_bar
        progress_status_label = main_app.progress_status_label
        
        print(f"   - Barre de progression visible: {progress_bar.isVisible()}")
        print(f"   - Label de statut visible: {progress_status_label.isVisible()}")
        
        # Simuler la s√©lection de fichiers
        main_app.selected_files = ["test_file.pdf"]
        
        # Cr√©er et lancer le thread de test
        test_thread = TestProcessingThread()
        
        # Connecter les signaux
        test_thread.progress_updated.connect(main_app.on_progress_updated)
        test_thread.recommendations_ready.connect(main_app.show_production_recommendations)
        test_thread.finished.connect(lambda: print("‚úÖ Thread de test termin√©"))
        
        # Lancer le test
        print("üöÄ Lancement du test de traitement...")
        test_thread.start()
        
        # V√©rifier que la barre de progression devient visible
        def check_progress_visible():
            print(f"üìä V√©rification barre de progression:")
            print(f"   - Visible: {progress_bar.isVisible()}")
            print(f"   - Valeur: {progress_bar.value()}%")
            print(f"   - Label visible: {progress_status_label.isVisible()}")
            print(f"   - Texte label: {progress_status_label.text()}")
            
            # V√©rifier que la barre est visible pendant l'analyse
            if progress_bar.isVisible():
                print("‚úÖ Barre de progression visible pendant l'analyse")
            else:
                print("‚ùå Barre de progression masqu√©e pendant l'analyse")
        
        # V√©rifier apr√®s 2 secondes
        QTimer.singleShot(2000, check_progress_visible)
        
        # V√©rifier apr√®s 4 secondes (quand la popup devrait appara√Ætre)
        def check_during_popup():
            print(f"üìã V√©rification pendant la popup:")
            print(f"   - Barre visible: {progress_bar.isVisible()}")
            print(f"   - Valeur: {progress_bar.value()}%")
            
            # La barre devrait rester visible pendant la popup
            if progress_bar.isVisible():
                print("‚úÖ Barre de progression reste visible pendant la popup")
            else:
                print("‚ùå Barre de progression masqu√©e pendant la popup")
        
        QTimer.singleShot(4000, check_during_popup)
        
        # Fermer l'application apr√®s 15 secondes
        QTimer.singleShot(15000, app.quit)
        
        print("\nüéØ Test en cours...")
        print("   - La barre de progression devrait devenir visible")
        print("   - La popup de recommandations devrait appara√Ætre")
        print("   - La barre de progression devrait rester visible pendant la popup")
        print("   - L'alerte 'Traitement termin√©' ne devrait PAS appara√Ætre pr√©matur√©ment")
        
        return app.exec()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return 1

if __name__ == "__main__":
    test_correction_progression_popup() 