#!/usr/bin/env python3
"""
Script de test pour l'ex√©cutable Windows
"""

import os
import sys
import subprocess
import platform

def test_executable():
    """Teste l'ex√©cutable Windows"""
    
    print("=" * 50)
    print("TEST EX√âCUTABLE WINDOWS")
    print("=" * 50)
    
    # V√©rifier qu'on est sur Windows
    if platform.system() != "Windows":
        print("‚ùå Ce script est con√ßu pour Windows")
        return
    
    # V√©rifier l'ex√©cutable
    exe_path = "dist/MatelasApp_Fixed.exe"
    
    if not os.path.exists(exe_path):
        print(f"‚ùå Ex√©cutable non trouv√©: {exe_path}")
        print("Compilez d'abord avec: pyinstaller MatelasApp_Fixed.spec --clean")
        return
    
    print(f"‚úÖ Ex√©cutable trouv√©: {exe_path}")
    size_mb = os.path.getsize(exe_path) / (1024*1024)
    print(f"   Taille: {size_mb:.1f} MB")
    print()
    
    # Test 1: Lancement direct
    print("üß™ Test 1: Lancement direct...")
    try:
        result = subprocess.run([exe_path], 
                              capture_output=True, 
                              text=True, 
                              timeout=10)
        
        print(f"Code de retour: {result.returncode}")
        if result.stdout:
            print("Sortie standard:")
            print(result.stdout)
        if result.stderr:
            print("Erreurs:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚úÖ Ex√©cutable s'est lanc√© (arr√™t√© apr√®s 10s)")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print()
    
    # Test 2: Lancement avec cmd pour voir les erreurs
    print("üß™ Test 2: Lancement avec cmd...")
    try:
        cmd = f'cmd /c "{exe_path}" 2>&1'
        result = subprocess.run(cmd, 
                              shell=True,
                              capture_output=True, 
                              text=True, 
                              timeout=15)
        
        print(f"Code de retour: {result.returncode}")
        if result.stdout:
            print("Sortie:")
            print(result.stdout)
        if result.stderr:
            print("Erreurs:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚úÖ Ex√©cutable s'est lanc√© (arr√™t√© apr√®s 15s)")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print()
    
    # Test 3: V√©rifier les d√©pendances
    print("üß™ Test 3: V√©rification des d√©pendances...")
    
    # V√©rifier les DLLs syst√®me
    system_dlls = [
        "msvcp140.dll",
        "vcruntime140.dll",
        "python311.dll"
    ]
    
    for dll in system_dlls:
        try:
            import ctypes
            ctypes.windll.LoadLibrary(dll)
            print(f"‚úÖ {dll}")
        except:
            print(f"‚ùå {dll} manquant")
    
    print()
    
    # Test 4: V√©rifier les dossiers de donn√©es
    print("üß™ Test 4: V√©rification des dossiers de donn√©es...")
    
    data_dirs = [
        "backend",
        "assets", 
        "template",
        "config"
    ]
    
    for dir_name in data_dirs:
        if os.path.exists(dir_name):
            print(f"‚úÖ {dir_name}/")
        else:
            print(f"‚ùå {dir_name}/ manquant")
    
    print()
    
    # Test 5: V√©rifier les imports Python
    print("üß™ Test 5: V√©rification des imports Python...")
    
    try:
        import PyQt6
        print("‚úÖ PyQt6")
    except ImportError as e:
        print(f"‚ùå PyQt6: {e}")
    
    try:
        import pandas
        print("‚úÖ pandas")
    except ImportError as e:
        print(f"‚ùå pandas: {e}")
    
    try:
        import openpyxl
        print("‚úÖ openpyxl")
    except ImportError as e:
        print(f"‚ùå openpyxl: {e}")
    
    print()
    
    # Test 6: Cr√©er un script de test simple
    print("üß™ Test 6: Cr√©ation d'un script de test...")
    
    test_script = '''import sys
import os

print("Test de l'environnement...")
print(f"Python: {sys.version}")
print(f"Executable: {sys.executable}")
print(f"Current dir: {os.getcwd()}")

try:
    import PyQt6
    print("PyQt6 OK")
except Exception as e:
    print(f"PyQt6 ERROR: {e}")

try:
    from backend_interface import backend_interface
    print("backend_interface OK")
except Exception as e:
    print(f"backend_interface ERROR: {e}")

try:
    from config import config
    print("config OK")
except Exception as e:
    print(f"config ERROR: {e}")

print("Test termin√©")
input("Appuyez sur Entr√©e...")
'''
    
    with open("test_simple.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    print("‚úÖ Script de test cr√©√©: test_simple.py")
    print("   Lancez: python test_simple.py")
    
    print()
    print("üí° Solutions possibles:")
    print("1. Lancez: python test_simple.py")
    print("2. V√©rifiez que tous les dossiers sont pr√©sents")
    print("3. Essayez de lancer l'ex√©cutable en tant qu'administrateur")
    print("4. V√©rifiez les logs dans le dossier logs/")
    print("5. Essayez de lancer depuis le dossier dist/")

if __name__ == "__main__":
    test_executable() 