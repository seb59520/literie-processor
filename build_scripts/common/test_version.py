#!/usr/bin/env python3
"""
Test du syst√®me de version de l'application Matelas Processor
"""

import sys
import os

# Ajouter le r√©pertoire courant au path
sys.path.append('.')

def test_version_system():
    """Test du syst√®me de version"""
    print("=== Test du syst√®me de version ===")
    
    try:
        from version import get_version, get_full_version, get_version_info, get_changelog
        
        # Test de la version simple
        version = get_version()
        print(f"‚úì Version simple: {version}")
        assert version == "2.2.0", f"Version attendue: 2.2.0, obtenue: {version}"
        
        # Test de la version compl√®te
        full_version = get_full_version()
        print(f"‚úì Version compl√®te: {full_version}")
        assert "2.2.0" in full_version, f"Version 2.2.0 non trouv√©e dans: {full_version}"
        
        # Test des informations de version
        version_info = get_version_info()
        print(f"‚úì Informations de version: {version_info}")
        assert "version" in version_info, "Cl√© 'version' manquante"
        assert "build_date" in version_info, "Cl√© 'build_date' manquante"
        assert "build_number" in version_info, "Cl√© 'build_number' manquante"
        assert "full_version" in version_info, "Cl√© 'full_version' manquante"
        
        # Test du changelog
        changelog = get_changelog()
        print(f"‚úì Changelog disponible (longueur: {len(changelog)} caract√®res)")
        assert len(changelog) > 100, "Changelog trop court"
        assert "Version 2.2.0" in changelog, "Version 2.2.0 non trouv√©e dans le changelog"
        
        print("\n‚úÖ Tous les tests de version sont pass√©s avec succ√®s!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except AssertionError as e:
        print(f"‚ùå Test √©chou√©: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_version_in_gui():
    """Test de l'int√©gration de la version dans l'interface GUI"""
    print("\n=== Test de l'int√©gration GUI ===")
    
    try:
        # Test d'import des modules GUI
        from app_gui import MatelasApp
        from PyQt6.QtWidgets import QApplication
        
        # Cr√©er une application Qt pour les tests
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        
        # Cr√©er l'application principale
        matelas_app = MatelasApp()
        
        # V√©rifier que le titre contient la version
        window_title = matelas_app.windowTitle()
        print(f"‚úì Titre de la fen√™tre: {window_title}")
        assert "v2.2.0" in window_title, f"Version non trouv√©e dans le titre: {window_title}"
        
        # Fermer l'application
        matelas_app.close()
        
        print("‚úÖ Test d'int√©gration GUI r√©ussi!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import GUI: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test GUI: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("Test du syst√®me de version - Matelas Processor")
    print("=" * 50)
    
    # Test du syst√®me de version
    version_ok = test_version_system()
    
    # Test de l'int√©gration GUI
    gui_ok = test_version_in_gui()
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("R√âSUM√â DES TESTS:")
    print(f"‚úì Syst√®me de version: {'PASS√â' if version_ok else '√âCHOU√â'}")
    print(f"‚úì Int√©gration GUI: {'PASS√â' if gui_ok else '√âCHOU√â'}")
    
    if version_ok and gui_ok:
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
        return 0
    else:
        print("\n‚ùå Certains tests ont √©chou√©.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 