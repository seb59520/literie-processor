#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'installation de l'application matelas
"""

import sys
import os
import importlib
import subprocess
from pathlib import Path

def test_python_version():
    """Teste la version de Python"""
    print("üêç Test de la version Python...")
    if sys.version_info >= (3, 8):
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} OK")
        return True
    else:
        print(f"‚ùå Python {sys.version_info.major}.{sys.version_info.minor} - Version 3.8+ requise")
        return False

def test_dependencies():
    """Teste les d√©pendances principales"""
    print("\nüì¶ Test des d√©pendances...")
    
    dependencies = [
        ('PyQt6', 'Interface graphique'),
        ('fitz', 'Traitement PDF'),
        ('openpyxl', 'Export Excel'),
        ('httpx', 'API HTTP'),
        ('jinja2', 'Templates'),
        ('cryptography', 'Chiffrement'),
        ('pandas', 'Manipulation donn√©es'),
        ('numpy', 'Calculs num√©riques'),
        ('requests', 'Requ√™tes HTTP'),
        ('jsonschema', 'Validation JSON'),
        ('pydantic', 'Validation donn√©es'),
    ]
    
    all_ok = True
    for module, description in dependencies:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module} - {description}")
        except ImportError:
            print(f"‚ùå {module} - {description} - MANQUANT")
            all_ok = False
    
    return all_ok

def test_files():
    """Teste la pr√©sence des fichiers essentiels"""
    print("\nüìÅ Test des fichiers essentiels...")
    
    essential_files = [
        'run_gui.py',
        'app_gui.py',
        'backend/main.py',
        'backend_interface.py',
        'config.py',
        'requirements_gui.txt',
        'backend/requirements.txt',
    ]
    
    all_ok = True
    for file_path in essential_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - MANQUANT")
            all_ok = False
    
    return all_ok

def test_directories():
    """Teste la pr√©sence des r√©pertoires essentiels"""
    print("\nüìÇ Test des r√©pertoires essentiels...")
    
    essential_dirs = [
        'backend',
        'assets',
        'template',
        'config',
        'R√©f√©rentiels',
        'Commandes',
    ]
    
    all_ok = True
    for dir_path in essential_dirs:
        if os.path.exists(dir_path) and os.path.isdir(dir_path):
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ùå {dir_path}/ - MANQUANT")
            all_ok = False
    
    return all_ok

def test_executable():
    """Teste si l'ex√©cutable existe"""
    print("\nüîß Test de l'ex√©cutable...")
    
    exe_path = "dist/MatelasApp.exe"
    if os.path.exists(exe_path):
        print(f"‚úÖ {exe_path} - Ex√©cutable trouv√©")
        
        # Test de lancement rapide
        try:
            result = subprocess.run([exe_path, "--help"], 
                                  capture_output=True, 
                                  timeout=10,
                                  text=True)
            if result.returncode == 0:
                print("‚úÖ Ex√©cutable fonctionnel")
                return True
            else:
                print("‚ö†Ô∏è  Ex√©cutable trouv√© mais probl√®me de lancement")
                return False
        except subprocess.TimeoutExpired:
            print("‚úÖ Ex√©cutable se lance (timeout normal)")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors du test de lancement: {e}")
            return False
    else:
        print(f"‚ùå {exe_path} - Ex√©cutable non trouv√©")
        print("üí° Lancez d'abord: python setup_windows.py")
        return False

def test_gui_import():
    """Teste l'import de l'interface graphique"""
    print("\nüñ•Ô∏è  Test de l'interface graphique...")
    
    try:
        # Test d'import des modules principaux
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        # Test backend_interface
        from backend_interface import backend_interface
        print("‚úÖ backend_interface import√©")
        
        # Test config
        from config import config
        print("‚úÖ config import√©")
        
        # Test app_gui (sans lancer l'interface)
        import app_gui
        print("‚úÖ app_gui import√©")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_backend():
    """Teste le backend"""
    print("\n‚öôÔ∏è  Test du backend...")
    
    try:
        sys.path.append('backend')
        
        # Test des modules backend essentiels
        import main
        print("‚úÖ backend/main.py import√©")
        
        import matelas_utils
        print("‚úÖ matelas_utils import√©")
        
        import client_utils
        print("‚úÖ client_utils import√©")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import backend: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur backend: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß™ Test d'installation de l'application Matelas")
    print("=" * 50)
    
    tests = [
        ("Version Python", test_python_version),
        ("D√©pendances", test_dependencies),
        ("Fichiers essentiels", test_files),
        ("R√©pertoires essentiels", test_directories),
        ("Interface graphique", test_gui_import),
        ("Backend", test_backend),
        ("Ex√©cutable", test_executable),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! L'installation est correcte.")
        return True
    elif passed >= total - 1:  # Permet 1 √©chec (ex√©cutable non encore cr√©√©)
        print("‚úÖ Installation presque compl√®te. Lancez setup_windows.py pour cr√©er l'ex√©cutable.")
        return True
    else:
        print("‚ùå Plusieurs tests ont √©chou√©. V√©rifiez l'installation.")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå Test interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1) 