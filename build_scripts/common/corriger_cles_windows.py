#!/usr/bin/env python3
"""
Script de correction sp√©cifique pour Windows - Probl√®me cl√© API OpenRouter
"""

import os
import json
import sys
from pathlib import Path

def corriger_cles_windows():
    """Corrige le probl√®me de cl√©s API sous Windows"""
    
    print("üîß CORRECTION CL√âS API WINDOWS")
    print("=" * 50)
    
    # 1. V√©rifier et corriger le fichier de configuration
    home_dir = Path.home()
    config_file = home_dir / ".matelas_config.json"
    
    print(f"üìÅ Fichier de configuration: {config_file}")
    
    # Cr√©er ou mettre √† jour le fichier de configuration
    config_data = {}
    
    if config_file.exists():
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            print("‚úÖ Fichier de configuration existant charg√©")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lecture fichier existant: {e}")
            print("üìù Cr√©ation d'un nouveau fichier de configuration")
    
    # Demander la cl√© API OpenRouter
    print("\nüîë CONFIGURATION DE LA CL√â API OPENROUTER")
    print("-" * 40)
    
    current_key = config_data.get('openrouter_api_key', '')
    if current_key:
        print(f"Cl√© actuelle: {current_key[:10]}...")
        response = input("Voulez-vous modifier la cl√© API ? (o/n): ").lower().strip()
        if response != 'o':
            print("‚úÖ Cl√© API conserv√©e")
            return
    else:
        print("Aucune cl√© API configur√©e")
    
    # Demander la nouvelle cl√©
    new_key = input("Entrez votre cl√© API OpenRouter (sk-or-v1-...): ").strip()
    
    if not new_key:
        print("‚ùå Aucune cl√© fournie")
        return
    
    if not new_key.startswith('sk-or-v1-'):
        print("‚ö†Ô∏è  Attention: La cl√© ne semble pas √™tre au bon format OpenRouter")
        response = input("Continuer quand m√™me ? (o/n): ").lower().strip()
        if response != 'o':
            return
    
    # Mettre √† jour la configuration
    config_data['openrouter_api_key'] = new_key
    config_data['provider'] = 'openrouter'  # S'assurer que le provider est d√©fini
    
    # Sauvegarder le fichier
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, indent=2, ensure_ascii=False)
        print("‚úÖ Fichier de configuration mis √† jour")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")
        return
    
    # 2. Cr√©er un script batch pour d√©finir la variable d'environnement
    print(f"\nüåç CR√âATION DU SCRIPT BATCH WINDOWS")
    print("-" * 40)
    
    batch_content = f"""@echo off
REM Script pour d√©finir la variable d'environnement OpenRouter
REM Ex√©cutez ce script en tant qu'administrateur pour une d√©finition permanente

echo Configuration de la variable d'environnement OPENROUTER_API_KEY...

REM D√©finir la variable pour la session actuelle
set OPENROUTER_API_KEY={new_key}

REM D√©finir la variable de mani√®re permanente (n√©cessite les droits admin)
setx OPENROUTER_API_KEY "{new_key}"

echo.
echo Variable d'environnement configur√©e !
echo Red√©marrez l'application pour que les changements prennent effet.
echo.
pause
"""
    
    batch_file = Path("configurer_openrouter_windows.bat")
    try:
        with open(batch_file, 'w', encoding='utf-8') as f:
            f.write(batch_content)
        print(f"‚úÖ Script batch cr√©√©: {batch_file}")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation script batch: {e}")
    
    # 3. Cr√©er un script PowerShell alternatif
    print(f"\nüíª CR√âATION DU SCRIPT POWERSHELL")
    print("-" * 40)
    
    ps_content = f"""# Script PowerShell pour configurer OpenRouter
# Ex√©cutez ce script en tant qu'administrateur

Write-Host "Configuration de la variable d'environnement OPENROUTER_API_KEY..." -ForegroundColor Green

# D√©finir la variable pour la session actuelle
$env:OPENROUTER_API_KEY = "{new_key}"

# D√©finir la variable de mani√®re permanente
[Environment]::SetEnvironmentVariable("OPENROUTER_API_KEY", "{new_key}", "User")

Write-Host "Variable d'environnement configur√©e !" -ForegroundColor Green
Write-Host "Red√©marrez l'application pour que les changements prennent effet." -ForegroundColor Yellow
Read-Host "Appuyez sur Entr√©e pour continuer"
"""
    
    ps_file = Path("configurer_openrouter_windows.ps1")
    try:
        with open(ps_file, 'w', encoding='utf-8') as f:
            f.write(ps_content)
        print(f"‚úÖ Script PowerShell cr√©√©: {ps_file}")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation script PowerShell: {e}")
    
    # 4. Tester la configuration
    print(f"\nüß™ TEST DE LA CONFIGURATION")
    print("-" * 40)
    
    try:
        import config
        api_key = config.get_openrouter_api_key()
        if api_key:
            print(f"‚úÖ Test r√©ussi: Cl√© API r√©cup√©r√©e ({api_key[:10]}...)")
        else:
            print("‚ùå Test √©chou√©: Aucune cl√© API r√©cup√©r√©e")
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
    
    # 5. Instructions finales
    print(f"\nüìã INSTRUCTIONS FINALES")
    print("-" * 40)
    print("1. ‚úÖ Cl√© API configur√©e dans ~/.matelas_config.json")
    print("2. üìù Scripts de configuration cr√©√©s:")
    print(f"   - {batch_file} (Batch)")
    print(f"   - {ps_file} (PowerShell)")
    print("3. üîÑ Red√©marrez l'application")
    print("4. üß™ Testez avec un fichier PDF")
    print("\nüí° Si le probl√®me persiste:")
    print("   - Ex√©cutez le script batch en tant qu'administrateur")
    print("   - Ou d√©finissez manuellement la variable d'environnement")
    print("   - V√©rifiez que la cl√© API est valide sur OpenRouter")

if __name__ == "__main__":
    corriger_cles_windows() 