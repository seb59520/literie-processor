#!/usr/bin/env python3
"""
Script de diagnostic sp√©cifique pour Windows - Probl√®me cl√© API OpenRouter
"""

import os
import json
import sys
from pathlib import Path

def diagnostiquer_cles_windows():
    """Diagnostique le probl√®me de cl√©s API sous Windows"""
    
    print("üîç DIAGNOSTIC CL√âS API WINDOWS")
    print("=" * 50)
    
    # V√©rifier le syst√®me d'exploitation
    print(f"üñ•Ô∏è  Syst√®me: {sys.platform}")
    print(f"üêç Python: {sys.version}")
    
    # 1. V√©rifier le fichier de configuration classique
    home_dir = Path.home()
    config_file = home_dir / ".matelas_config.json"
    
    print(f"\nüìÅ Fichier de configuration: {config_file}")
    
    if config_file.exists():
        print("‚úÖ Fichier de configuration trouv√©")
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            print(f"üìÑ Contenu du fichier:")
            for key, value in config.items():
                if 'api_key' in key.lower() or 'openrouter' in key.lower():
                    masked_value = value[:10] + "..." if value else "VIDE"
                    print(f"   {key}: {masked_value}")
                else:
                    print(f"   {key}: {value}")
                    
            # V√©rifier sp√©cifiquement OpenRouter
            openrouter_key = config.get('openrouter_api_key') or config.get('OPENROUTER_API_KEY')
            if openrouter_key:
                print(f"‚úÖ Cl√© OpenRouter trouv√©e: {openrouter_key[:10]}...")
            else:
                print("‚ùå Cl√© OpenRouter non trouv√©e dans le fichier")
                
        except Exception as e:
            print(f"‚ùå Erreur lecture fichier: {e}")
    else:
        print("‚ùå Fichier de configuration non trouv√©")
    
    # 2. V√©rifier les variables d'environnement
    print(f"\nüåç Variables d'environnement:")
    env_vars = [
        'OPENROUTER_API_KEY',
        'MATELAS_OPENROUTER_API_KEY',
        'MATELAS_MASTER_PASSWORD'
    ]
    
    for var in env_vars:
        value = os.environ.get(var)
        if value:
            masked_value = value[:10] + "..." if len(value) > 10 else value
            print(f"   {var}: {masked_value}")
        else:
            print(f"   {var}: Non d√©finie")
    
    # 3. V√©rifier le stockage s√©curis√©
    print(f"\nüîê Stockage s√©curis√©:")
    secure_keys_file = Path("config/secure_keys.dat")
    salt_file = Path("config/salt.dat")
    
    if secure_keys_file.exists():
        print(f"‚úÖ Fichier cl√©s s√©curis√©es: {secure_keys_file}")
        print(f"   Taille: {secure_keys_file.stat().st_size} octets")
    else:
        print(f"‚ùå Fichier cl√©s s√©curis√©es non trouv√©")
    
    if salt_file.exists():
        print(f"‚úÖ Fichier salt: {salt_file}")
        print(f"   Taille: {salt_file.stat().st_size} octets")
    else:
        print(f"‚ùå Fichier salt non trouv√©")
    
    # 4. Tester l'import du module de configuration
    print(f"\nüîß Test du module de configuration:")
    try:
        import config
        print("‚úÖ Module config import√© avec succ√®s")
        
        # Tester la fonction get_openrouter_api_key
        try:
            api_key = config.get_openrouter_api_key()
            if api_key:
                print(f"‚úÖ Cl√© API r√©cup√©r√©e: {api_key[:10]}...")
            else:
                print("‚ùå Aucune cl√© API r√©cup√©r√©e")
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration cl√©: {e}")
            
    except Exception as e:
        print(f"‚ùå Erreur import module config: {e}")
    
    # 5. V√©rifier les permissions de fichiers
    print(f"\nüîí Permissions de fichiers:")
    files_to_check = [
        config_file,
        secure_keys_file,
        salt_file,
        Path("config.py")
    ]
    
    for file_path in files_to_check:
        if file_path.exists():
            try:
                # Tester la lecture
                with open(file_path, 'r', encoding='utf-8') as f:
                    f.read(1)
                print(f"‚úÖ Lecture OK: {file_path.name}")
            except Exception as e:
                print(f"‚ùå Erreur lecture {file_path.name}: {e}")
        else:
            print(f"‚ö†Ô∏è  Fichier non trouv√©: {file_path.name}")
    
    # 6. Recommandations
    print(f"\nüí° RECOMMANDATIONS:")
    print("1. V√©rifiez que le fichier ~/.matelas_config.json contient 'openrouter_api_key'")
    print("2. Assurez-vous que la cl√© API est valide et active")
    print("3. V√©rifiez les permissions de lecture du fichier")
    print("4. Si probl√®me persiste, utilisez la variable d'environnement OPENROUTER_API_KEY")
    print("5. Red√©marrez l'application apr√®s modification")

if __name__ == "__main__":
    diagnostiquer_cles_windows() 