#!/usr/bin/env python3
"""
Test de correction des liens hypertextes pour Windows et chemins r√©seau
"""

import sys
import os
import platform
import urllib.parse
from pathlib import Path

def test_chemin_windows():
    """Test de gestion des chemins Windows"""
    print("üß™ TEST DE CORRECTION DES LIENS WINDOWS")
    print("=" * 60)
    
    # Simuler diff√©rents types de chemins
    chemins_test = [
        # Chemin local Windows
        "C:\\Users\\Client\\Documents\\Matelas_S29_2025_1.xlsx",
        # Chemin r√©seau Windows
        "\\\\serveur\\partage\\Matelas_S29_2025_1.xlsx",
        # Chemin avec espaces
        "C:\\Users\\Client\\Mes Documents\\Matelas_S29_2025_1.xlsx",
        # Chemin avec caract√®res sp√©ciaux
        "C:\\Users\\Client\\Documents\\Matelas_S29_2025_1.xlsx",
        # Chemin relatif
        "output\\Matelas_S29_2025_1.xlsx"
    ]
    
    print(f"üñ•Ô∏è  Syst√®me d'exploitation: {platform.system()}")
    print(f"üìÅ R√©pertoire courant: {os.getcwd()}")
    print()
    
    for i, chemin in enumerate(chemins_test, 1):
        print(f"Test {i}: {chemin}")
        
        # Simuler le traitement du chemin comme dans open_excel_file
        chemin_traite = traiter_chemin_windows(chemin)
        print(f"   ‚Üí Trait√©: {chemin_traite}")
        
        # V√©rifier si le fichier existe (simulation)
        existe = os.path.exists(chemin_traite) if os.path.isabs(chemin_traite) else False
        print(f"   ‚Üí Existe: {'‚úÖ' if existe else '‚ùå'}")
        print()

def traiter_chemin_windows(file_path):
    """Simule le traitement des chemins comme dans open_excel_file"""
    
    # Gestion des diff√©rents formats d'URL
    if file_path.startswith('file://'):
        # Enlever le pr√©fixe 'file://' et g√©rer les caract√®res sp√©ciaux
        file_path = file_path[7:]
        # D√©coder les caract√®res sp√©ciaux
        file_path = urllib.parse.unquote(file_path)
    elif file_path.startswith('file:///'):
        # Format Windows avec 3 slashes
        file_path = file_path[8:]
        file_path = urllib.parse.unquote(file_path)
    
    # Normaliser le chemin pour Windows
    if platform.system() == "Windows":
        # Convertir les slashes forward en backslashes si n√©cessaire
        file_path = file_path.replace('/', '\\')
        # G√©rer les chemins r√©seau Windows (\\serveur\partage)
        if file_path.startswith('\\\\'):
            # C'est un chemin r√©seau Windows, le laisser tel quel
            pass
        elif file_path.startswith('\\'):
            # Chemin relatif avec backslash, le convertir en absolu
            file_path = os.path.abspath(file_path)
    
    return file_path

def test_generation_liens():
    """Test de g√©n√©ration des liens HTML"""
    print("üîó TEST DE G√âN√âRATION DES LIENS HTML")
    print("=" * 60)
    
    # Simuler des fichiers Excel
    fichiers_excel = [
        "output/Matelas_S29_2025_1.xlsx",
        "C:/Users/Client/Documents/Matelas_S29_2025_1.xlsx",
        "\\\\serveur\\partage\\Matelas_S29_2025_1.xlsx"
    ]
    
    for fichier in fichiers_excel:
        # Simuler la g√©n√©ration de lien comme dans update_display
        file_path = os.path.abspath(fichier)
        if os.path.exists(file_path) or fichier.startswith('\\\\'):  # Simuler l'existence
            # Utiliser le chemin direct sans pr√©fixe file://
            if platform.system() == "Windows":
                # Sur Windows, utiliser le chemin direct avec des backslashes
                link_path = file_path.replace('/', '\\')
            else:
                # Sur macOS/Linux, utiliser le chemin direct
                link_path = file_path
            
            lien_html = f"<p>üîó <a href='{link_path}'>{os.path.basename(fichier)}</a></p>"
            print(f"Fichier: {fichier}")
            print(f"Lien g√©n√©r√©: {lien_html}")
            print()

def test_ouverture_fichier():
    """Test de simulation d'ouverture de fichier"""
    print("üìÇ TEST DE SIMULATION D'OUVERTURE")
    print("=" * 60)
    
    # Cr√©er un fichier de test temporaire
    fichier_test = "test_excel_temporaire.xlsx"
    try:
        with open(fichier_test, 'w') as f:
            f.write("Test")
        
        print(f"Fichier de test cr√©√©: {fichier_test}")
        
        # Simuler l'ouverture selon le syst√®me
        system = platform.system()
        if system == "Darwin":  # macOS
            print("Commande d'ouverture: open")
        elif system == "Windows":
            print("Commande d'ouverture: os.startfile ou start")
        else:  # Linux
            print("Commande d'ouverture: xdg-open")
        
        print("‚úÖ Simulation d'ouverture r√©ussie")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la simulation: {e}")
    finally:
        # Nettoyer le fichier de test
        if os.path.exists(fichier_test):
            os.remove(fichier_test)

def main():
    """Fonction principale de test"""
    print("üîß CORRECTION DES LIENS HYPERTEXTES POUR WINDOWS")
    print("=" * 80)
    print()
    
    test_chemin_windows()
    test_generation_liens()
    test_ouverture_fichier()
    
    print("‚úÖ Tests termin√©s")
    print()
    print("üìã R√âSUM√â DES AM√âLIORATIONS:")
    print("‚Ä¢ Gestion des chemins r√©seau Windows (\\\\serveur\\partage)")
    print("‚Ä¢ D√©codage des caract√®res sp√©ciaux dans les URLs")
    print("‚Ä¢ Normalisation des chemins avec backslashes sur Windows")
    print("‚Ä¢ Fallback multiple pour l'ouverture de fichiers")
    print("‚Ä¢ Messages d'erreur d√©taill√©s pour le d√©bogage")
    print("‚Ä¢ Suppression du pr√©fixe file:// pour une meilleure compatibilit√©")

if __name__ == "__main__":
    main() 