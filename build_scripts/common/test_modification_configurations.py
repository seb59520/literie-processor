#!/usr/bin/env python3

import sys
sys.path.append('backend')
import json

# Simuler les donn√©es d'entr√©e (comme dans le cas r√©el)
noyaux_matelas = [
    {
        "index": 1,
        "noyau": "LATEX NATUREL"
    }
]

matelas_articles = [
    {
        "description": "MATELAS JUMEAUX - LATEX 100% NATUREL PERFOR√â 7 ZONES DIFF√âRENCI√âES FERME - HOUSSE MATELASS√âE TENCEL LUXE 3D LAVABLE A 40¬∞ 89/ 198/ 22",
        "quantite": 2,  # Le LLM a fusionn√© 2 articles en 1 avec quantit√©=2
        "dimensions": "89/ 198/ 22"
    }
]

def test_logique_modifiee():
    """Test de la logique modifi√©e"""
    print("üîß TEST DE LA LOGIQUE MODIFI√âE")
    print("=" * 60)
    
    configurations = []
    config_index = 1  # Index pour les configurations
    
    for i, noyau_info in enumerate(noyaux_matelas):
        if noyau_info['noyau'] != 'INCONNU':
            # Trouver l'article correspondant
            quantite = 1
            description = ""
            if noyau_info['index'] <= len(matelas_articles):
                article_matelas = matelas_articles[noyau_info['index'] - 1]
                quantite = article_matelas.get('quantite', 1)
                description = article_matelas.get('description', '')
            
            print(f"üìã Article trouv√©:")
            print(f"  Description: {description[:60]}...")
            print(f"  Quantit√©: {quantite}")
            
            # D√âTECTION DE FUSION LLM : Si quantit√© > 1, cr√©er 2 configurations
            nb_configurations = 2 if quantite > 1 else 1
            print(f"  Nombre de configurations √† cr√©er: {nb_configurations}")
            
            for j in range(nb_configurations):
                # Cr√©ation de la configuration
                config = {
                    "matelas_index": config_index,  # Index unique pour chaque configuration
                    "noyau": noyau_info['noyau'],
                    "quantite": quantite,  # Garder la quantit√© originale
                    "description": description,
                    "dimensions": {"largeur": 89, "longueur": 198, "hauteur": 22}
                }
                
                configurations.append(config)
                print(f"  Configuration {config_index}: {quantite}x matelas (unit√© {j+1}/{nb_configurations})")
                config_index += 1
    
    print(f"\n‚úÖ R√âSULTAT:")
    print(f"  ‚Ä¢ Configurations cr√©√©es: {len(configurations)}")
    print(f"  ‚Ä¢ Quantit√©s: {[c['quantite'] for c in configurations]}")
    print(f"  ‚Ä¢ Index: {[c['matelas_index'] for c in configurations]}")
    
    # V√©rification
    if len(configurations) == 2 and all(c['quantite'] == 2 for c in configurations):
        print(f"\nüéâ SUCC√àS: La modification fonctionne correctement!")
        print(f"  ‚Ä¢ 2 configurations cr√©√©es au lieu d'1")
        print(f"  ‚Ä¢ Chaque configuration garde sa quantit√© originale (2)")
        print(f"  ‚Ä¢ Cela donnera 2 lignes Excel avec quantit√©=2")
    else:
        print(f"\n‚ùå √âCHEC: La modification ne fonctionne pas comme attendu")
    
    return configurations

def test_cas_normal():
    """Test avec quantit√©=1 (cas normal)"""
    print("\nüîç TEST CAS NORMAL (quantit√©=1)")
    print("=" * 60)
    
    matelas_articles_normal = [
        {
            "description": "MATELAS SIMPLE - LATEX NATUREL",
            "quantite": 1,  # Cas normal
            "dimensions": "140/ 190/ 20"
        }
    ]
    
    configurations = []
    config_index = 1
    
    for i, noyau_info in enumerate(noyaux_matelas):
        if noyau_info['noyau'] != 'INCONNU':
            quantite = 1
            description = ""
            if noyau_info['index'] <= len(matelas_articles_normal):
                article_matelas = matelas_articles_normal[noyau_info['index'] - 1]
                quantite = article_matelas.get('quantite', 1)
                description = article_matelas.get('description', '')
            
            print(f"üìã Article trouv√©:")
            print(f"  Description: {description}")
            print(f"  Quantit√©: {quantite}")
            
            # D√âTECTION DE FUSION LLM : Si quantit√© > 1, cr√©er 2 configurations
            nb_configurations = 2 if quantite > 1 else 1
            print(f"  Nombre de configurations √† cr√©er: {nb_configurations}")
            
            for j in range(nb_configurations):
                config = {
                    "matelas_index": config_index,
                    "noyau": noyau_info['noyau'],
                    "quantite": quantite,
                    "description": description,
                    "dimensions": {"largeur": 140, "longueur": 190, "hauteur": 20}
                }
                
                configurations.append(config)
                print(f"  Configuration {config_index}: {quantite}x matelas (unit√© {j+1}/{nb_configurations})")
                config_index += 1
    
    print(f"\n‚úÖ R√âSULTAT CAS NORMAL:")
    print(f"  ‚Ä¢ Configurations cr√©√©es: {len(configurations)}")
    print(f"  ‚Ä¢ Quantit√©s: {[c['quantite'] for c in configurations]}")
    
    # V√©rification
    if len(configurations) == 1 and configurations[0]['quantite'] == 1:
        print(f"\nüéâ SUCC√àS: Le cas normal fonctionne correctement!")
        print(f"  ‚Ä¢ 1 configuration cr√©√©e (comme attendu)")
        print(f"  ‚Ä¢ Quantit√© = 1 (comme attendu)")
    else:
        print(f"\n‚ùå √âCHEC: Le cas normal ne fonctionne pas comme attendu")
    
    return configurations

if __name__ == "__main__":
    print("üß™ TESTS DE LA MODIFICATION DES CONFIGURATIONS")
    print("=" * 80)
    
    # Test cas fusion LLM
    configs_fusion = test_logique_modifiee()
    
    # Test cas normal
    configs_normal = test_cas_normal()
    
    print(f"\nüìä R√âSUM√â FINAL:")
    print(f"  ‚Ä¢ Cas fusion LLM (quantit√©=2): {len(configs_fusion)} configurations")
    print(f"  ‚Ä¢ Cas normal (quantit√©=1): {len(configs_normal)} configurations")
    
    if len(configs_fusion) == 2 and len(configs_normal) == 1:
        print(f"\nüéâ TOUS LES TESTS R√âUSSIS!")
        print(f"  La modification fonctionne parfaitement pour les deux cas.")
    else:
        print(f"\n‚ùå CERTAINS TESTS ONT √âCHOU√â!")
        print(f"  Il faut v√©rifier la logique de modification.") 