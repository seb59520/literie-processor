#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'int√©gration du panneau d'alertes dans la fen√™tre principale
"""

import sys
import os
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QPushButton, QLabel, QWidget
from PyQt6.QtCore import QTimer

# Import de l'application principale
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_panneau_alertes_integre():
    """Test de l'int√©gration du panneau d'alertes"""
    print("üß™ Test de l'int√©gration du panneau d'alertes")
    
    app = QApplication(sys.argv)
    
    try:
        # Importer et cr√©er l'application principale
        from app_gui import MatelasApp
        
        # Cr√©er l'application
        main_app = MatelasApp()
        main_app.show()
        
        print("‚úÖ Application cr√©√©e avec succ√®s")
        
        # V√©rifier que le panneau d'alertes est int√©gr√©
        if hasattr(main_app, 'alert_panel'):
            print("‚úÖ Panneau d'alertes trouv√© dans l'application")
            
            # V√©rifier la position du panneau
            alert_panel = main_app.alert_panel
            print(f"   - Position: {alert_panel.geometry()}")
            print(f"   - Visible: {alert_panel.isVisible()}")
            print(f"   - Hauteur max: {alert_panel.maximumHeight()}")
            print(f"   - Hauteur min: {alert_panel.minimumHeight()}")
            
            # V√©rifier que le panneau est dans le bon conteneur
            parent = alert_panel.parent()
            if parent:
                print(f"   - Parent: {parent.__class__.__name__}")
            else:
                print("   - ‚ö†Ô∏è Pas de parent trouv√©")
                
        else:
            print("‚ùå Panneau d'alertes non trouv√© dans l'application")
        
        # V√©rifier le syst√®me d'alertes
        if hasattr(main_app, 'alert_system'):
            print("‚úÖ Syst√®me d'alertes trouv√©")
            
            # Ajouter quelques alertes de test
            def ajouter_alertes_test():
                print("üì¢ Ajout d'alertes de test...")
                
                # Alerte de test
                main_app.add_system_alert(
                    "Test d'int√©gration",
                    "Le panneau d'alertes est maintenant int√©gr√© dans la fen√™tre principale",
                    main_app.alert_system.AlertType.SUCCESS
                )
                
                # Alerte d'avertissement
                main_app.add_processing_alert(
                    "Traitement en cours",
                    "Test du panneau d'alertes int√©gr√©",
                    main_app.alert_system.AlertType.INFO,
                    "Test"
                )
                
                print("‚úÖ Alertes de test ajout√©es")
            
            # Ajouter les alertes apr√®s un d√©lai
            QTimer.singleShot(2000, ajouter_alertes_test)
            
        else:
            print("‚ùå Syst√®me d'alertes non trouv√©")
        
        # Afficher les informations de l'interface
        print("\nüìä Informations de l'interface:")
        print(f"   - Fen√™tre principale: {main_app.geometry()}")
        print(f"   - Titre: {main_app.windowTitle()}")
        
        # V√©rifier les onglets
        if hasattr(main_app, 'tabs'):
            print(f"   - Nombre d'onglets: {main_app.tabs.count()}")
            for i in range(main_app.tabs.count()):
                tab_text = main_app.tabs.tabText(i)
                print(f"     Onglet {i}: {tab_text}")
        
        print("\nüéâ Test d'int√©gration termin√©!")
        print("Le panneau d'alertes devrait maintenant √™tre visible sous l'espace de visualisation")
        
        # Fermer l'application apr√®s 10 secondes
        QTimer.singleShot(10000, app.quit)
        
        return app.exec()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return 1

if __name__ == "__main__":
    test_panneau_alertes_integre() 