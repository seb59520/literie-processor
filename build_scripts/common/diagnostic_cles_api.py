#!/usr/bin/env python3
"""
Script de diagnostic pour les cl√©s API LLM
Teste la validit√© des cl√©s API configur√©es et propose des solutions
"""

import sys
import os
import json
from datetime import datetime

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config import config
    from backend.llm_provider import llm_manager
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("Assurez-vous d'ex√©cuter ce script depuis le r√©pertoire racine du projet")
    sys.exit(1)

def test_api_key(provider, api_key):
    """Teste une cl√© API sp√©cifique"""
    print(f"\nüîç Test de la cl√© API {provider.upper()}")
    print("=" * 50)
    
    if not api_key:
        print("‚ùå Aucune cl√© API fournie")
        return False
    
    # V√©rifier le format
    print(f"üìù Format de la cl√©: {api_key[:10]}...")
    
    format_valid = True
    if provider == "openai":
        if not api_key.startswith("sk-"):
            print("‚ùå Format invalide: doit commencer par 'sk-'")
            format_valid = False
        elif len(api_key) < 20:
            print("‚ùå Cl√© trop courte")
            format_valid = False
        else:
            print("‚úÖ Format valide")
            
    elif provider == "anthropic":
        if not api_key.startswith("sk-ant-"):
            print("‚ùå Format invalide: doit commencer par 'sk-ant-'")
            format_valid = False
        else:
            print("‚úÖ Format valide")
            
    elif provider == "gemini":
        if not api_key.startswith("AIza"):
            print("‚ùå Format invalide: doit commencer par 'AIza'")
            format_valid = False
        else:
            print("‚úÖ Format valide")
            
    elif provider == "mistral":
        if not api_key.startswith("mist-"):
            print("‚ùå Format invalide: doit commencer par 'mist-'")
            format_valid = False
        else:
            print("‚úÖ Format valide")
            
    elif provider == "openrouter":
        if not api_key.startswith("sk-or-"):
            print("‚ùå Format invalide: doit commencer par 'sk-or-'")
            format_valid = False
        else:
            print("‚úÖ Format valide")
    
    if not format_valid:
        return False
    
    # Tester la connexion
    print("üåê Test de connexion...")
    try:
        llm_manager.set_provider(provider, api_key)
        if llm_manager.test_connection():
            print("‚úÖ Connexion r√©ussie")
            return True
        else:
            print("‚ùå Connexion √©chou√©e")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def show_help(provider):
    """Affiche l'aide pour obtenir une cl√© API"""
    help_links = {
        "openai": "https://platform.openai.com/api-keys",
        "anthropic": "https://console.anthropic.com/",
        "gemini": "https://makersuite.google.com/app/apikey",
        "mistral": "https://console.mistral.ai/api-keys/",
        "openrouter": "https://openrouter.ai/keys"
    }
    
    print(f"\nüí° Pour obtenir une cl√© API {provider.upper()}:")
    print(f"   Visitez: {help_links.get(provider, 'Documentation officielle')}")

def main():
    """Fonction principale de diagnostic"""
    print("üîß DIAGNOSTIC DES CL√âS API LLM")
    print("=" * 60)
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # R√©cup√©rer le provider actuel
    current_provider = config.get_current_llm_provider()
    print(f"Provider actuel: {current_provider}")
    
    # Tester la cl√© du provider actuel
    if current_provider in ["openai", "anthropic", "gemini", "mistral", "openrouter"]:
        api_key = config.get_llm_api_key(current_provider)
        success = test_api_key(current_provider, api_key)
        
        if not success:
            show_help(current_provider)
    elif current_provider == "ollama":
        print("\nüîç Test d'Ollama (local)")
        print("=" * 30)
        try:
            llm_manager.set_provider("ollama")
            if llm_manager.test_connection():
                print("‚úÖ Ollama connect√© et fonctionnel")
            else:
                print("‚ùå Ollama non accessible")
                print("üí° Assurez-vous qu'Ollama est install√© et en cours d'ex√©cution")
        except Exception as e:
            print(f"‚ùå Erreur Ollama: {e}")
    else:
        print(f"‚ùå Provider inconnu: {current_provider}")
    
    # Lister toutes les cl√©s configur√©es
    print(f"\nüìã CL√âS API CONFIGUR√âES")
    print("=" * 40)
    
    providers = ["openai", "anthropic", "gemini", "mistral", "openrouter"]
    for provider in providers:
        api_key = config.get_llm_api_key(provider)
        if api_key:
            status = "‚úÖ" if test_api_key(provider, api_key) else "‚ùå"
            print(f"{status} {provider.upper()}: {api_key[:10]}...")
        else:
            print(f"‚ö†Ô∏è  {provider.upper()}: Non configur√©")
    
    print(f"\nüéØ RECOMMANDATIONS")
    print("=" * 30)
    
    if current_provider == "ollama":
        print("‚úÖ Ollama est configur√© - Aucune cl√© API requise")
    elif current_provider in providers:
        api_key = config.get_llm_api_key(current_provider)
        if not api_key:
            print(f"‚ùå Aucune cl√© API configur√©e pour {current_provider}")
            show_help(current_provider)
        else:
            success = test_api_key(current_provider, api_key)
            if not success:
                print(f"‚ùå Cl√© API {current_provider} invalide")
                show_help(current_provider)
            else:
                print(f"‚úÖ Cl√© API {current_provider} valide")
    else:
        print(f"‚ùå Provider {current_provider} non support√©")
    
    print(f"\n‚ú® Diagnostic termin√©")

if __name__ == "__main__":
    main() 