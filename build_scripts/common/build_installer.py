#!/usr/bin/env python3
"""
Script pour cr√©er un ex√©cutable installable de l'application Matelas
"""

import os
import sys
import subprocess
import shutil

def build_executable():
    """Construit un ex√©cutable avec PyInstaller"""
    
    print("=== Construction de l'ex√©cutable Matelas ===")
    
    # V√©rifier si PyInstaller est install√©
    try:
        import PyInstaller
        print("‚úÖ PyInstaller est install√©")
    except ImportError:
        print("‚ùå PyInstaller n'est pas install√©")
        print("Installation de PyInstaller...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"])
    
    # Cr√©er le fichier spec pour PyInstaller
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['run_gui.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('template', 'template'),
        ('backend', 'backend'),
        ('config.py', '.'),
    ],
    hiddenimports=[
        'openpyxl',
        'fitz',
        'httpx',
        'tkinter',
        'tkinter.ttk',
        'tkinter.filedialog',
        'tkinter.messagebox',
        'json',
        'logging',
        'os',
        'sys',
        'tempfile',
        'shutil',
        'pathlib',
        'typing',
        'asyncio',
        'threading',
        'queue',
        'datetime',
        'unicodedata',
        'math',
        're',
        'csv',
        'openpyxl.utils',
        'openpyxl.workbook',
        'openpyxl.worksheet',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='Matelas_Processor',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='icon.ico' if os.path.exists('icon.ico') else None,
)
'''
    
    # √âcrire le fichier spec
    with open('matelas.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ Fichier spec cr√©√©")
    
    # Construire l'ex√©cutable
    print("Construction de l'ex√©cutable...")
    result = subprocess.run(['pyinstaller', 'matelas.spec', '--clean'], capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ Ex√©cutable construit avec succ√®s")
        print("üìÅ L'ex√©cutable se trouve dans: dist/Matelas_Processor")
        
        # Cr√©er un dossier d'installation
        install_dir = "Matelas_Processor_Install"
        if os.path.exists(install_dir):
            shutil.rmtree(install_dir)
        
        os.makedirs(install_dir)
        
        # Copier l'ex√©cutable et les fichiers n√©cessaires
        shutil.copytree("dist/Matelas_Processor", f"{install_dir}/Matelas_Processor")
        
        # Cr√©er un fichier README
        readme_content = """# Matelas Processor

## Installation

1. D√©compressez ce dossier o√π vous voulez
2. Double-cliquez sur Matelas_Processor.exe pour lancer l'application

## Utilisation

1. Lancez l'application
2. S√©lectionnez vos fichiers PDF de commandes
3. Configurez les param√®tres (semaine, ann√©e, etc.)
4. Cliquez sur "Traiter les fichiers"
5. Les fichiers Excel seront g√©n√©r√©s dans le dossier output/

## Support

Pour toute question, contactez l'√©quipe de d√©veloppement.
"""
        
        with open(f"{install_dir}/README.txt", 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"‚úÖ Package d'installation cr√©√©: {install_dir}")
        
    else:
        print("‚ùå Erreur lors de la construction:")
        print(result.stderr)

if __name__ == "__main__":
    build_executable() 