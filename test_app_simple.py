#!/usr/bin/env python3
"""Version simplifi√©e de l'app pour isoler le crash"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel
from PyQt6.QtCore import QTimer

class SimpleApp(QMainWindow):
    def __init__(self):
        super().__init__()
        print("üîÑ D√©but init SimpleApp")
        
        # Test des imports backend
        try:
            from backend.advanced_logging import get_advanced_logger
            print("‚úÖ Backend logging import√©")
            self.logger = get_advanced_logger()
            print("‚úÖ Logger cr√©√©")
        except Exception as e:
            print(f"‚ö†Ô∏è Probl√®me logger: {e}")
            self.logger = None
        
        # Interface minimale
        self.setWindowTitle("Test Simple App")
        self.resize(800, 600)
        
        # Widget central basique
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.addWidget(QLabel("Application Simple"))
        
        # Test Timer (probl√®me potentiel identifi√©)
        print("üîÑ Test Timer...")
        try:
            self.test_timer = QTimer()
            self.test_timer.timeout.connect(lambda: print("Timer tick"))
            print("‚úÖ Timer cr√©√©")
            # NE PAS d√©marrer le timer pour l'instant
        except Exception as e:
            print(f"‚ùå Erreur Timer: {e}")
        
        print("‚úÖ Init SimpleApp termin√©")

def main():
    print("üöÄ D√©marrage SimpleApp")
    app = QApplication(sys.argv)
    
    try:
        window = SimpleApp()
        print("‚úÖ SimpleApp cr√©√©e")
        
        window.show()
        print("‚úÖ Fen√™tre affich√©e")
        
        # Test d√©marrage timer apr√®s show
        if hasattr(window, 'test_timer'):
            try:
                window.test_timer.start(2000)  # 2 secondes
                print("‚úÖ Timer d√©marr√©")
            except Exception as e:
                print(f"‚ùå Erreur d√©marrage timer: {e}")
        
        print("üéØ D√©marrage boucle √©v√©nements")
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation app: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()