#!/usr/bin/env python3
"""
Script pour diagnostiquer les probl√®mes de g√©n√©ration Excel
"""

import os
import json
import sys
from pathlib import Path
import tempfile

def check_excel_dependencies():
    """V√©rifier les d√©pendances Excel"""
    print("üîß V√©rification des d√©pendances Excel...")
    
    try:
        import pandas
        print("‚úÖ pandas disponible")
    except ImportError:
        print("‚ùå pandas manquant - pip install pandas")
        return False
    
    try:
        import openpyxl
        print("‚úÖ openpyxl disponible") 
    except ImportError:
        print("‚ùå openpyxl manquant - pip install openpyxl")
        return False
    
    return True

def check_config():
    """V√©rifier la configuration"""
    print("\nüîß V√©rification de la configuration...")
    
    config_file = Path("matelas_config.json")
    if not config_file.exists():
        print("‚ùå matelas_config.json manquant")
        return None
    
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
        print("‚úÖ Configuration charg√©e")
        
        provider = config.get('current_llm_provider', '')
        api_key = config.get(f'llm_api_key_{provider}', '')
        
        if not api_key or api_key == "VOTRE_CLE_API_ICI":
            print(f"‚ö†Ô∏è Cl√© API {provider} non configur√©e")
            return config
        else:
            print(f"‚úÖ Cl√© API {provider} configur√©e")
            return config
            
    except Exception as e:
        print(f"‚ùå Erreur lecture config: {e}")
        return None

def check_output_directories():
    """V√©rifier les dossiers de sortie"""
    print("\nüîß V√©rification des dossiers de sortie...")
    
    # Dossiers standards
    output_dirs = [
        "resultats_excel",
        "exports", 
        "output",
        os.path.expanduser("~/Desktop/resultats_excel"),
        os.path.expanduser("~/Documents/matelas_results")
    ]
    
    existing_dirs = []
    for dir_path in output_dirs:
        if os.path.exists(dir_path):
            try:
                # Tester les permissions d'√©criture
                test_file = os.path.join(dir_path, "test_write.tmp")
                with open(test_file, 'w') as f:
                    f.write("test")
                os.remove(test_file)
                print(f"‚úÖ {dir_path} - accessible en √©criture")
                existing_dirs.append(dir_path)
            except Exception as e:
                print(f"‚ö†Ô∏è {dir_path} - erreur permissions: {e}")
        else:
            print(f"‚ÑπÔ∏è {dir_path} - n'existe pas")
    
    if not existing_dirs:
        print("\nüìÅ Cr√©ation d'un dossier de test...")
        test_dir = "resultats_excel_test"
        try:
            os.makedirs(test_dir, exist_ok=True)
            test_file = os.path.join(test_dir, "test.txt")
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            print(f"‚úÖ Dossier de test cr√©√©: {test_dir}")
            return [test_dir]
        except Exception as e:
            print(f"‚ùå Impossible de cr√©er dossier test: {e}")
            return []
    
    return existing_dirs

def test_excel_creation():
    """Tester la cr√©ation d'un fichier Excel simple"""
    print("\nüîß Test de cr√©ation Excel...")
    
    try:
        import pandas as pd
        from datetime import datetime
        
        # Donn√©es de test
        data = {
            'Client': ['Test Client'],
            'Date': [datetime.now().strftime('%Y-%m-%d')],
            'Produit': ['Matelas Test'],
            'Prix': [1000.00],
            'Status': ['Test']
        }
        
        df = pd.DataFrame(data)
        
        # Tentative de sauvegarde dans diff√©rents endroits
        output_dirs = check_output_directories()
        
        if not output_dirs:
            print("‚ùå Aucun dossier de sortie accessible")
            return False
        
        for output_dir in output_dirs:
            try:
                test_file = os.path.join(output_dir, f"test_excel_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
                df.to_excel(test_file, index=False)
                
                if os.path.exists(test_file):
                    file_size = os.path.getsize(test_file)
                    print(f"‚úÖ Fichier Excel cr√©√©: {test_file} ({file_size} bytes)")
                    
                    # Nettoyer le fichier de test
                    try:
                        os.remove(test_file)
                        print("‚úÖ Fichier de test nettoy√©")
                    except:
                        pass
                    
                    return True
                else:
                    print(f"‚ö†Ô∏è Fichier non cr√©√© dans {output_dir}")
                    
            except Exception as e:
                print(f"‚ùå Erreur cr√©ation dans {output_dir}: {e}")
                continue
        
        print("‚ùå √âchec cr√©ation Excel dans tous les dossiers")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur test Excel: {e}")
        return False

def check_backend_modules():
    """V√©rifier les modules backend n√©cessaires"""
    print("\nüîß V√©rification des modules backend...")
    
    required_modules = [
        'backend_interface',
        'backend.excel_import_utils',
        'backend.pre_import_utils'
    ]
    
    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module} manquant")
            missing_modules.append(module)
    
    return len(missing_modules) == 0

def analyze_workflow():
    """Analyser le workflow de g√©n√©ration Excel"""
    print("\nüîß Analyse du workflow de g√©n√©ration...")
    
    print("üìã Le processus de g√©n√©ration Excel n√©cessite:")
    print("   1. ‚úÖ API fonctionnelle (pour traiter les PDFs)")
    print("   2. ‚úÖ D√©pendances Excel (pandas, openpyxl)")
    print("   3. ‚úÖ Modules backend (processing)")
    print("   4. ‚úÖ Permissions d'√©criture (dossier output)")
    print("   5. ‚ö†Ô∏è  Donn√©es trait√©es (r√©sultats du processing)")
    
    print("\n‚ùì Questions de diagnostic:")
    print("   ‚Ä¢ Avez-vous s√©lectionn√© et trait√© des fichiers PDF?")
    print("   ‚Ä¢ L'API fonctionne-t-elle? (Test_API.bat)")
    print("   ‚Ä¢ Y a-t-il des erreurs dans les logs de l'application?")
    print("   ‚Ä¢ L'onglet 'R√©sum√©' montre-t-il des r√©sultats?")

def main():
    """Fonction principale de diagnostic"""
    print("=" * 60)
    print("DIAGNOSTIC G√âN√âRATION FICHIERS EXCEL")
    print("=" * 60)
    
    # Tests des composants
    deps_ok = check_excel_dependencies()
    config = check_config()  
    modules_ok = check_backend_modules()
    excel_test_ok = test_excel_creation()
    
    # Analyse du workflow
    analyze_workflow()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("R√âSUM√â DU DIAGNOSTIC")
    print("=" * 60)
    
    if deps_ok and config and modules_ok and excel_test_ok:
        print("\n‚úÖ TOUS LES COMPOSANTS EXCEL SONT FONCTIONNELS")
        print("\nüîç Si aucun fichier Excel n'est g√©n√©r√©:")
        print("   1. V√©rifiez que l'API fonctionne (Test_API.bat)")
        print("   2. Assurez-vous d'avoir trait√© des PDFs avec succ√®s")
        print("   3. V√©rifiez l'onglet 'R√©sum√©' pour voir les r√©sultats")
        print("   4. Consultez les logs d'erreur de l'application")
    else:
        print("\n‚ùå PROBL√àMES D√âTECT√âS:")
        if not deps_ok:
            print("   ‚Ä¢ D√©pendances Excel manquantes")
        if not config:
            print("   ‚Ä¢ Configuration invalide")  
        if not modules_ok:
            print("   ‚Ä¢ Modules backend manquants")
        if not excel_test_ok:
            print("   ‚Ä¢ Test de cr√©ation Excel √©chou√©")
    
    print(f"\nüìù SOLUTIONS:")
    print("   1. Test API: Test_API.bat")
    print("   2. R√©installer d√©pendances: pip install pandas openpyxl")
    print("   3. V√©rifier que des PDFs ont √©t√© trait√©s avec succ√®s")
    print("   4. Consulter les logs d√©taill√©s dans l'application")

if __name__ == "__main__":
    main()