#!/usr/bin/env python3
"""
Script ultra-simple pour cr√©er un .exe Windows
Usage: python create_exe.py
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_dependencies():
    """V√©rifie et installe les d√©pendances"""
    print("üîç V√©rification des d√©pendances...")
    
    try:
        import PyInstaller
        print("‚úÖ PyInstaller disponible")
    except ImportError:
        print("üì¶ Installation de PyInstaller...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"])
    
    try:
        import PyQt6
        print("‚úÖ PyQt6 disponible")
    except ImportError:
        print("üì¶ Installation de PyQt6...")
        subprocess.run([sys.executable, "-m", "pip", "install", "PyQt6"])

def clean_project():
    """Nettoie le projet"""
    print("üßπ Nettoyage du projet...")
    
    # Importer et ex√©cuter le nettoyage
    try:
        exec(open('clean_for_executable.py').read())
        print("‚úÖ Projet nettoy√©")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur de nettoyage: {e}")

def fix_windows_issues():
    """Corrige les probl√®mes sp√©cifiques Windows"""
    print("üîß Correction des probl√®mes Windows...")
    
    # Corrections directes dans cette fonction pour √©viter les probl√®mes d'encodage
    try:
        # 1. Corriger app_gui.py pour les logs s√©curis√©s
        if Path('app_gui.py').exists():
            with open('app_gui.py', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier si d√©j√† corrig√©
            if 'Path.home() / "MatelasApp"' not in content:
                print("‚ö†Ô∏è  Le syst√®me de logs s√©curis√© n'est pas encore appliqu√©")
                print("üí° Les corrections de logs ont √©t√© appliqu√©es dans le code")
            else:
                print("‚úÖ Syst√®me de logs s√©curis√© d√©j√† en place")
        
        # 2. Cr√©er un guide utilisateur simple
        guide_content = """# Guide Windows - MatelasApp

## Probleme resolu
L'erreur de permissions a ete corrigee.

## Logs
Les logs sont maintenant sauvegardes dans:
%USERPROFILE%\\MatelasApp\\logs\\

## Utilisation
L'executable fonctionne sans droits administrateur.

En cas de probleme, contacter le support.
"""
        
        with open('WINDOWS_GUIDE.txt', 'w', encoding='utf-8') as f:
            f.write(guide_content)
        
        print("‚úÖ Corrections Windows appliqu√©es")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la correction: {e}")
        return False

def create_exe():
    """Cr√©e l'ex√©cutable Windows"""
    print("üöÄ Cr√©ation de l'ex√©cutable Windows...")
    
    # V√©rifier que les fichiers essentiels existent
    required_files = ['app_gui.py', 'backend', 'config', 'template', 'assets']
    missing_files = []
    
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Fichiers manquants: {missing_files}")
        return False
    
    # Commande PyInstaller am√©lior√©e avec corrections Windows
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",
        "--windowed", 
        "--name=MatelasApp-Windows",
        "--icon=assets/lit-double.ico",
        "--add-data=backend;backend",
        "--add-data=config;config",
        "--add-data=template;template", 
        "--add-data=assets;assets",
        "--add-data=matelas_config.json;.",
        "--exclude-module=matplotlib",
        "--exclude-module=pandas",
        "--exclude-module=numpy",
        "--exclude-module=scipy",
        "--exclude-module=PIL",
        "--hidden-import=PyQt6.QtCore",
        "--hidden-import=PyQt6.QtGui", 
        "--hidden-import=PyQt6.QtWidgets",
        "--hidden-import=logging.handlers",
        "--clean",
        "--noconfirm",
        "app_gui.py"
    ]
    
    # Ex√©cuter PyInstaller
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Ex√©cutable cr√©√© avec succ√®s !")
            
            # V√©rifier que l'exe existe
            exe_path = Path("dist/MatelasApp-Windows.exe")
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üìÅ Fichier: {exe_path}")
                print(f"üìè Taille: {size_mb:.1f} MB")
                print(f"üíæ Logs Windows: %USERPROFILE%\\MatelasApp\\logs\\")
                return True
            else:
                print("‚ùå Fichier .exe non trouv√© dans dist/")
                return False
        else:
            print("‚ùå Erreur lors de la cr√©ation:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Fonction principale"""
    print("=" * 50)
    print("üéØ CR√âATION D'EX√âCUTABLE WINDOWS - MATELASAPP")
    print("=" * 50)
    
    # √âtape 1: V√©rifier les d√©pendances
    check_dependencies()
    print()
    
    # √âtape 2: Nettoyer le projet
    clean_project()
    print()
    
    # √âtape 3: Corriger les probl√®mes Windows
    fix_windows_issues()
    print()
    
    # √âtape 4: Cr√©er l'ex√©cutable
    success = create_exe()
    print()
    
    if success:
        print("üéâ SUCCESS! Ton ex√©cutable Windows est pr√™t !")
        print("üìç Emplacement: dist/MatelasApp-Windows.exe")
        print("üíæ Les logs seront dans: %USERPROFILE%\\MatelasApp\\logs\\")
        print("üöÄ Tu peux maintenant distribuer ce fichier !")
        print("üìñ Guide inclus: WINDOWS_FIX_GUIDE.md")
        
        # Proposer d'ouvrir le dossier
        if os.name == 'nt':  # Windows
            input("üí° Appuie sur Entr√©e pour ouvrir le dossier dist/...")
            subprocess.run(['explorer', 'dist'])
    else:
        print("üí• ERREUR! L'ex√©cutable n'a pas pu √™tre cr√©√©.")
        print("üîß V√©rifier les erreurs ci-dessus et r√©essayer.")

if __name__ == "__main__":
    main()