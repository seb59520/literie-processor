#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de configuration automatique pour l'int√©gration Notion avec Cursor
Guide l'utilisateur √† travers la configuration √©tape par √©tape
"""

import os
import json
import webbrowser
from pathlib import Path
import requests

def print_header():
    """Affiche l'en-t√™te du script"""
    print("=" * 60)
    print("üöÄ Configuration de l'int√©gration Notion avec Cursor")
    print("=" * 60)
    print()

def print_step(step_num, title):
    """Affiche une √©tape de configuration"""
    print(f"üìã √âtape {step_num}: {title}")
    print("-" * 40)

def get_user_input(prompt, default=""):
    """Obtient une entr√©e utilisateur avec une valeur par d√©faut"""
    if default:
        user_input = input(f"{prompt} [{default}]: ").strip()
        return user_input if user_input else default
    else:
        return input(f"{prompt}: ").strip()

def create_notion_integration():
    """Cr√©e une int√©gration Notion"""
    print_step(1, "Cr√©ation d'une int√©gration Notion")
    
    print("Pour commencer, vous devez cr√©er une int√©gration dans Notion:")
    print("1. Allez sur https://www.notion.so/my-integrations")
    print("2. Cliquez sur 'New integration'")
    print("3. Donnez un nom √† votre int√©gration (ex: 'Cursor Integration')")
    print("4. S√©lectionnez votre workspace")
    print("5. Cliquez sur 'Submit'")
    print()
    
    input("Appuyez sur Entr√©e quand vous avez cr√©√© l'int√©gration...")
    
    # Ouvrir la page des int√©grations
    webbrowser.open("https://www.notion.so/my-integrations")
    
    print("\nUne fois l'int√©gration cr√©√©e, copiez la cl√© API (Internal Integration Token)")
    api_key = get_user_input("Entrez votre cl√© API Notion")
    
    return api_key

def get_database_info(api_key):
    """Obtient les informations de la base de donn√©es"""
    print_step(2, "Configuration de la base de donn√©es")
    
    print("Maintenant, vous devez cr√©er une base de donn√©es dans Notion:")
    print("1. Cr√©ez une nouvelle page dans Notion")
    print("2. Tapez '/database' et s√©lectionnez 'Table'")
    print("3. Ajoutez les propri√©t√©s suivantes:")
    print("   - Nom (Title)")
    print("   - Chemin (Text)")
    print("   - Description (Text)")
    print("   - Langage (Select)")
    print("   - Framework (Text)")
    print("   - Derni√®re modification (Date)")
    print("   - Statut Git (Select)")
    print("   - Workspace Cursor (Text)")
    print("   - Statut (Select)")
    print("   - Date de cr√©ation (Date)")
    print()
    
    input("Appuyez sur Entr√©e quand vous avez cr√©√© la base de donn√©es...")
    
    # Obtenir l'ID de la base de donn√©es
    print("\nPour obtenir l'ID de la base de donn√©es:")
    print("1. Ouvrez la base de donn√©es dans Notion")
    print("2. L'URL sera de la forme: https://notion.so/[workspace]/[database-id]?v=...")
    print("3. Copiez la partie [database-id] (32 caract√®res)")
    print()
    
    database_id = get_user_input("Entrez l'ID de la base de donn√©es")
    
    # Obtenir l'ID du workspace
    print("\nPour obtenir l'ID du workspace:")
    print("1. L'URL de votre workspace est de la forme: https://notion.so/[workspace]")
    print("2. Copiez la partie [workspace]")
    print()
    
    workspace_id = get_user_input("Entrez l'ID du workspace")
    
    return database_id, workspace_id

def test_notion_connection(api_key, database_id):
    """Teste la connexion √† Notion"""
    print_step(3, "Test de la connexion")
    
    print("Test de la connexion √† Notion...")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    try:
        # Tenter de r√©cup√©rer la base de donn√©es
        response = requests.get(
            f"https://api.notion.com/v1/databases/{database_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            print("‚úÖ Connexion r√©ussie √† Notion!")
            return True
        else:
            print(f"‚ùå Erreur de connexion: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def create_config_file(api_key, database_id, workspace_id):
    """Cr√©e le fichier de configuration"""
    print_step(4, "Cr√©ation du fichier de configuration")
    
    config = {
        "api_key": api_key,
        "database_id": database_id,
        "workspace_id": workspace_id
    }
    
    config_path = Path("notion_config.json")
    
    try:
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Fichier de configuration cr√©√©: {config_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation fichier: {e}")
        return False

def create_sample_database_structure():
    """Cr√©e un exemple de structure de base de donn√©es"""
    print_step(5, "Structure de base de donn√©es recommand√©e")
    
    print("Voici la structure recommand√©e pour votre base de donn√©es Notion:")
    print()
    
    structure = {
        "Propri√©t√©s": {
            "Nom": "Title (obligatoire)",
            "Chemin": "Text - Chemin du projet sur le disque",
            "Description": "Text - Description du projet",
            "Langage": "Select - Python, JavaScript, Java, C++, Go, Rust, PHP, Autre",
            "Framework": "Text - Framework utilis√© (Django, React, Spring, etc.)",
            "Derni√®re modification": "Date - Date de derni√®re modification",
            "Statut Git": "Select - Git initialis√©, Non versionn√©",
            "Workspace Cursor": "Text - Chemin du workspace Cursor",
            "Statut": "Select - En cours, Termin√©, En pause, Abandonn√©",
            "Date de cr√©ation": "Date - Date de cr√©ation de la page"
        }
    }
    
    for prop, desc in structure["Propri√©t√©s"].items():
        print(f"  ‚Ä¢ {prop}: {desc}")
    
    print()
    print("Vous pouvez ajouter d'autres propri√©t√©s selon vos besoins.")
    print()

def install_dependencies():
    """Installe les d√©pendances n√©cessaires"""
    print_step(6, "Installation des d√©pendances")
    
    print("Installation des packages Python n√©cessaires...")
    
    try:
        import subprocess
        import sys
        
        packages = ["requests"]
        
        for package in packages:
            print(f"Installation de {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            print(f"‚úÖ {package} install√© avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur installation: {e}")
        print("Vous pouvez installer manuellement avec: pip install requests")
        return False

def create_quick_start_guide():
    """Cr√©e un guide de d√©marrage rapide"""
    print_step(7, "Guide de d√©marrage rapide")
    
    guide_content = """# Guide de d√©marrage rapide - Int√©gration Notion avec Cursor

## üöÄ D√©marrage rapide

1. **Lancer l'interface graphique:**
   ```bash
   python notion_manager_gui.py
   ```

2. **Configuration initiale:**
   - Allez dans l'onglet "‚öôÔ∏è Configuration"
   - V√©rifiez que vos cl√©s sont correctes
   - Cliquez sur "Tester la connexion"

3. **Premi√®re synchronisation:**
   - Allez dans l'onglet "üîÑ Synchronisation"
   - S√©lectionnez votre workspace Cursor
   - Cliquez sur "Scanner le workspace"
   - Puis "Synchroniser avec Notion"

## üìÅ Utilisation des onglets

- **‚öôÔ∏è Configuration**: Gestion des cl√©s API Notion
- **üìÅ Projets**: Visualisation et gestion des projets d√©tect√©s
- **üìù Modifications**: Suivi des changements dans vos fichiers
- **üìö Notices d'utilisation**: Cr√©ation de documentation
- **üîó Liens externes**: Gestion des ressources externes
- **üîÑ Synchronisation**: Synchronisation avec Notion

## üîß Commandes utiles

- **Scan manuel**: `python notion_integration.py`
- **Test de connexion**: V√©rifiez la configuration dans l'interface

## üìö Documentation compl√®te

Consultez le fichier `notion_integration.py` pour plus de d√©tails sur l'API.
"""
    
    try:
        with open("GUIDE_DEMARRAGE_NOTION.md", 'w', encoding='utf-8') as f:
            f.write(guide_content)
        
        print("‚úÖ Guide de d√©marrage cr√©√©: GUIDE_DEMARRAGE_NOTION.md")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation guide: {e}")
        return False

def main():
    """Fonction principale"""
    print_header()
    
    print("Ce script vous guide √† travers la configuration de l'int√©gration Notion.")
    print("Assurez-vous d'avoir un compte Notion et d'√™tre connect√©.")
    print()
    
    # V√©rifier si la configuration existe d√©j√†
    config_path = Path("notion_config.json")
    if config_path.exists():
        print("‚ö†Ô∏è  Une configuration existe d√©j√†.")
        overwrite = input("Voulez-vous la remplacer? (o/N): ").strip().lower()
        if overwrite not in ['o', 'oui', 'y', 'yes']:
            print("Configuration annul√©e.")
            return
    
    try:
        # √âtape 1: Cr√©ation de l'int√©gration
        api_key = create_notion_integration()
        if not api_key:
            print("‚ùå Cl√© API manquante. Configuration annul√©e.")
            return
        
        # √âtape 2: Informations de la base de donn√©es
        database_id, workspace_id = get_database_info(api_key)
        if not database_id or not workspace_id:
            print("‚ùå Informations de base de donn√©es manquantes. Configuration annul√©e.")
            return
        
        # √âtape 3: Test de connexion
        if not test_notion_connection(api_key, database_id):
            print("‚ùå √âchec de la connexion. V√©rifiez vos cl√©s.")
            return
        
        # √âtape 4: Cr√©ation du fichier de configuration
        if not create_config_file(api_key, database_id, workspace_id):
            print("‚ùå √âchec de la cr√©ation du fichier de configuration.")
            return
        
        # √âtape 5: Structure recommand√©e
        create_sample_database_structure()
        
        # √âtape 6: Installation des d√©pendances
        install_dependencies()
        
        # √âtape 7: Guide de d√©marrage
        create_quick_start_guide()
        
        print("\n" + "=" * 60)
        print("üéâ Configuration termin√©e avec succ√®s!")
        print("=" * 60)
        print()
        print("Prochaines √©tapes:")
        print("1. V√©rifiez que votre base de donn√©es Notion a la bonne structure")
        print("2. Lancez l'interface graphique: python notion_manager_gui.py")
        print("3. Testez la synchronisation avec votre workspace Cursor")
        print()
        print("Consultez le fichier GUIDE_DEMARRAGE_NOTION.md pour plus de d√©tails.")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Configuration annul√©e par l'utilisateur.")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("V√©rifiez vos param√®tres et r√©essayez.")

if __name__ == "__main__":
    main()


