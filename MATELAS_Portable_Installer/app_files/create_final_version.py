#!/usr/bin/env python3
"""
Script pour cr√©er la version finale 3.10.3 avec changelog complet
"""

import os
import sys
import json
import shutil
import zipfile
from pathlib import Path
from datetime import datetime

def create_final_version():
    """Cr√©e la version finale 3.10.3 avec toutes les am√©liorations"""
    
    print("üèÅ CR√âATION DE LA VERSION FINALE 3.10.3")
    print("=" * 60)
    print("üéØ Version finale avec syst√®me de mise √† jour complet")
    print()
    
    version = "3.10.3"
    description = "Version finale avec syst√®me de mise √† jour complet et changelog mis √† jour"
    changelog = """Version 3.10.3 - Version finale du syst√®me de mise √† jour

üéâ Version finale compl√®te:
- Syst√®me de mise √† jour automatique 100% fonctionnel
- Toutes les corrections de bugs appliqu√©es
- Changelog complet accessible via Menu Aide
- Documentation technique compl√®te
- Tests de validation int√©gr√©s

‚úÖ Fonctionnalit√©s valid√©es:
- D√©tection automatique des mises √† jour
- T√©l√©chargement s√©curis√© avec progression
- Installation robuste avec backup automatique
- Mise √† jour automatique du num√©ro de version
- Red√©marrage automatique de l'application
- Pr√©servation des fichiers de configuration
- Interface d'administration web
- Gestion d'erreurs compl√®te

üêõ Toutes les corrections appliqu√©es:
- Bug de backup des r√©pertoires corrig√©
- Gestion robuste des permissions
- Validation des t√©l√©chargements
- Nettoyage automatique des fichiers temporaires
- Logs d√©taill√©s pour le debugging

üìñ Documentation:
- Changelog d√©taill√© accessible via Menu Aide ‚Üí Changelog
- Guide d'utilisation du syst√®me de mise √† jour
- Documentation technique de l'API REST
- Tests automatis√©s pour validation"""
    
    # R√©pertoires
    app_dir = Path.cwd()
    storage_dir = Path("admin_update_storage")
    versions_dir = storage_dir / "versions"
    metadata_dir = storage_dir / "metadata"
    
    # Cr√©er les r√©pertoires si n√©cessaire
    versions_dir.mkdir(parents=True, exist_ok=True)
    metadata_dir.mkdir(parents=True, exist_ok=True)
    
    # Cr√©er le fichier ZIP
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_filename = f"matelas_v{version}_{timestamp}.zip"
    zip_path = versions_dir / zip_filename
    
    print(f"üì¶ Cr√©ation du ZIP final: {zip_filename}")
    
    # Fichiers √† exclure du ZIP
    exclude_patterns = {
        '__pycache__', '.pyc', '.git', '.DS_Store', 'node_modules',
        'admin_update_storage', 'backup_*', 'temp_*', 'test_download.zip',
        '*.backup', 'updater_config.json'
    }
    
    files_added = 0
    key_files_found = {
        'auto_updater.py': False,
        'correct_update_server.py': False,
        'version.py': False,
        'app_gui.py': False
    }
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(app_dir):
            # Exclure certains r√©pertoires
            dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)]
            
            for file in files:
                # Exclure certains fichiers
                if any(pattern in file for pattern in exclude_patterns):
                    continue
                
                file_path = Path(root) / file
                arcname = file_path.relative_to(app_dir)
                
                # V√©rifier les fichiers cl√©s
                if file in key_files_found:
                    key_files_found[file] = True
                
                try:
                    zipf.write(file_path, arcname)
                    files_added += 1
                    
                    if files_added <= 5:
                        print(f"  üìÅ {arcname}")
                    elif files_added == 6:
                        print("  ... (autres fichiers)")
                        
                except Exception as e:
                    print(f"  ‚ö†Ô∏è Ignor√© {arcname}: {e}")
    
    print(f"üì¶ {files_added} fichiers dans la version finale")
    
    # V√©rifier les fichiers cl√©s
    print(f"\nüîç FICHIERS CL√âS INCLUS:")
    all_key_files = True
    for file, found in key_files_found.items():
        if found:
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} manquant!")
            all_key_files = False
    
    # Informations sur le fichier
    zip_size = zip_path.stat().st_size
    zip_date = datetime.now().isoformat()
    
    print(f"\nüíæ Taille finale: {zip_size / (1024*1024):.1f} MB")
    
    # Charger le manifest existant
    manifest_file = metadata_dir / "manifest.json"
    
    if manifest_file.exists():
        with open(manifest_file, 'r', encoding='utf-8') as f:
            manifest = json.load(f)
    else:
        manifest = {
            "versions": [],
            "metadata": {},
            "statistics": {
                "total_downloads": 0,
                "storage_used": 0,
                "total_versions": 0,
                "active_versions": 0
            }
        }
    
    # Ajouter la nouvelle version
    new_version_info = {
        "version": version,
        "filename": zip_filename,
        "size": zip_size,
        "date": zip_date,
        "description": description,
        "changelog": changelog,
        "downloads": 0,
        "type": "minor"
    }
    
    manifest["versions"].append(new_version_info)
    
    # Trier les versions par ordre d√©croissant (plus r√©cente en premier)
    def version_key(v):
        return tuple(map(int, v["version"].split('.')))
    
    manifest["versions"] = sorted(manifest["versions"], key=version_key, reverse=True)
    
    # Mettre √† jour les m√©tadonn√©es
    manifest["metadata"] = {
        "created": manifest.get("metadata", {}).get("created", zip_date),
        "last_update": zip_date,
        "total_versions": len(manifest["versions"])
    }
    
    # Mettre √† jour les statistiques
    total_storage = sum(v["size"] for v in manifest["versions"])
    manifest["statistics"] = {
        "total_downloads": manifest["statistics"]["total_downloads"],
        "storage_used": total_storage,
        "total_versions": len(manifest["versions"]),
        "active_versions": len(manifest["versions"])
    }
    
    # Sauvegarder le manifest
    with open(manifest_file, 'w', encoding='utf-8') as f:
        json.dump(manifest, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Manifest final mis √† jour")
    print()
    print("üéâ VERSION FINALE 3.10.3 CR√â√âE AVEC SUCC√àS!")
    print()
    print("üöÄ SYST√àME COMPLET INCLUS:")
    print("  ‚úÖ D√©tection automatique des mises √† jour")
    print("  ‚úÖ Interface utilisateur compl√®te")
    print("  ‚úÖ Serveur de distribution des patches")
    print("  ‚úÖ Installation robuste avec backup")
    print("  ‚úÖ Mise √† jour automatique des versions")
    print("  ‚úÖ Red√©marrage automatique")
    print("  ‚úÖ Interface d'administration web")
    print("  ‚úÖ Changelog complet accessible")
    print("  ‚úÖ Tests de validation int√©gr√©s")
    
    return all_key_files

if __name__ == "__main__":
    success = create_final_version()
    
    if success:
        print("\nüéØ VERSION FINALE PR√äTE!")
        print("Votre syst√®me de mise √† jour automatique est maintenant complet.")
    else:
        print("\n‚ö†Ô∏è Fichiers manquants d√©tect√©s")
        print("V√©rifiez que tous les fichiers cl√©s sont pr√©sents")
        sys.exit(1)