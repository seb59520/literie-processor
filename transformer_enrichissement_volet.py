#!/usr/bin/env python3
"""
Script pour transformer la zone Enrichissement LLM en volet d√©roulant
"""

import re
import os

def analyser_zone_enrichissement():
    """Analyse la zone Enrichissement LLM actuelle"""
    
    print("üîç ANALYSE DE LA ZONE ENRICHISSEMENT LLM")
    print("=" * 60)
    
    fichier_gui = "app_gui.py"
    
    if not os.path.exists(fichier_gui):
        print(f"‚ùå Fichier {fichier_gui} non trouv√©")
        return False
    
    try:
        with open(fichier_gui, 'r', encoding='utf-8') as f:
            contenu = f.read()
        
        # Chercher la zone Enrichissement LLM
        if "Enrichissement LLM" in contenu:
            print("‚úÖ Zone 'Enrichissement LLM' trouv√©e")
        else:
            print("‚ùå Zone 'Enrichissement LLM' non trouv√©e")
        
        # Chercher le groupe LLM
        if "llm_group = QGroupBox" in contenu:
            print("‚úÖ Groupe LLM trouv√©")
        else:
            print("‚ùå Groupe LLM non trouv√©")
        
        # Chercher les √©l√©ments de la zone
        elements = [
            "llm_provider_combo",
            "api_key_group", 
            "enrichissement_checkbox",
            "llm_layout"
        ]
        
        print("\nüìã √âl√©ments trouv√©s dans la zone LLM :")
        for element in elements:
            if element in contenu:
                print(f"   ‚úÖ {element}")
            else:
                print(f"   ‚ùå {element}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
        return False

def afficher_plan_modification():
    """Affiche le plan de modification"""
    
    print("\nüéØ PLAN DE MODIFICATION")
    print("=" * 40)
    
    print("""
üîß MODIFICATIONS √Ä EFFECTUER :

1. üé® TRANSFORMATION EN VOLET D√âROULANT :
   - Remplacer QGroupBox statique par QGroupBox checkable
   - Ajouter propri√©t√© checkable=True
   - Connecter signal toggled pour ouvrir/fermer

2. üìè GESTION DE L'ESPACE :
   - Masquer les widgets enfants quand ferm√©
   - Ajuster la taille du volet selon l'√©tat
   - Sauvegarder l'√©tat dans la configuration

3. üé® STYLISATION :
   - Ajouter ic√¥ne pour indiquer l'√©tat
   - Style visuel pour le volet ferm√©/ouvert
   - Animation fluide (optionnel)

4. üíæ PERSISTANCE :
   - Sauvegarder l'√©tat ouvert/ferm√©
   - Restaurer l'√©tat au red√©marrage
   - Configuration utilisateur personnalisable

üìã CODE √Ä MODIFIER :
```python
# AVANT (statique)
llm_group = QGroupBox("Enrichissement LLM")

# APR√àS (d√©roulant)
llm_group = QGroupBox("üîΩ Enrichissement LLM")
llm_group.setCheckable(True)
llm_group.setChecked(True)  # Ouvert par d√©faut
llm_group.toggled.connect(self.on_llm_group_toggled)
```
""")

def afficher_implementation_complete():
    """Affiche l'impl√©mentation compl√®te"""
    
    print("\nüìù IMPL√âMENTATION COMPL√àTE")
    print("=" * 40)
    
    print("""
üîß FONCTION DE GESTION DU VOLET :

```python
def on_llm_group_toggled(self, checked):
    \"\"\"G√®re l'ouverture/fermeture du volet Enrichissement LLM\"\"\"
    try:
        # Afficher/masquer les widgets enfants
        for i in range(self.llm_layout.count()):
            widget = self.llm_layout.itemAt(i).widget()
            if widget:
                widget.setVisible(checked)
        
        # Changer l'ic√¥ne du titre
        if checked:
            self.llm_group.setTitle("üîΩ Enrichissement LLM")
            if hasattr(self, 'app_logger'):
                self.app_logger.info("Volet Enrichissement LLM ouvert")
        else:
            self.llm_group.setTitle("‚ñ∂Ô∏è Enrichissement LLM")
            if hasattr(self, 'app_logger'):
                self.app_logger.info("Volet Enrichissement LLM ferm√©")
        
        # Sauvegarder l'√©tat
        self.save_llm_panel_state(checked)
        
    except Exception as e:
        if hasattr(self, 'app_logger'):
            self.app_logger.error(f"Erreur lors du basculement du volet LLM: {e}")
```

üîß FONCTION DE SAUVEGARDE :

```python
def save_llm_panel_state(self, is_open):
    \"\"\"Sauvegarde l'√©tat du volet Enrichissement LLM\"\"\"
    try:
        config = config_manager.get_config()
        config['llm_panel_open'] = is_open
        config_manager.save_config(config)
    except Exception as e:
        if hasattr(self, 'app_logger'):
            self.app_logger.error(f"Erreur lors de la sauvegarde de l'√©tat du volet: {e}")
```

üîß RESTAURATION AU D√âMARRAGE :

```python
def restore_llm_panel_state(self):
    \"\"\"Restaure l'√©tat du volet Enrichissement LLM\"\"\"
    try:
        config = config_manager.get_config()
        is_open = config.get('llm_panel_open', True)  # Ouvert par d√©faut
        
        self.llm_group.setChecked(is_open)
        self.on_llm_group_toggled(is_open)
        
    except Exception as e:
        if hasattr(self, 'app_logger'):
            self.app_logger.error(f"Erreur lors de la restauration de l'√©tat du volet: {e}")
```
""")

def main():
    """Fonction principale"""
    
    print("üéØ TRANSFORMATEUR DE ZONE ENRICHISSEMENT LLM")
    print("=" * 70)
    
    # 1. Analyser la zone actuelle
    if analyser_zone_enrichissement():
        print("‚úÖ Analyse termin√©e avec succ√®s")
        
        # 2. Afficher le plan de modification
        afficher_plan_modification()
        
        # 3. Afficher l'impl√©mentation compl√®te
        afficher_implementation_complete()
        
        print("\nüéØ PROCHAINES √âTAPES :")
        print("1. Voulez-vous que j'applique ces modifications ?")
        print("2. Ou pr√©f√©rez-vous les faire manuellement ?")
        print("3. Souhaitez-vous d'abord voir le code actuel ?")
        
    else:
        print("‚ùå Impossible d'analyser la zone")

if __name__ == "__main__":
    main()

