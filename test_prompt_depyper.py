#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier l'extraction correcte des donn√©es DEPYPER
"""

import sys
import os
import json

# Ajouter le r√©pertoire au path pour importer les modules
sys.path.append(os.path.dirname(__file__))

def get_improved_prompt():
    """R√©cup√©rer le prompt am√©lior√©"""
    try:
        with open("prompt_ameliore_extraction.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return None

def get_test_text():
    """R√©cup√©rer le texte de test DEPYPER"""
    return """--- PAGE 1 ---
SAS Literie Westelynck au Capital de 23 100 Euros - 525 RD 642 - 59190 BORRE
T√®l. 03.28.48.04.19 - Fax 03.28.41.02.74 - contact@lwest.fr
Siret 429 352 891 00015 - APE 3103Z - CEE FR50 429 352 891
Domiciliation Bancaire : Cr√©dit Agricole d'Hazebrouck FR76 1670 6050 1650 4613 2602 3411/1
Maison
Fond√©e en
1899Mr et Me DEPYPER CHRISTIAN & ANNIE
285 RUE DE WALLON CAPPEL
CAMPING DES 8 RUES
59190 WALLON CAPPEL
Num√©ro Date Code client Mode de r√®glement
CM00009568 15/07/2025 DEPYCHWAL CBDate de validit√©COMMANDE
Commercial : P. ALINE
www.literie-westelynck.fr
Remise % Montant TTC P.U. TTC Qt√© Description
0,00 0,00 0,00 0,00 COMMANDE VALID√âE PAR T√âL√âPHONE
0,00 0,00 0,00 0,00 MOBILHOME AVEC CHAMBRE 160/ 190  (158 cm entre les 2 chevets)
0,00 0,00 0,00 0,00
0,00 511,50 511,50 1,00 MATELAS 1 PI√àCE -MOUSSE RAINUR √âE 7 ZONES DIFF√âRENCI√âES M√âDIUM
(50KG/ M3) -HOUSSE MATELASS √âETENCEL LUXE 3D LAVABLE A 40¬∞  79/ 189/ 20 -
Mme Gauche
Dont Eco -Part. M obilier (TTC) : 5,50‚Ç¨ sur P.U : 506,00‚Ç¨
0,00 511,50 511,50 1,00 MATELAS 1 PI√àCE -MOUSSE RAINUR √âE 7 ZONES DIFF√âRENCI√âES FERME
(55KG/ M3) -HOUSSE MATELASS √âETENCEL LUXE 3D LAVABLE A 40¬∞  79/ 189/ 20 -Mr
Droite
Dont Eco -Part. M obilier (TTC) : 5,50‚Ç¨ sur P.U : 506,00‚Ç¨
0,00 0,00 0,00 0,00
0,00 0,00 0,00 1,00 LIVRAISON ET INSTALLATION OFFERTES AU CAMPING DES 8 RUES A WALLON
CAPPEL
0,00 0,00 0,00 0,00
0,00 0,00 0,00 1,00 PRIX NETS TTC 2023 + ECOTAXES
ACOMPTE DE 343 ‚Ç¨ EN CB A LA COMMANDE ET SOLDE DE 680 ‚Ç¨ A LA LIVRAISON
0,00 0,00 0,00 0,00 D√âLAI : Fin ao√ªt
Taux Base HT Montant TVA
168,66 843,34 20,00
Port HT
Total TTC
Acomptes
Net √† payer0,00
1 023,00
343,00
680,00 ‚Ç¨"""

def analyze_extraction_errors(extracted_json, expected_data):
    """Analyser les erreurs d'extraction"""
    print("üîç Analyse des erreurs d'extraction")
    print("=" * 50)
    
    errors = []
    
    # V√©rifier les donn√©es client
    if "client" in extracted_json:
        client = extracted_json["client"]
        
        # V√©rifier le nom
        expected_name = "Mr et Me DEPYPER CHRISTIAN & ANNIE"
        if client.get("nom") != expected_name:
            errors.append(f"‚ùå Nom client incorrect: '{client.get('nom')}' au lieu de '{expected_name}'")
        else:
            print(f"‚úÖ Nom client correct: {client.get('nom')}")
        
        # V√©rifier l'adresse
        expected_address = "285 RUE DE WALLON CAPPEL, CAMPING DES 8 RUES, 59190 WALLON CAPPEL"
        if client.get("adresse") != expected_address:
            errors.append(f"‚ùå Adresse client incorrecte: '{client.get('adresse')}' au lieu de '{expected_address}'")
        else:
            print(f"‚úÖ Adresse client correcte: {client.get('adresse')}")
        
        # V√©rifier le code client
        expected_code = "DEPYCHWAL"
        if client.get("code_client") != expected_code:
            errors.append(f"‚ùå Code client incorrect: '{client.get('code_client')}' au lieu de '{expected_code}'")
        else:
            print(f"‚úÖ Code client correct: {client.get('code_client')}")
    
    # V√©rifier les donn√©es de commande
    if "commande" in extracted_json:
        commande = extracted_json["commande"]
        
        # V√©rifier le num√©ro de commande
        expected_num = "CM00009568"
        if commande.get("numero") != expected_num:
            errors.append(f"‚ùå Num√©ro commande incorrect: '{commande.get('numero')}' au lieu de '{expected_num}'")
        else:
            print(f"‚úÖ Num√©ro commande correct: {commande.get('numero')}")
        
        # V√©rifier la date
        expected_date = "15/07/2025"
        if commande.get("date") != expected_date:
            errors.append(f"‚ùå Date commande incorrecte: '{commande.get('date')}' au lieu de '{expected_date}'")
        else:
            print(f"‚úÖ Date commande correcte: {commande.get('date')}")
        
        # V√©rifier le commercial
        expected_commercial = "P. ALINE"
        if commande.get("commercial") != expected_commercial:
            errors.append(f"‚ùå Commercial incorrect: '{commande.get('commercial')}' au lieu de '{expected_commercial}'")
        else:
            print(f"‚úÖ Commercial correct: {commande.get('commercial')}")
    
    # V√©rifier les articles
    if "articles" in extracted_json:
        articles = extracted_json["articles"]
        print(f"üì¶ Nombre d'articles d√©tect√©s: {len(articles)}")
        
        # Chercher les matelas
        matelas_count = 0
        for article in articles:
            if article.get("type") == "matelas":
                matelas_count += 1
                print(f"üõèÔ∏è Matelas {matelas_count}: {article.get('description', '')[:50]}...")
        
        if matelas_count != 2:
            errors.append(f"‚ùå Nombre de matelas incorrect: {matelas_count} au lieu de 2")
        else:
            print(f"‚úÖ Nombre de matelas correct: {matelas_count}")
    
    # V√©rifier les paiements
    if "paiement" in extracted_json:
        paiement = extracted_json["paiement"]
        
        # V√©rifier le total TTC
        expected_total = 1023.00
        if paiement.get("total_ttc") != expected_total:
            errors.append(f"‚ùå Total TTC incorrect: {paiement.get('total_ttc')} au lieu de {expected_total}")
        else:
            print(f"‚úÖ Total TTC correct: {paiement.get('total_ttc')}")
        
        # V√©rifier l'acompte
        expected_acompte = 343.00
        if paiement.get("acompte") != expected_acompte:
            errors.append(f"‚ùå Acompte incorrect: {paiement.get('acompte')} au lieu de {expected_acompte}")
        else:
            print(f"‚úÖ Acompte correct: {paiement.get('acompte')}")
    
    return errors

def test_prompt_improvement():
    """Tester l'am√©lioration du prompt"""
    print("üîß Test d'am√©lioration du prompt")
    print("=" * 50)
    
    # R√©cup√©rer le prompt am√©lior√©
    improved_prompt = get_improved_prompt()
    if not improved_prompt:
        print("‚ùå Prompt am√©lior√© non trouv√©")
        return False
    
    print("‚úÖ Prompt am√©lior√© charg√©")
    
    # R√©cup√©rer le texte de test
    test_text = get_test_text()
    print(f"‚úÖ Texte de test charg√© ({len(test_text)} caract√®res)")
    
    # Afficher les donn√©es attendues
    print("\nüìã Donn√©es attendues pour DEPYPER:")
    print("-" * 40)
    print("üë§ Client: Mr et Me DEPYPER CHRISTIAN & ANNIE")
    print("üìç Adresse: 285 RUE DE WALLON CAPPEL, CAMPING DES 8 RUES, 59190 WALLON CAPPEL")
    print("üî¢ Code client: DEPYCHWAL")
    print("üìã Commande: CM00009568")
    print("üìÖ Date: 15/07/2025")
    print("üë®‚Äçüíº Commercial: P. ALINE")
    print("üõèÔ∏è Matelas: 2 (M√©dium et Ferme)")
    print("üí∞ Total TTC: 1023,00‚Ç¨")
    print("üí≥ Acompte: 343,00‚Ç¨")
    
    # Instructions pour le test manuel
    print("\nüß™ Instructions pour le test:")
    print("-" * 40)
    print("1. Copiez le prompt am√©lior√© depuis 'prompt_ameliore_extraction.txt'")
    print("2. Remplacez {text} par le texte de test DEPYPER")
    print("3. Testez avec votre LLM pr√©f√©r√©")
    print("4. V√©rifiez que les donn√©es extraites correspondent aux donn√©es attendues")
    
    return True

def main():
    """Fonction principale"""
    print("üîç Test d'am√©lioration du prompt pour extraction DEPYPER")
    print("=" * 60)
    
    try:
        success = test_prompt_improvement()
        
        if success:
            print("\nüéâ Test de pr√©paration termin√© !")
            print("=" * 60)
            print("‚úÖ Prompt am√©lior√© cr√©√©")
            print("‚úÖ Texte de test pr√©par√©")
            print("‚úÖ Donn√©es de r√©f√©rence d√©finies")
            print("\nüí° Utilisez le prompt am√©lior√© pour √©viter les erreurs d'extraction")
        else:
            print("\n‚ùå √âchec de la pr√©paration du test")
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 