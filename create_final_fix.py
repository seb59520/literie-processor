#!/usr/bin/env python3
"""
Patch final pour corriger tous les probl√®mes de la version portable
"""

import shutil
from pathlib import Path

def create_final_portable_fix():
    """Cr√©er tous les fichiers manquants pour la version portable"""
    
    print("üîß PATCH FINAL POUR VERSION PORTABLE")
    print("=" * 50)
    
    base_path = Path.cwd()
    portable_path = base_path / "dist_portable_update_ready"
    
    # 1. Cr√©er enhanced_processing_ui.py minimal
    enhanced_processing_ui_content = '''#!/usr/bin/env python3
"""
Enhanced Processing UI - Version minimale pour compatibilit√©
"""

from PyQt6.QtWidgets import QWidget

class EnhancedProcessingUI(QWidget):
    """Interface de traitement am√©lior√©e - Version minimale"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
    
    def apply_enhancements(self):
        """Appliquer les am√©liorations - Version minimale"""
        pass
    
    def setup_progress_display(self):
        """Configuration de l'affichage de progression - Version minimale"""
        pass

# Variables d'export pour compatibilit√©
ENHANCED_PROCESSING_AVAILABLE = False

def create_enhanced_processing_widget(parent=None):
    """Cr√©er un widget de traitement am√©lior√©"""
    return EnhancedProcessingUI(parent)

if __name__ == "__main__":
    print("Enhanced Processing UI - Version minimale")
'''
    
    enhanced_file = portable_path / "enhanced_processing_ui.py"
    with open(enhanced_file, 'w', encoding='utf-8') as f:
        f.write(enhanced_processing_ui_content)
    print("‚úÖ enhanced_processing_ui.py cr√©√©")
    
    # 2. Cr√©er une version simplifi√©e du syst√®me de logging avanc√©
    advanced_logging_simple = '''#!/usr/bin/env python3
"""
Syst√®me de logging avanc√© - Version simplifi√©e pour portable
"""

import logging
import sys
from pathlib import Path

def setup_advanced_logging(log_level=logging.INFO):
    """Configuration du logging avanc√© - Version simplifi√©e"""
    
    # Cr√©er le r√©pertoire logs
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # Configuration basique
    logger = logging.getLogger("MATELAS")
    logger.setLevel(log_level)
    
    # Handler pour fichier
    try:
        file_handler = logging.FileHandler(logs_dir / "app.log", encoding='utf-8')
        file_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        file_handler.setFormatter(file_formatter)
        logger.addHandler(file_handler)
    except Exception as e:
        print(f"Avertissement: Impossible de cr√©er le fichier de log: {e}")
    
    # Handler pour console
    console_handler = logging.StreamHandler(sys.stdout)
    console_formatter = logging.Formatter('%(levelname)s - %(message)s')
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    return logger

# Pour compatibilit√©
def get_advanced_logger():
    """Obtenir le logger avanc√©"""
    return logging.getLogger("MATELAS")

if __name__ == "__main__":
    logger = setup_advanced_logging()
    logger.info("Syst√®me de logging avanc√© initialis√©")
'''
    
    # Ajouter le logging √† app_gui.py directement
    app_gui_logging_fix = '''
# === AJOUT LOGGING POUR VERSION PORTABLE ===
import logging
from pathlib import Path

def setup_advanced_logging(log_level=logging.INFO):
    """Configuration du logging avanc√© - Version simplifi√©e portable"""
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    logger = logging.getLogger("MATELAS")
    logger.setLevel(log_level)
    
    # Handler fichier
    try:
        file_handler = logging.FileHandler(logs_dir / "app.log", encoding='utf-8')
        file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(file_formatter)
        logger.addHandler(file_handler)
    except Exception:
        pass
    
    return logger
# === FIN AJOUT LOGGING ===

'''
    
    # 3. Patcher app_gui.py pour corriger les imports manquants
    app_gui_file = portable_path / "app_gui.py"
    
    if app_gui_file.exists():
        print("üîß Correction de app_gui.py...")
        
        # Lire le contenu actuel
        with open(app_gui_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Corrections √† appliquer
        fixes = [
            # 1. Ajouter la fonction de logging directement
            ("import logging", f"import logging{app_gui_logging_fix}"),
            
            # 2. Corriger l'import enhanced_processing_ui
            ("ENHANCED_PROCESSING_AVAILABLE = True", "ENHANCED_PROCESSING_AVAILABLE = False"),
            
            # 3. G√©rer l'absence de modules optionnels
            ("from enhanced_processing_ui import", "# from enhanced_processing_ui import"),
        ]
        
        # Appliquer les corrections
        for old, new in fixes:
            if old in content:
                content = content.replace(old, new)
        
        # √âcrire le fichier corrig√©
        with open(app_gui_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ app_gui.py corrig√©")
    
    # 4. Cr√©er un fichier de d√©pendances minimales
    requirements_minimal = """# D√©pendances minimales MATELAS v3.11.12 Portable
PyQt6>=6.5.0
requests>=2.25.0
PyMuPDF>=1.20.0
openpyxl>=3.0.0
paramiko>=2.7.0
cryptography>=3.0.0
"""
    
    req_file = portable_path / "requirements_minimal.txt"
    with open(req_file, 'w', encoding='utf-8') as f:
        f.write(requirements_minimal)
    print("‚úÖ requirements_minimal.txt cr√©√©")
    
    # 5. Cr√©er un script de lancement simplifi√© pour tests
    simple_launcher = '''#!/usr/bin/env python3
"""
Lanceur simplifi√© MATELAS - Pour tests et d√©pannage
"""

import sys
import os
from pathlib import Path

def main():
    print("üöÄ MATELAS v3.11.12 - Lanceur Simplifi√©")
    print("=" * 40)
    
    # V√©rifications de base
    print(f"üìÇ R√©pertoire: {Path.cwd()}")
    print(f"üêç Python: {sys.version}")
    
    # Test des imports critiques
    try:
        print("üîç Test des imports...")
        import PyQt6
        print("  ‚úÖ PyQt6")
        
        import requests
        print("  ‚úÖ requests")
        
        import config
        print("  ‚úÖ config")
        
        import version
        print("  ‚úÖ version")
        
    except ImportError as e:
        print(f"  ‚ùå Import manquant: {e}")
        print("\\nüîß Ex√©cutez: python install.py")
        input("Appuyez sur Entr√©e...")
        return False
    
    # Lancer l'application
    print("\\nüöÄ Lancement de l'application...")
    
    try:
        # Import et lancement
        from PyQt6.QtWidgets import QApplication
        
        # Cr√©er l'application Qt
        app = QApplication(sys.argv)
        
        # Import de l'interface principale
        import app_gui
        
        # Lancer l'interface
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"‚ùå Erreur de lancement: {e}")
        print("\\nüìã Informations de d√©bogage:")
        print(f"   ‚Ä¢ R√©pertoire: {os.getcwd()}")
        print(f"   ‚Ä¢ Python: {sys.executable}")
        
        # Afficher la trace compl√®te
        import traceback
        traceback.print_exc()
        
        input("\\nAppuyez sur Entr√©e pour fermer...")
        return False

if __name__ == "__main__":
    main()
'''
    
    launcher_file = portable_path / "launch_simple.py"
    with open(launcher_file, 'w', encoding='utf-8') as f:
        f.write(simple_launcher)
    print("‚úÖ launch_simple.py cr√©√©")
    
    # 6. Mettre √† jour le script d'installation pour √™tre plus robuste
    robust_install = '''#!/usr/bin/env python3
"""
Installation robuste MATELAS v3.11.12 - Version finale
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_python():
    """V√©rifier Python et pip"""
    print("üêç V√©rification Python...")
    
    try:
        version_info = sys.version_info
        if version_info.major >= 3 and version_info.minor >= 8:
            print(f"   ‚úÖ Python {version_info.major}.{version_info.minor}.{version_info.micro}")
        else:
            print(f"   ‚ùå Python trop ancien: {version_info.major}.{version_info.minor}")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur Python: {e}")
        return False
    
    # V√©rifier pip
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "--version"], 
                            stdout=subprocess.DEVNULL)
        print("   ‚úÖ pip disponible")
        return True
    except subprocess.CalledProcessError:
        print("   ‚ùå pip non disponible")
        return False

def install_package(package_name, description=""):
    """Installer un package avec gestion d'erreurs"""
    try:
        print(f"   üì• {package_name} {description}...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", package_name, "--user", "--quiet"
        ])
        print(f"   ‚úÖ {package_name}")
        return True
    except subprocess.CalledProcessError:
        try:
            # Essayer sans --user
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", package_name, "--quiet"
            ])
            print(f"   ‚úÖ {package_name} (global)")
            return True
        except subprocess.CalledProcessError as e:
            print(f"   ‚ùå {package_name}: {e}")
            return False

def main():
    print("üöÄ INSTALLATION MATELAS v3.11.12 - ROBUSTE")
    print("=" * 50)
    
    # V√©rifier Python
    if not check_python():
        print("\\n‚ùå Python non compatible")
        input("Appuyez sur Entr√©e...")
        return False
    
    # Cr√©er r√©pertoires
    print("\\nüìÅ Cr√©ation r√©pertoires...")
    for dir_name in ["logs", "output", "temp_uploads", "data"]:
        Path(dir_name).mkdir(exist_ok=True)
        print(f"   ‚úÖ {dir_name}/")
    
    # Installation packages
    print("\\nüì¶ Installation d√©pendances...")
    packages = [
        ("PyQt6", "Interface graphique"),
        ("requests", "HTTP"),
        ("PyMuPDF", "PDF"),
        ("openpyxl", "Excel"),
        ("paramiko", "SFTP"),
        ("cryptography", "S√©curit√©")
    ]
    
    failed = []
    for package, desc in packages:
        if not install_package(package, desc):
            failed.append(package)
    
    # R√©sultats
    print(f"\\nüìä R√©sultats: {len(packages)-len(failed)}/{len(packages)} install√©s")
    
    if failed:
        print(f"‚ùå √âchecs: {', '.join(failed)}")
        print("\\nüîß Essayez:")
        print("   ‚Ä¢ Ex√©cuter en tant qu'Administrateur")
        print("   ‚Ä¢ pip install --upgrade pip")
        for pkg in failed:
            print(f"   ‚Ä¢ pip install {pkg}")
    else:
        print("‚úÖ Toutes les d√©pendances install√©es!")
    
    # Test final
    print("\\nüß™ Tests...")
    try:
        import PyQt6
        import config
        import version
        print("‚úÖ Tests r√©ussis!")
        print("\\nüöÄ Pour lancer:")
        print("   python app_gui.py")
        print("   python launch_simple.py  (version d√©pannage)")
        print("   lancer_matelas.bat")
    except ImportError as e:
        print(f"‚ùå Test √©chou√©: {e}")
    
    input("\\nAppuyez sur Entr√©e...")
    return len(failed) == 0

if __name__ == "__main__":
    main()
'''
    
    robust_install_file = portable_path / "install_robust.py"
    with open(robust_install_file, 'w', encoding='utf-8') as f:
        f.write(robust_install)
    print("‚úÖ install_robust.py cr√©√©")
    
    print("\n" + "=" * 50)
    print("‚úÖ PATCH FINAL APPLIQU√â!")
    print("üì¶ Fichiers ajout√©s/corrig√©s:")
    print("   ‚Ä¢ enhanced_processing_ui.py (minimal)")
    print("   ‚Ä¢ app_gui.py (logging int√©gr√©)")
    print("   ‚Ä¢ requirements_minimal.txt")
    print("   ‚Ä¢ launch_simple.py (lanceur d√©pannage)")
    print("   ‚Ä¢ install_robust.py (installation robuste)")
    
    return True

if __name__ == "__main__":
    create_final_portable_fix()