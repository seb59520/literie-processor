#!/usr/bin/env python3
"""Version ultra-minimale de app_gui pour identifier le crash"""

import sys
import os
from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel
from PyQt6.QtCore import QTimer

# Ajouter le r√©pertoire du projet au chemin Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Test progressif des imports backend
try:
    from backend.advanced_logging import get_advanced_logger, setup_advanced_logging
    print("‚úÖ advanced_logging import√©")
    ADVANCED_LOGGING_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è advanced_logging non disponible: {e}")
    ADVANCED_LOGGING_AVAILABLE = False

class MinimalLiterieApp(QMainWindow):
    def __init__(self):
        super().__init__()
        print("üîÑ D√©but init MinimalLiterieApp")
        
        # Test logging
        if ADVANCED_LOGGING_AVAILABLE:
            try:
                setup_advanced_logging()
                self.advanced_logger = get_advanced_logger()
                self.advanced_logger.app_logger.info("MinimalApp initialis√©e")
                print("‚úÖ Logging avanc√© OK")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur logging: {e}")
                self.advanced_logger = None
        else:
            self.advanced_logger = None
        
        # Interface ultra-basique
        self.setWindowTitle("Minimal Literie")
        self.resize(600, 400)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.addWidget(QLabel("Application Minimal - Test"))
        
        # Test Timer (probl√®me potentiel)
        print("üîÑ Test Timer...")
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(lambda: print("Timer OK"))
        
        print("‚úÖ Init termin√©e")

def main():
    print("üöÄ D√©marrage MinimalLiterieApp")
    app = QApplication(sys.argv)
    
    try:
        window = MinimalLiterieApp()
        print("‚úÖ Fen√™tre cr√©√©e")
        
        window.show()
        print("‚úÖ Fen√™tre affich√©e")
        
        # D√©marrer le timer apr√®s show
        window.status_timer.start(2000)
        print("‚úÖ Timer d√©marr√©")
        
        print("üéØ D√©marrage boucle √©v√©nements")
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()