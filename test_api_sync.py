#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier la synchronisation des cl√©s API
"""

import sys
import os

# Ajouter le r√©pertoire backend au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

try:
    from config import config
    print("‚úÖ Module config import√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur d'import config: {e}")
    sys.exit(1)

def test_api_sync():
    """Teste la synchronisation des cl√©s API"""
    print("üß™ Test de synchronisation des cl√©s API")
    print("=" * 50)
    
    # Test des providers disponibles
    providers = ["ollama", "openrouter", "openai", "anthropic"]
    
    for provider in providers:
        print(f"\nüì° Test du provider: {provider}")
        
        # V√©rifier si le provider est configur√©
        try:
            current_provider = config.get_current_llm_provider()
            print(f"   Provider actuel: {current_provider}")
        except Exception as e:
            print(f"   ‚ùå Erreur r√©cup√©ration provider actuel: {e}")
            continue
        
        # V√©rifier la cl√© API
        try:
            if provider == "ollama":
                api_key = None
                print(f"   ‚úÖ {provider}: Pas de cl√© API requise")
            else:
                api_key = config.get_llm_api_key(provider)
                if api_key:
                    # Masquer la cl√© pour la s√©curit√©
                    masked_key = api_key[:8] + "..." + api_key[-4:] if len(api_key) > 12 else "***"
                    print(f"   ‚úÖ {provider}: Cl√© API trouv√©e ({masked_key})")
                else:
                    print(f"   ‚ö†Ô∏è {provider}: Aucune cl√© API configur√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur r√©cup√©ration cl√© API {provider}: {e}")
    
    print("\nüéØ Test de configuration compl√®te")
    print("-" * 30)
    
    try:
        # Test de la configuration compl√®te
        current_provider = config.get_current_llm_provider()
        print(f"Provider actuel: {current_provider}")
        
        if current_provider != "ollama":
            api_key = config.get_llm_api_key(current_provider)
            if api_key:
                print(f"‚úÖ Configuration valide pour {current_provider}")
                return True
            else:
                print(f"‚ùå Aucune cl√© API configur√©e pour {current_provider}")
                return False
        else:
            print("‚úÖ Configuration valide pour Ollama (pas de cl√© requise)")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de configuration: {e}")
        return False

if __name__ == "__main__":
    success = test_api_sync()
    print(f"\n{'üéâ Test r√©ussi' if success else '‚ùå Test √©chou√©'}")
    sys.exit(0 if success else 1) 