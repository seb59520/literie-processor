#!/usr/bin/env python3
"""
D√©monstration du volet LLM d√©roulant
"""

import sys
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QGroupBox, QCheckBox, QComboBox, 
                             QLabel, QPushButton, QLineEdit, QProgressBar)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont

class DemoVoletLLM(QMainWindow):
    """Fen√™tre de d√©monstration du volet LLM d√©roulant"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üéØ D√©monstration - Volet LLM D√©roulant")
        self.setGeometry(100, 100, 500, 600)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        layout = QVBoxLayout(central_widget)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Titre
        title = QLabel("üéØ TRANSFORMATION ZONE ENRICHISSEMENT LLM")
        title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("color: #2c3e50; margin: 10px;")
        layout.addWidget(title)
        
        # Description
        desc = QLabel(
            "La zone 'Enrichissement LLM' est maintenant un volet d√©roulant !\n"
            "Cliquez sur le titre pour l'ouvrir/fermer et gagner de l'espace."
        )
        desc.setWordWrap(True)
        desc.setAlignment(Qt.AlignmentFlag.AlignCenter)
        desc.setStyleSheet("color: #7f8c8d; margin: 10px; font-size: 12px;")
        layout.addWidget(desc)
        
        # Volet LLM d√©roulant
        self.llm_group = QGroupBox("üîΩ Enrichissement LLM")
        self.llm_group.setCheckable(True)
        self.llm_group.setChecked(True)  # Ouvert par d√©faut
        self.llm_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #3498db;
                border-radius: 8px;
                margin-top: 15px;
                padding-top: 15px;
                background-color: #ecf0f1;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #2c3e50;
            }
            QGroupBox:checked {
                border-color: #3498db;
                background-color: #ecf0f1;
            }
            QGroupBox:!checked {
                border-color: #bdc3c7;
                background-color: #f8f9fa;
            }
        """)
        
        # Layout pour le contenu du volet
        self.llm_layout = QVBoxLayout(self.llm_group)
        self.llm_layout.setSpacing(10)
        
        # Checkbox d'enrichissement
        self.enrich_checkbox = QCheckBox("‚úÖ Utiliser l'enrichissement LLM")
        self.enrich_checkbox.setChecked(True)
        self.enrich_checkbox.setStyleSheet("font-weight: bold; color: #27ae60;")
        self.llm_layout.addWidget(self.enrich_checkbox)
        
        # S√©lection du provider
        provider_layout = QHBoxLayout()
        provider_layout.addWidget(QLabel("ü§ñ Provider:"))
        
        self.provider_combo = QComboBox()
        self.provider_combo.addItems(["ollama", "openrouter", "openai", "anthropic", "gemini", "mistral"])
        self.provider_combo.setCurrentText("ollama")
        self.provider_combo.setStyleSheet("""
            QComboBox {
                padding: 5px;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
                min-width: 120px;
            }
            QComboBox:focus {
                border-color: #3498db;
            }
        """)
        provider_layout.addWidget(self.provider_combo)
        provider_layout.addStretch()
        
        self.llm_layout.addLayout(provider_layout)
        
        # Groupe cl√© API (aussi d√©roulant)
        self.api_key_group = QGroupBox("üîê Cl√© API (cliquez pour afficher)")
        self.api_key_group.setCheckable(True)
        self.api_key_group.setChecked(False)  # Masqu√© par d√©faut
        self.api_key_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 15px;
                background-color: #f8f9fa;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #2c3e50;
            }
            QGroupBox:checked {
                border-color: #3498db;
                background-color: #ecf0f1;
            }
        """)
        
        api_key_layout = QVBoxLayout(self.api_key_group)
        
        # Champ cl√© API
        api_input_layout = QHBoxLayout()
        api_input_layout.addWidget(QLabel("üîë Cl√©:"))
        
        self.api_key_input = QLineEdit()
        self.api_key_input.setPlaceholderText("Entrez votre cl√© API...")
        self.api_key_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_key_input.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
                font-family: 'Courier New', monospace;
                font-size: 12px;
            }
            QLineEdit:focus {
                border-color: #3498db;
            }
        """)
        api_input_layout.addWidget(self.api_key_input)
        
        # Bouton afficher/masquer
        self.toggle_btn = QPushButton("üëÅ")
        self.toggle_btn.setFixedSize(35, 35)
        self.toggle_btn.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: 2px solid #7f8c8d;
                border-radius: 17px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        self.toggle_btn.clicked.connect(self.toggle_api_key_visibility)
        api_input_layout.addWidget(self.toggle_btn)
        
        api_key_layout.addLayout(api_input_layout)
        
        # Ajouter le groupe cl√© API au layout LLM
        self.llm_layout.addWidget(self.api_key_group)
        
        # Ajouter le volet LLM au layout principal
        layout.addWidget(self.llm_group)
        
        # Connecter le signal de basculement du volet LLM
        self.llm_group.toggled.connect(self.on_llm_group_toggled)
        
        # Connecter le signal de basculement de la cl√© API
        self.api_key_group.toggled.connect(self.on_api_key_group_toggled)
        
        # Informations sur l'√©tat
        self.status_label = QLabel("üü¢ Volet LLM: OUVERT | Cl√© API: MASQU√âE")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("""
            QLabel {
                background-color: #ecf0f1;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                padding: 10px;
                font-weight: bold;
                color: #2c3e50;
            }
        """)
        layout.addWidget(self.status_label)
        
        # Instructions
        instructions = QLabel(
            "üí° INSTRUCTIONS:\n"
            "‚Ä¢ Cliquez sur 'üîΩ Enrichissement LLM' pour ouvrir/fermer le volet\n"
            "‚Ä¢ Cliquez sur 'üîê Cl√© API' pour afficher/masquer la cl√©\n"
            "‚Ä¢ Utilisez le bouton üëÅ pour afficher/masquer la cl√© API\n"
            "‚Ä¢ L'√©tat est sauvegard√© automatiquement"
        )
        instructions.setWordWrap(True)
        instructions.setAlignment(Qt.AlignmentFlag.AlignCenter)
        instructions.setStyleSheet("""
            QLabel {
                background-color: #fff3cd;
                border: 2px solid #ffeaa7;
                border-radius: 8px;
                padding: 15px;
                color: #856404;
                font-size: 11px;
                line-height: 1.4;
            }
        """)
        layout.addWidget(instructions)
        
        # Espace flexible
        layout.addStretch()
        
        # Bouton de test
        test_btn = QPushButton("üß™ Tester le volet")
        test_btn.clicked.connect(self.test_volet)
        test_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 12px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        layout.addWidget(test_btn)
        
        # Initialiser l'√©tat
        self.update_status()
    
    def on_llm_group_toggled(self, checked):
        """G√®re l'ouverture/fermeture du volet Enrichissement LLM"""
        try:
            # Afficher/masquer les widgets enfants
            for i in range(self.llm_layout.count()):
                widget = self.llm_layout.itemAt(i).widget()
                if widget:
                    widget.setVisible(checked)
            
            # Changer l'ic√¥ne du titre
            if checked:
                self.llm_group.setTitle("üîΩ Enrichissement LLM")
                print("‚úÖ Volet Enrichissement LLM ouvert")
            else:
                self.llm_group.setTitle("‚ñ∂Ô∏è Enrichissement LLM")
                print("‚ñ∂Ô∏è Volet Enrichissement LLM ferm√©")
            
            # Mettre √† jour le statut
            self.update_status()
            
        except Exception as e:
            print(f"‚ùå Erreur lors du basculement du volet LLM: {e}")
    
    def on_api_key_group_toggled(self, checked):
        """G√®re l'ouverture/fermeture du volet cl√© API"""
        try:
            if checked:
                print("üîê Volet cl√© API ouvert")
            else:
                print("üîí Volet cl√© API ferm√©")
            
            # Mettre √† jour le statut
            self.update_status()
            
        except Exception as e:
            print(f"‚ùå Erreur lors du changement d'√©tat du volet cl√© API: {e}")
    
    def toggle_api_key_visibility(self):
        """Bascule l'affichage de la cl√© API"""
        try:
            if self.api_key_input.echoMode() == QLineEdit.EchoMode.Password:
                # Afficher la cl√©
                self.api_key_input.setEchoMode(QLineEdit.EchoMode.Normal)
                self.toggle_btn.setText("üôà")
                self.toggle_btn.setToolTip("Masquer la cl√© API")
                print("üëÅ Cl√© API affich√©e")
            else:
                # Masquer la cl√©
                self.api_key_input.setEchoMode(QLineEdit.EchoMode.Password)
                self.toggle_btn.setText("üëÅ")
                self.toggle_btn.setToolTip("Afficher la cl√© API")
                print("üôà Cl√© API masqu√©e")
        except Exception as e:
            print(f"‚ùå Erreur lors du basculement de la visibilit√©: {e}")
    
    def update_status(self):
        """Met √† jour l'affichage du statut"""
        llm_status = "OUVERT" if self.llm_group.isChecked() else "FERM√â"
        api_status = "VISIBLE" if self.api_key_group.isChecked() else "MASQU√âE"
        
        llm_icon = "üü¢" if self.llm_group.isChecked() else "üî¥"
        api_icon = "üü¢" if self.api_key_group.isChecked() else "üî¥"
        
        self.status_label.setText(
            f"{llm_icon} Volet LLM: {llm_status} | {api_icon} Cl√© API: {api_status}"
        )
    
    def test_volet(self):
        """Teste le fonctionnement du volet"""
        print("\nüß™ TEST DU VOLET:")
        print(f"   ‚Ä¢ Volet LLM: {'OUVERT' if self.llm_group.isChecked() else 'FERM√â'}")
        print(f"   ‚Ä¢ Cl√© API: {'VISIBLE' if self.api_key_group.isChecked() else 'MASQU√âE'}")
        print(f"   ‚Ä¢ Enrichissement: {'ACTIV√â' if self.enrich_checkbox.isChecked() else 'D√âSACTIV√â'}")
        print(f"   ‚Ä¢ Provider: {self.provider_combo.currentText()}")
        print("‚úÖ Test termin√© avec succ√®s !")

def main():
    """Fonction principale"""
    app = QApplication(sys.argv)
    
    # Style global
    app.setStyleSheet("""
        QMainWindow {
            background-color: #f5f5f5;
        }
    """)
    
    # Cr√©er et afficher la fen√™tre
    window = DemoVoletLLM()
    window.show()
    
    # Lancer l'application
    sys.exit(app.exec())

if __name__ == "__main__":
    main()

